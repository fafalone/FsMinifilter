'Update 02 June 2025;  .
Module modWDM
'Windows Driver Model Definitions for twinBASIC
'Ported by Jon Johnson (fafalone)

'Includes structs, enums, macros, and APIs from wdm.h, mountmgr.h, and other kernel mode driver headers
'This is *not* intended to be complete right off (wdm.h alone is nearly 50,000 lines!), rather expanded 
'by each project using it then used as a start for the next. If you substantially expand this module, 
'please submit an update!
'
'IMPORTANT: All drivers must call InitIOCTLs in DriverEntry *before all other code* if using IOCTLs in it.

'ONLY MAJOR VERSIONS AND USED VERSIONS INCLUDED:

#Const NTDDI_WINXP = &H05010000
#Const NTDDI_WS03 = &H05020000
#Const NTDDI_WIN6 = &H06000000
#Const NTDDI_VISTA = NTDDI_WIN6
#Const NTDDI_LONGHORN = NTDDI_VISTA
#Const NTDDI_WIN7 = &H06010000
#Const NTDDI_WIN8 = &H06020000
#Const NTDDI_WINBLUE = &H06030000
#Const NTDDI_WINTHRESHOLD = &H0A000000
#Const NTDDI_WIN10 = &H0A000000
#Const NTDDI_WIN10_RS1 = &H0A000002
#Const NTDDI_WIN10_RS2 = &H0A000003
#Const NTDDI_WIN10_RS3 = &H0A000004
#Const NTDDI_WIN10_RS4 = &H0A000005
#Const NTDDI_WIN10_RS5 = &H0A000006
#Const NTDDI_WIN10_CO = &H0A00000B
#Const NTDDI_WIN11_CO = NTDDI_WIN10_CO
#Const NTDDI_WIN11 = NTDDI_WIN11_CO


Public SOURCE_FILE As String

Public Const MAX_PATH                  As Long = 260

Public Type LARGE_INTEGER
    QuadPart As LongLong
End Type
Public Type ULARGE_INTEGER
    QuadPart As LongLong
End Type

Public Type UUID
    Data1 As Long
    Data2 As Integer
    Data3 As Integer
    Data4(0 To 7) As Byte
End Type

Public Type FILETIME
    dwLowDateTime As Long
    dwHighDateTime As Long
End Type

'For ExRaiseHardError messageboxes
Public Enum MessageBoxFlags
    MB_OK = &H00000000&
    MB_OKCANCEL = &H00000001
    MB_ABORTRETRYIGNORE = &H00000002
    MB_YESNOCANCEL = &H00000003
    MB_YESNO = &H00000004
    MB_RETRYCANCEL = &H00000005
    MB_CANCELTRYCONTINUE = &H00000006
    MB_ICONHAND = &H00000010
    MB_ICONQUESTION = &H00000020
    MB_ICONEXCLAMATION = &H00000030
    MB_ICONASTERISK = &H00000040
    MB_USERICON = &H00000080
    MB_ICONWARNING = MB_ICONEXCLAMATION
    MB_ICONERROR = MB_ICONHAND
    MB_ICONINFORMATION = MB_ICONASTERISK
    MB_ICONSTOP = MB_ICONHAND
    MB_DEFBUTTON1 = &H00000000
    MB_DEFBUTTON2 = &H00000100
    MB_DEFBUTTON3 = &H00000200
    MB_DEFBUTTON4 = &H00000300
    MB_APPLMODAL = &H00000000
    MB_SYSTEMMODAL = &H00001000
    MB_TASKMODAL = &H00002000
    MB_HELP = &H00004000  ' Help Button
    /*  = WINVER >= &H0400 */
    MB_NOFOCUS = &H00008000&
    MB_SETFOREGROUND = &H00010000
    MB_DEFAULT_DESKTOP_ONLY = &H00020000
    MB_TOPMOST = &H00040000
    MB_RIGHT = &H00080000
    MB_RTLREADING = &H00100000
    /*  = WINVER >= &H0400 */
    MB_SERVICE_NOTIFICATION = &H00200000
    MB_SERVICE_NOTIFICATION_NT3X = &H00040000

    MB_TYPEMASK = &H0000000F
    MB_ICONMASK = &H000000F0
    MB_DEFMASK = &H00000F00
    MB_MODEMASK = &H00003000
    MB_MISCMASK = &H0000C000&
End Enum

Public Const CHAR_BIT  = 8
Public Const SCHAR_MIN As Byte = &H80
Public Const SCHAR_MAX As Byte  = 127
Public Const UCHAR_MAX As Byte  = &Hff

'VBx/tB uses unsigned chars
Public Const CHAR_MIN  As Byte = 0
Public Const CHAR_MAX  As Byte = UCHAR_MAX

Public Const MB_LEN_MAX = 5
Public Const SHRT_MIN  = (-32768)
Public Const SHRT_MAX  = 32767
Public Const USHRT_MAX  = &Hffff
Public Const INT_MIN  = (-2147483647 - 1)
Public Const INT_MAX  = 2147483647
Public Const UINT_MAX  = &Hffffffff
Public Const LONG_MIN  = (-2147483647 - 1)
Public Const LONG_MAX  = 2147483647
Public Const ULONG_MAX  = &Hffffffff
Public Const LLONG_MAX As LongLong = 9223372036854775807^
Public Const LLONG_MIN As LongLong  = (-9223372036854775807^ - 1)
Public Const ULLONG_MAX As LongLong  = &Hffffffffffffffff^

Public Const _I8_MIN  = (-127 - 1)
Public Const _I8_MAX  = 127
Public Const _UI8_MAX  = &Hff
Public Const _I16_MIN  = (-32767 - 1)
Public Const _I16_MAX  = 32767
Public Const _UI16_MAX  = &Hffff
Public Const _I32_MIN  = (-2147483647 - 1)
Public Const _I32_MAX  = 2147483647
Public Const _UI32_MAX  = &Hffffffff
Public Const _I64_MIN As LongLong = (-9223372036854775807^ - 1)
Public Const _I64_MAX As LongLong  = 9223372036854775807^
Public Const _UI64_MAX As LongLong  = &Hffffffffffffffff^

Public Const MAXINT8  = 127
Public Const MAXUINT8  = &Hff
Public Const MININT8  = (-127 - 1)
Public Const MAXINT16  = 32767
Public Const MAXUINT16  = &Hffff
Public Const MININT16  = (-32767 - 1)
Public Const MAXINT32  = 2147483647
Public Const MAXUINT32  = &Hffffffff
Public Const MININT32  = (-2147483647 - 1)
Public Const MAXLONG32  = 2147483647
Public Const MAXULONG32  = &Hffffffff
Public Const MINLONG32  = (-2147483647 - 1)
Public Const MAXINT64  As LongLong = 9223372036854775807^
Public Const MAXUINT64 As LongLong  = &Hffffffffffffffff^
Public Const MININT64 As LongLong = (-9223372036854775807^ - 1)
Public Const MAXULONGLONG As LongLong = &Hffffffffffffffff^
Public Const MINLONGLONG As LongLong = (-9223372036854775807^ - 1)
Public Const MAXLONGLONG As LongLong = 9223372036854775807^
#if Win64 Then
Public Const SIZE_MAX As LongLong = &Hffffffffffffffff^
Public Const MAXSIZE_T As LongLong = &Hffffffffffffffff^
#Else
Public Const SIZE_MAX As Long = &Hffffffff
Public Const MAXSIZE_T As Long = &Hffffffff
#endif
Public Const MAXULONG64 As LongLong = Not 0^
Public Const MAXLONG64 As LongLong = MAXLONGLONG
Public Const MINLONG64 As LongLong = MINLONGLONG

Public Const MINCHAR  = &H80  ' winnt
Public Const MAXCHAR  = &H7f  ' winnt
Public Const MINSHORT  = &H8000  ' winnt
Public Const MAXSHORT  = &H7fff  ' winnt
Public Const MINLONG  = &H80000000  ' winnt
Public Const MAXLONG  = &H7fffffff  ' winnt
Public Const MAXUCHAR  = &Hff  ' winnt
Public Const MAXUSHORT  = &Hffff  ' winnt
Public Const MAXULONG  = &Hffffffff  ' winnt 
Public Const MAXBYTE  = &Hff
Public Const MAXWORD  = &Hffff
Public Const MAXDWORD  = &Hffffffff

Public Const DBL_DECIMAL_DIG  = 17  ' # of decimal digits of rounding precision
Public Const DBL_DIG  = 15  ' # of decimal digits of precision
Public Const DBL_EPSILON  = 2.2204460492503131e-016#  ' smallest such that 1.0+DBL_EPSILON != 1.0
Public Const DBL_HAS_SUBNORM  = 1  ' type does support subnormal numbers
Public Const DBL_MANT_DIG  = 53  ' # of bits in mantissa
Public Const DBL_MAX  = 1.7976931348623158e+308#  ' max value
Public Const DBL_MAX_10_EXP  = 308  ' max decimal exponent
Public Const DBL_MAX_EXP  = 1024  ' max binary exponent
Public Const DBL_MIN  = 2.2250738585072014e-308#  ' min positive value
Public Const DBL_MIN_10_EXP  = (-307)  ' min decimal exponent
Public Const DBL_MIN_EXP  = (-1021)  ' min binary exponent
Public Const _DBL_RADIX  = 2  ' exponent radix
Public Const DBL_TRUE_MIN  = 4.9406564584124654e-324#  ' min positive value

Public Const FLT_DECIMAL_DIG As Single = 9  ' # of decimal digits of rounding precision
Public Const FLT_DIG As Single  = 6  ' # of decimal digits of precision
Public Const FLT_EPSILON As Single = 1.192092896e-07!  ' smallest such that 1.0+FLT_EPSILON != 1.0
Public Const FLT_HAS_SUBNORM  As Single = 1  ' type does support subnormal numbers
Public Const FLT_GUARD  As Single = 0
Public Const FLT_MANT_DIG  As Single = 24  ' # of bits in mantissa
Public Const FLT_MAX As Single = 3.402823466e+38!   ' max value
Public Const FLT_MAX_10_EXP As Single  = 38  ' max decimal exponent
Public Const FLT_MAX_EXP As Single  = 128  ' max binary exponent
Public Const FLT_MIN  As Single = 1.175494351E-38!   ' min normalized positive value
Public Const FLT_MIN_10_EXP  As Single = (-37)  ' min decimal exponent
Public Const FLT_MIN_EXP  As Single = (-125)  ' min binary exponent
Public Const FLT_NORMALIZE  As Single = 0
Public Const FLT_RADIX  As Single = 2  ' exponent radix
Public Const FLT_TRUE_MIN As Single = 1.401298464E-45!   ' min positive value


Public Type SID_IDENTIFIER_AUTHORITY
    Value(0 To 5) As Byte
End Type
[Description("NOTE: You may need to use this as a header for a custom structure with fewer subauthorities appended.")]
Public Type SID
    Revision As Byte
    SubAuthorityCount As Byte
    IdentifierAuthority As SID_IDENTIFIER_AUTHORITY
    SubAuthority(SID_MAX_SUB_AUTHORITIES) As Long
End Type
Public Const SID_REVISION  = (1)  ' Current revision level
Public Const SID_MAX_SUB_AUTHORITIES  = (15)
Public Const SID_RECOMMENDED_SUB_AUTHORITIES  = (1)
Public Const SECURITY_MAX_SID_SIZE = (60) '(sizeof(SID) - sizeof(DWORD) + (SID_MAX_SUB_AUTHORITIES * sizeof(DWORD)))
Public Type SECURITY_DESCRIPTOR
    Revision As Byte
    Sbz1 As Byte
    Control As Integer
    Owner As LongPtr
    Group As LongPtr
    Sacl As LongPtr
    Dacl As LongPtr
End Type
Public Const SECURITY_DESCRIPTOR_REVISION  = (1)
Public Const SECURITY_DESCRIPTOR_REVISION1  = (1)
#If Win64 Then
    Public Const SECURITY_DESCRIPTOR_MIN_LENGTH  = 40
#Else
    Public Const SECURITY_DESCRIPTOR_MIN_LENGTH  = &H14
#End If
Public Type SE_SID
' typedef union _SE_SID {
    ' SID Sid;
    ' UCHAR Buffer[SECURITY_MAX_SID_SIZE];
' } SE_SID, *PSE_SID;
    Buffer(0 To (SECURITY_MAX_SID_SIZE - 1)) As Byte
End Type

Public Enum SECURITY_INFORMATION
    OWNER_SECURITY_INFORMATION = (&H00000001)
    GROUP_SECURITY_INFORMATION = (&H00000002)
    DACL_SECURITY_INFORMATION = (&H00000004)
    SACL_SECURITY_INFORMATION = (&H00000008)
    LABEL_SECURITY_INFORMATION = (&H00000010)
    ATTRIBUTE_SECURITY_INFORMATION = (&H00000020)
    SCOPE_SECURITY_INFORMATION = (&H00000040)
    PROCESS_TRUST_LABEL_SECURITY_INFORMATION = (&H00000080)
    ACCESS_FILTER_SECURITY_INFORMATION = (&H00000100)
    BACKUP_SECURITY_INFORMATION = (&H00010000)
    PROTECTED_DACL_SECURITY_INFORMATION = (&H80000000)
    PROTECTED_SACL_SECURITY_INFORMATION = (&H40000000)
    UNPROTECTED_DACL_SECURITY_INFORMATION = (&H20000000)
    UNPROTECTED_SACL_SECURITY_INFORMATION = (&H10000000)
End Enum


Public Enum BOOL
    CFALSE
    CTRUE
End Enum

Public Type UNICODE_STRING
    Length As Integer
    MaximumLength As Integer
    Buffer As LongPtr
End Type
Public Const UNICODE_STRING_MAX_BYTES As Long = 65534
Public Const UNICODE_STRING_MAX_CHARS As Integer = 32767
Public Type ANSI_STRING
    Length As Integer
    MaximumLength As Integer
    Buffer As LongPtr
End Type
Public Type OEM_STRING
    Length As Integer
    MaximumLength As Integer
    Buffer As LongPtr
End Type
Public Enum StandardAccessTypes
    DELETE = (&H00010000)
    READ_CONTROL = (&H00020000)
    WRITE_DAC = (&H00040000)
    WRITE_OWNER = (&H00080000)
    SYNCHRONIZE = (&H00100000)

    STANDARD_RIGHTS_REQUIRED = (&H000F0000)

    STANDARD_RIGHTS_READ = (READ_CONTROL)
    STANDARD_RIGHTS_WRITE = (READ_CONTROL)
    STANDARD_RIGHTS_EXECUTE = (READ_CONTROL)

    STANDARD_RIGHTS_ALL = (&H001F0000)

    SPECIFIC_RIGHTS_ALL = (&H0000FFFF&)

' //
' // AccessSystemAcl access type
' //

    ACCESS_SYSTEM_SECURITY = (&H01000000)
    MAXIMUM_ALLOWED = (&H02000000)
End Enum
Public Enum GenericRights
    GENERIC_READ = (&H80000000)
    GENERIC_WRITE = (&H40000000)
    GENERIC_EXECUTE = (&H20000000)
    GENERIC_ALL = (&H10000000)
End Enum
Public Enum FileAccessRights
    FILE_READ_DATA = (&H0001)  ' file & pipe
    FILE_LIST_DIRECTORY = (&H0001)  ' directory
    FILE_WRITE_DATA = (&H0002)  ' file & pipe
    FILE_ADD_FILE = (&H0002)  ' directory
    FILE_APPEND_DATA = (&H0004)  ' file
    FILE_ADD_SUBDIRECTORY = (&H0004)  ' directory
    FILE_CREATE_PIPE_INSTANCE = (&H0004)  ' named pipe
    FILE_READ_EA = (&H0008)  ' file & directory
    FILE_WRITE_EA = (&H0010)  ' file & directory
    FILE_EXECUTE = (&H0020)  ' file
    FILE_TRAVERSE = (&H0020)  ' directory
    FILE_DELETE_CHILD = (&H0040)  ' directory
    FILE_READ_ATTRIBUTES = (&H0080)  ' all
    FILE_WRITE_ATTRIBUTES = (&H0100)  ' all
    FILE_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED Or SYNCHRONIZE Or &H1FF)
    FILE_GENERIC_READ = (STANDARD_RIGHTS_READ Or FILE_READ_DATA Or FILE_READ_ATTRIBUTES Or FILE_READ_EA Or SYNCHRONIZE)
    FILE_GENERIC_WRITE = (STANDARD_RIGHTS_WRITE Or FILE_WRITE_DATA Or FILE_WRITE_ATTRIBUTES Or FILE_WRITE_EA Or FILE_APPEND_DATA Or SYNCHRONIZE)
    FILE_GENERIC_EXECUTE = (STANDARD_RIGHTS_EXECUTE Or FILE_READ_ATTRIBUTES Or FILE_EXECUTE Or SYNCHRONIZE)
End Enum
Public Enum FILE_ATTRIBUTES
    INVALID_FILE_ATTRIBUTES = -1
    FILE_ATTRIBUTE_READONLY = &H00000001
    FILE_ATTRIBUTE_HIDDEN = &H00000002
    FILE_ATTRIBUTE_SYSTEM = &H00000004
    FILE_ATTRIBUTE_DIRECTORY = &H00000010 'Read only
    FILE_ATTRIBUTE_ARCHIVE = &H00000020
    FILE_ATTRIBUTE_DEVICE = &H00000040
    FILE_ATTRIBUTE_NORMAL = &H00000080
    FILE_ATTRIBUTE_TEMPORARY = &H00000100
    FILE_ATTRIBUTE_SPARSE_FILE = &H00000200 'Read only
    FILE_ATTRIBUTE_REPARSE_POINT = &H00000400 'Read only
    FILE_ATTRIBUTE_COMPRESSED = &H00000800
    FILE_ATTRIBUTE_OFFLINE = &H00001000
    FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = &H00002000
    FILE_ATTRIBUTE_ENCRYPTED = &H00004000
    FILE_ATTRIBUTE_INTEGRITY_STREAM = &H00008000&
    FILE_ATTRIBUTE_VIRTUAL = &H00010000
    FILE_ATTRIBUTE_NO_SCRUB_DATA = &H00020000
    FILE_ATTRIBUTE_EA = &H00040000
    FILE_ATTRIBUTE_RECALL_ON_OPEN = &H00040000
    FILE_ATTRIBUTE_PINNED = &H000080000
    FILE_ATTRIBUTE_UNPINNED = &H00100000
    FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS = &H400000
    FILE_ATTRIBUTE_STRICTLY_SEQUENTIAL = &H20000000
End Enum
Public Enum FileShareMode
    FILE_SHARE_READ = &H00000001
    FILE_SHARE_WRITE = &H00000002
    FILE_SHARE_DELETE = &H00000004
End Enum
Public Enum FileCreateDisposition
    FILE_SUPERSEDE = &H00000000
    FILE_OPEN = &H00000001
    FILE_CREATE = &H00000002
    FILE_OPEN_IF = &H00000003
    FILE_OVERWRITE = &H00000004
    FILE_OVERWRITE_IF = &H00000005
    FILE_MAXIMUM_DISPOSITION = &H00000005
End Enum
Public Enum FileCreateOutcome
    FILE_SUPERSEDED = &H00000000
    FILE_OPENED = &H00000001
    FILE_CREATED = &H00000002
    FILE_OVERWRITTEN = &H00000003
    FILE_EXISTS = &H00000004
    FILE_DOES_NOT_EXIST = &H00000005
End Enum
Public Enum FileAccessFlags
    FILE_DIRECTORY_FILE = &H00000001
    FILE_WRITE_THROUGH = &H00000002
    FILE_SEQUENTIAL_ONLY = &H00000004
    FILE_NO_INTERMEDIATE_BUFFERING = &H00000008
    FILE_SYNCHRONOUS_IO_ALERT = &H00000010
    FILE_SYNCHRONOUS_IO_NONALERT = &H00000020
    FILE_NON_DIRECTORY_FILE = &H00000040
    FILE_CREATE_TREE_CONNECTION = &H00000080
    FILE_COMPLETE_IF_OPLOCKED = &H00000100
    FILE_NO_EA_KNOWLEDGE = &H00000200
    FILE_OPEN_REMOTE_INSTANCE = &H00000400
    FILE_RANDOM_ACCESS = &H00000800
    FILE_DELETE_ON_CLOSE = &H00001000
    FILE_OPEN_BY_FILE_ID = &H00002000
    FILE_OPEN_FOR_BACKUP_INTENT = &H00004000
    FILE_NO_COMPRESSION = &H00008000&
' #if (_WIN32_WINNT >= _WIN32_WINNT_WIN7)
    FILE_OPEN_REQUIRING_OPLOCK = &H00010000
' #endif
    FILE_RESERVE_OPFILTER = &H00100000
    FILE_OPEN_REPARSE_POINT = &H00200000
    FILE_OPEN_NO_RECALL = &H00400000
    FILE_OPEN_FOR_FREE_SPACE_QUERY = &H00800000
    FILE_VALID_OPTION_FLAGS = &H00ffffff
    FILE_VALID_PIPE_OPTION_FLAGS = &H00000032
    FILE_VALID_MAILSLOT_OPTION_FLAGS = &H00000032
    FILE_VALID_SET_FLAGS = &H00000036
End Enum
Public Enum DirectoryAccessRights
    DIRECTORY_QUERY = (&H0001)
    DIRECTORY_TRAVERSE = (&H0002)
    DIRECTORY_CREATE_OBJECT = (&H0004)
    DIRECTORY_CREATE_SUBDIRECTORY = (&H0008)
    DIRECTORY_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED Or &HF)
End Enum
Public Enum SymbolicLinkAccessRights
    SYMBOLIC_LINK_QUERY = (&H0001)
    SYMBOLIC_LINK_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED Or &H1)
End Enum

Public Enum DEVICE_TYPE
    FILE_DEVICE_8042_PORT = &H00000027
    FILE_DEVICE_ACPI = &H00000032
    FILE_DEVICE_BATTERY = &H00000029
    FILE_DEVICE_BEEP = &H00000001
    FILE_DEVICE_BUS_EXTENDER = &H0000002a
    FILE_DEVICE_CD_ROM = &H00000002
    FILE_DEVICE_CD_ROM_FILE_SYSTEM = &H00000003
    FILE_DEVICE_CHANGER = &H00000030
    FILE_DEVICE_CONTROLLER = &H00000004
    FILE_DEVICE_DATALINK = &H00000005
    FILE_DEVICE_DFS = &H00000006
    FILE_DEVICE_DFS_FILE_SYSTEM = &H00000035
    FILE_DEVICE_DFS_VOLUME = &H00000036
    FILE_DEVICE_DISK = &H00000007
    FILE_DEVICE_DISK_FILE_SYSTEM = &H00000008
    FILE_DEVICE_DVD = &H00000033
    FILE_DEVICE_FILE_SYSTEM = &H00000009
    FILE_DEVICE_FIPS = &H0000003a
    FILE_DEVICE_FULLSCREEN_VIDEO = &H00000034
    FILE_DEVICE_INPORT_PORT = &H0000000a
    FILE_DEVICE_KEYBOARD = &H0000000b
    FILE_DEVICE_KS = &H0000002f
    FILE_DEVICE_KSEC = &H00000039
    FILE_DEVICE_MAILSLOT = &H0000000c
    FILE_DEVICE_MASS_STORAGE = &H0000002d
    FILE_DEVICE_MIDI_IN = &H0000000d
    FILE_DEVICE_MIDI_OUT = &H0000000e
    FILE_DEVICE_MODEM = &H0000002b
    FILE_DEVICE_MOUSE = &H0000000f
    FILE_DEVICE_MULTI_UNC_PROVIDER = &H00000010
    FILE_DEVICE_NAMED_PIPE = &H00000011
    FILE_DEVICE_NETWORK = &H00000012
    FILE_DEVICE_NETWORK_BROWSER = &H00000013
    FILE_DEVICE_NETWORK_FILE_SYSTEM = &H00000014
    FILE_DEVICE_NETWORK_REDIRECTOR = &H00000028
    FILE_DEVICE_NULL = &H00000015
    FILE_DEVICE_PARALLEL_PORT = &H00000016
    FILE_DEVICE_PHYSICAL_NETCARD = &H00000017
    FILE_DEVICE_PRINTER = &H00000018
    FILE_DEVICE_SCANNER = &H00000019
    FILE_DEVICE_SCREEN = &H0000001c
    FILE_DEVICE_SERENUM = &H00000037
    FILE_DEVICE_SERIAL_MOUSE_PORT = &H0000001a
    FILE_DEVICE_SERIAL_PORT = &H0000001b
    FILE_DEVICE_SMARTCARD = &H00000031
    FILE_DEVICE_SMB = &H0000002e
    FILE_DEVICE_SOUND = &H0000001d
    FILE_DEVICE_STREAMS = &H0000001e
    FILE_DEVICE_TAPE = &H0000001f
    FILE_DEVICE_TAPE_FILE_SYSTEM = &H00000020
    FILE_DEVICE_TERMSRV = &H00000038
    FILE_DEVICE_TRANSPORT = &H00000021
    FILE_DEVICE_UNKNOWN = &H00000022
    FILE_DEVICE_VDM = &H0000002c
    FILE_DEVICE_VIDEO = &H00000023
    FILE_DEVICE_VIRTUAL_DISK = &H00000024
    FILE_DEVICE_WAVE_IN = &H00000025
    FILE_DEVICE_WAVE_OUT = &H00000026
    FILE_DEVICE_INFINIBAND = &H0000003B
    FILE_DEVICE_VMBUS = &H0000003E
    FILE_DEVICE_CRYPT_PROVIDER = &H0000003F
    FILE_DEVICE_WPD = &H00000040
    FILE_DEVICE_BLUETOOTH = &H00000041
    FILE_DEVICE_MT_COMPOSITE = &H00000042
    FILE_DEVICE_MT_TRANSPORT = &H00000043
    FILE_DEVICE_BIOMETRIC = &H00000044
    FILE_DEVICE_PMI = &H00000045
    FILE_DEVICE_EHSTOR = &H00000046
    FILE_DEVICE_DEVAPI = &H00000047
    FILE_DEVICE_GPIO = &H00000048
    FILE_DEVICE_USBEX = &H00000049
    FILE_DEVICE_CONSOLE = &H00000050
    FILE_DEVICE_NFP = &H00000051
    FILE_DEVICE_SYSENV = &H00000052
    FILE_DEVICE_VIRTUAL_BLOCK = &H00000053
    FILE_DEVICE_POINT_OF_SERVICE = &H00000054
    FILE_DEVICE_STORAGE_REPLICATION = &H00000055
    FILE_DEVICE_TRUST_ENV = &H00000056
    FILE_DEVICE_UCM = &H00000057
    FILE_DEVICE_UCMTCPCI = &H00000058
    FILE_DEVICE_PERSISTENT_MEMORY = &H00000059
    FILE_DEVICE_NVDIMM = &H0000005a
    FILE_DEVICE_HOLOGRAPHIC = &H0000005b
    FILE_DEVICE_SDFXHCI = &H0000005c
    FILE_DEVICE_UCMUCSI = &H0000005d
    FILE_DEVICE_PRM = &H0000005e
    FILE_DEVICE_EVENT_COLLECTOR = &H0000005f
    FILE_DEVICE_USB4 = &H00000060
    FILE_DEVICE_SOUNDWIRE = &H00000061
End Enum

Public Enum GROUP_SID_ATTRIBUTES
    SE_GROUP_MANDATORY = (&H00000001)
    SE_GROUP_ENABLED_BY_DEFAULT = (&H00000002)
    SE_GROUP_ENABLED = (&H00000004)
    SE_GROUP_OWNER = (&H00000008)
    SE_GROUP_USE_FOR_DENY_ONLY = (&H00000010)
    SE_GROUP_INTEGRITY = (&H00000020)
    SE_GROUP_INTEGRITY_ENABLED = (&H00000040)
    SE_GROUP_LOGON_ID = (&HC0000000)
    SE_GROUP_RESOURCE = (&H20000000)
    SE_GROUP_VALID_ATTRIBUTES = (SE_GROUP_MANDATORY Or SE_GROUP_ENABLED_BY_DEFAULT Or SE_GROUP_ENABLED Or SE_GROUP_OWNER Or SE_GROUP_USE_FOR_DENY_ONLY Or SE_GROUP_LOGON_ID Or SE_GROUP_RESOURCE Or SE_GROUP_INTEGRITY Or SE_GROUP_INTEGRITY_ENABLED)
End Enum

Public Enum SID_NAME_USE
    SidTypeUser = 1
    SidTypeGroup = 2
    SidTypeDomain = 3
    SidTypeAlias = 4
    SidTypeWellKnownGroup = 5
    SidTypeDeletedAccount = 6
    SidTypeInvalid = 7
    SidTypeUnknown = 8
    SidTypeComputer = 9
    SidTypeLabel = 10
    SidTypeLogonSession = 11
End Enum
Public Type SID_AND_ATTRIBUTES
    Sid As LongPtr
    Attributes As GROUP_SID_ATTRIBUTES
End Type
Public Const SID_HASH_SIZE = 32

Public Type SID_AND_ATTRIBUTES_HASH
    SidCount As Long
    SidAttr As LongPtr
    Hash(0 To (SID_HASH_SIZE - 1)) As LongPtr
End Type

Public Type LUID
    lowPart As Long
    highPart As Long
End Type

Public Enum SE_PRIVILEGE_ATTR
    SE_PRIVILEGE_ENABLED_BY_DEFAULT = (&H00000001)
    SE_PRIVILEGE_ENABLED = (&H00000002)
    SE_PRIVILEGE_REMOVED = (&H00000004)
    SE_PRIVILEGE_USED_FOR_ACCESS = (&H80000000)
End Enum

Public Type LUID_AND_ATTRIBUTES
    pLuid       As LUID
    Attributes  As SE_PRIVILEGE_ATTR
End Type

Public Type TOKEN_PRIVILEGES
    PrivilegeCount      As Long
    Privileges(0 To 1)  As LUID_AND_ATTRIBUTES
End Type

Public Enum TOKEN_TYPE
    TokenPrimary = 1
    TokenImpersonation
End Enum

Public Enum SECURITY_IMPERSONATION_LEVEL
    SecurityAnonymous = 0
    SecurityIdentification = 1
    SecurityImpersonation = 2
    SecurityDelegation = 3
End Enum


Public Const IOCTL_DISK_BASE = FILE_DEVICE_DISK
Public IOCTL_DISK_GET_PARTITION_INFO As Long
Public IOCTL_DISK_GET_MEDIA_TYPES As Long
Public IOCTL_DISK_GET_DRIVE_GEOMETRY As Long
Public IOCTL_DISK_CHECK_VERIFY As Long
Public IOCTL_DISK_IS_WRITABLE As Long
Public IOCTL_DISK_SET_PARTITION_INFO As Long
Public IOCTL_DISK_FORMAT_TRACKS As Long
Public Const MOUNTMGRCONTROLTYPE = &H0000006
Public Const MOUNTDEVCONTROLTYPE = &H0000004
Public IOCTL_MOUNTMGR_QUERY_POINTS As Long
Public IOCTL_MOUNTDEV_QUERY_DEVICE_NAME As Long

Public Const FTTYPE As Long = &H66 'f'
Public FT_BALANCED_READ_MODE As Long

Public Enum ObjectAttributeValues
    OBJ_INHERIT = &H00000002
    OBJ_PERMANENT = &H00000010
    OBJ_EXCLUSIVE = &H00000020
    OBJ_CASE_INSENSITIVE = &H00000040
    OBJ_OPENIF = &H00000080
    OBJ_OPENLINK = &H00000100
    OBJ_KERNEL_HANDLE = &H00000200
    OBJ_FORCE_ACCESS_CHECK = &H00000400
    OBJ_IGNORE_IMPERSONATED_DEVICEMAP = &H00000800
    OBJ_DONT_REPARSE = &H00001000
    OBJ_VALID_ATTRIBUTES = &H00001FF2
End Enum
Public Type OBJECT_ATTRIBUTES
    Length As Long
    RootDirectory As LongPtr
    ObjectName As LongPtr
    Attributes As ObjectAttributeValues
    SecurityDescriptor As LongPtr
    SecurityQualityOfService As LongPtr
End Type

#If Win64 Then
Public Type _SLIST_HEADER
    HeaderX64(15) As Byte
End Type
#Else
Public Type _SLIST_HEADER
    Alignment As LongLong
End Type
#End If

Public Type GENERAL_LOOKASIDE_LAYOUT
    ListHead As _SLIST_HEADER' or _SINGLE_LIST_ENTRY
    Depth As Integer
    MaximumDepth As Integer
    TotalAllocates As Long
    AllocateMissesHits As Long
    TotalFrees As Long
    FreeMissesHits As Long
    Type As POOL_TYPE
    Tag As Long
    Size As Long
    Allocate As LongPtr
    Free As LongPtr
    ListEntry As LIST_ENTRY
    LastTotalAllocates As Long
    LastAllocateMissesHits As Long
    Future(1) As Long
End Type

Public Type _GENERAL_LOOKASIDE
    L As GENERAL_LOOKASIDE_LAYOUT
    #If Win64 Then
    align(31) As Byte 'LOOKASIDE_ALIGN
    #Else
    align(55) As Byte
    #End If
End Type


Public Type NPAGED_LOOKASIDE_LIST
    L As _GENERAL_LOOKASIDE
    #If Win64 = 0 Then
    Lock__ObsoleteButDoNotDelete As Long
    align(59) As Byte
    #End If
End Type


Public Type LIST_ENTRY
    Flink               As LongPtr
    Blink               As LongPtr
End Type

Public Type KDEVICE_QUEUE
    Type                As Integer
    Size                As Integer
    DeviceListHead      As LIST_ENTRY
    Lock                As LongPtr
    Busy                As Long
End Type

Public Type KDPC
    Type                As Byte
    Importance          As Byte
    Number              As Integer
    DpcListEntry        As LongPtr
    ProcessorHistory    As LongPtr
    DeferredRoutine     As LongPtr
    DeferredContext     As LongPtr
    SystemArgument1     As LongPtr
    SystemArgument2     As LongPtr
    DpcData             As LongPtr
End Type

Public Type DISPATCHER_HEADER
    Lock                As Long
    SignalState         As Long
    WaitListHead        As LIST_ENTRY
End Type

Public Enum EVENT_TYPE
    NotificationEvent
    SynchronizationEvent
End Enum

Public Type KEVENT
    Header As DISPATCHER_HEADER
End Type

Public Enum KWAIT_REASON
    Executive = 0
    FreePage = 1
    PageIn = 2
    PoolAllocation = 3
    DelayExecution = 4
    Suspended = 5
    UserRequest = 6
    WrExecutive = 7
    WrFreePage = 8
    WrPageIn = 9
    WrPoolAllocation = 10
    WrDelayExecution = 11
    WrSuspended = 12
    WrUserRequest = 13
    WrSpare0 = 14
    WrQueue = 15
    WrLpcReceive = 16
    WrLpcReply = 17
    WrVirtualMemory = 18
    WrPageOut = 19
    WrRendezvous = 20
    WrKeyedEvent = 21
    WrTerminated = 22
    WrProcessInSwap = 23
    WrCpuRateControl = 24
    WrCalloutStack = 25
    WrKernel = 26
    WrResource = 27
    WrPushLock = 28
    WrMutex = 29
    WrQuantumEnd = 30
    WrDispatchInt = 31
    WrPreempted = 32
    WrYieldExecution = 33
    WrFastMutex = 34
    WrGuardedMutex = 35
    WrRundown = 36
    WrAlertByThreadId = 37
    WrDeferredPreempt = 38
    WrPhysicalFault = 39
    WrIoRing = 40
    WrMdlCache = 41
    MaximumWaitReason = 42
End Enum


[Description("⚠️ **WARNING:** If you want the Pointer union option under x64, use a IO_STATUS_BLOCK_Ptr struct and copy over this one.")]
Public Type IO_STATUS_BLOCK
    Status As Long
    Information As LongPtr
End Type
Public Type IO_STATUS_BLOCK_Ptr
    Pointer As LongPtr
    Information As LongPtr
End Type

Public Type IO_REMOVE_LOCK_COMMON_BLOCK
    Removed As Byte
    Reserved (2) As Byte
    IoCount As Long
    RemoveEvent As KEVENT
End Type

Public Type IO_REMOVE_LOCK
    Common As IO_REMOVE_LOCK_COMMON_BLOCK
End Type

Public Enum IrpFlags
    IRP_NOCACHE = &H1
    IRP_PAGING_IO = &H2
    IRP_MOUNT_COMPLETION = &H2
    IRP_SYNCHRONOUS_API = &H4
    IRP_ASSOCIATED_IRP = &H8
    IRP_BUFFERED_IO = &H10
    IRP_DEALLOCATE_BUFFER = &H20
    IRP_INPUT_OPERATION = &H40
    IRP_SYNCHRONOUS_PAGING_IO = &H40
    IRP_CREATE_OPERATION = &H80
    IRP_READ_OPERATION = &H100
    IRP_WRITE_OPERATION = &H200
    IRP_CLOSE_OPERATION = &H400
    IRP_DEFER_IO_COMPLETION = &H800
    IRP_OB_QUERY_NAME = &H1000
    IRP_HOLD_DEVICE_QUEUE = &H2000
'  Define I/O request packet (IRP) alternate flags for allocation control.
    IRP_QUOTA_CHARGED = &H1
    IRP_ALLOCATED_MUST_SUCCEED = &H2
    IRP_ALLOCATED_FIXED_SIZE = &H4
    IRP_LOOKASIDE_ALLOCATION = &H8
End Enum
Public Type IRP
    Type                As Integer
    Size                As Integer  '2
    MdlAddress          As LongPtr  '8
    Flags               As IrpFlags     '16
    [Description("This is the AssociatedIrp union. SystemBuffer makes it more clear for our purposes. Could also be (LONG)IrpCount or (PIRP)MasterIrp")]
    SystemBuffer        As LongPtr  '24   
    ThreadListEntry     As LIST_ENTRY '32
    IoStatus            As IO_STATUS_BLOCK '48
    RequestorMode       As Byte      '64
    PendingReturned     As Byte
    StackCount          As Byte
    CurrentLocation     As Byte
    Cancel              As Byte
    CancelIrql          As Byte
    ApcEnvironment      As Byte
    AllocationFlags     As Byte
    UserIosb            As LongPtr   '72
    UserEvent           As LongPtr   '80
    #If Win64 Then
    Overlay(15)         As Byte  '88
    #Else
    Overlay(7)          As Byte
    #End If
    CancelRoutine       As LongPtr   '104
    UserBuffer          As LongPtr   '112
    'Tail
    DriverContext(3)    As LongPtr   '120
    Thread              As LongPtr   '152
    AuxiliaryBuffer     As LongPtr   '160
    ListEntry           As LIST_ENTRY '168
    CurrentStackLocation As LongPtr  '184
    OriginalFileObject  As LongPtr    '192
    Pad                 As LongLong 'Tail union alternate _KAPC is 8 bytes larger on both x86 and x64
End Type 'Expected size (x64=0xD0) (x86=0x70)

'One must be *incredibly* careful about alignments. Because while unexpected issues are rare with 32bit,
'64bit will encounter a lot more issues. For instance with the below, tB inserts 4 bytes behind the 
'scenes so in IO_STACK_LOCATION, the first member of the union struct we're using is at 0x8; not 0x4.
'Always confirm final sizes (LenB *ONLY*! Len does not include align pads) with the following:
'https://www.vergiliusproject.com/kernels

Public Type DEVICEIOCTL       'Comments: x64 alignments
    OutputBufferLength  As Long  '0x8
    #If Win64 Then
    zPtrAlign2 As Long
    #End If
    InputBufferLength   As Long   '0x10
    #If Win64 Then
    zPtrAlign3 As Long
    #End If
    IoControlCode       As Long   '0x18
    Type3InputBuffer    As LongPtr '0x20
End Type

Public Const SL_PENDING_RETURNED  = &H01
Public Const SL_ERROR_RETURNED  = &H02
Public Const SL_INVOKE_ON_CANCEL  = &H20
Public Const SL_INVOKE_ON_SUCCESS  = &H40
Public Const SL_INVOKE_ON_ERROR  = &H80

Public Enum IoStackLocFlags
    SL_KEY_SPECIFIED = &H01
    SL_OVERRIDE_VERIFY_VOLUME = &H02
    SL_WRITE_THROUGH = &H04
    SL_FT_SEQUENTIAL_WRITE = &H08
    SL_FORCE_DIRECT_WRITE = &H10
    SL_REALTIME_STREAM = &H20  ' valid only with optical media
    SL_PERSISTENT_MEMORY_FIXED_MAPPING = &H20  ' valid only with persistent memory device and IRP_MJ_WRITE
    SL_BYPASS_IO = &H40
End Enum
Public Type IO_STACK_LOCATION
    MajorFunction       As Byte       '0x0
    MinorFunction       As Byte       '0x1
    /* [ TypeHint(IoStackLocFlags) ] */ Flags               As Byte       '0x2
    Control             As Byte       '0x3
    'There's a union here; the DeviceIoControl
    'struct is what we're interested in right now.
    'You may need multiple versions of this for other
    'uses until there's union support.
    DeviceIoControl     As DEVICEIOCTL '0x8
    DeviceObject        As LongPtr    '0x28
    FileObject          As LongPtr    '0x30
    CompletionRoutine   As LongPtr    '0x38
    Context             As LongPtr    '0x40
End Type 'Expected size (x64) = 0x48

Public Enum IO_TYPE
    IO_TYPE_ADAPTER = &H00000001
    IO_TYPE_CONTROLLER = &H00000002
    IO_TYPE_DEVICE = &H00000003
    IO_TYPE_DRIVER = &H00000004
    IO_TYPE_FILE = &H00000005
    IO_TYPE_IRP = &H00000006
    IO_TYPE_MASTER_ADAPTER = &H00000007
    IO_TYPE_OPEN_PACKET = &H00000008
    IO_TYPE_TIMER = &H00000009
    IO_TYPE_VPB = &H0000000a
    IO_TYPE_ERROR_LOG = &H0000000b
    IO_TYPE_ERROR_MESSAGE = &H0000000c
    IO_TYPE_DEVICE_OBJECT_EXTENSION = &H0000000d
    IO_TYPE_IORING = &H0000000e
End Enum

Public Enum DRIVER_OBJECT_FLAGS
    DRVO_UNLOAD_INVOKED = &H00000001
    DRVO_LEGACY_DRIVER = &H00000002
    DRVO_BUILTIN_DRIVER = &H00000004  ' Driver objects for Hal, PnP Mgr
    DRVO_REINIT_REGISTERED = &H00000008
    DRVO_INITIALIZED = &H00000010
    DRVO_BOOTREINIT_REGISTERED = &H00000020
    DRVO_LEGACY_RESOURCES = &H00000040
End Enum
Public Type DRIVER_OBJECT
    /* [ TypeHint(IO_TYPE) ] */ Type                As Integer
    Size                As Integer
    DeviceObject        As LongPtr
    Flags               As DRIVER_OBJECT_FLAGS
    DriverStart         As LongPtr
    DriverSize          As Long
    DriverSection       As LongPtr
    DriverExtension     As LongPtr 'PDRIVER_EXTENSION
    DriverName          As UNICODE_STRING
    HardwareDatabase    As LongPtr
    FastIoDispatch      As LongPtr
    DriverInit          As LongPtr
    DriverStartIo       As LongPtr
    DriverUnload        As LongPtr
    MajorFunction(IRP_MJ_MAXIMUM_FUNCTION)   As LongPtr
End Type 'Expected size x64=0x150, x86=0xa8

Public Type DRIVER_EXTENSION
    DriverObject As LongPtr
    AddDevice As LongPtr
    Count As Long
    ServiceKeyName As UNICODE_STRING
End Type

Public Enum DEVICE_OBJECT_FLAGS
    DO_UNLOAD_PENDING = &H00000001
    DO_VERIFY_VOLUME = &H00000002
    DO_BUFFERED_IO = &H00000004
    DO_EXCLUSIVE = &H00000008
    DO_DIRECT_IO = &H00000010
    DO_MAP_IO_BUFFER = &H00000020
    DO_DEVICE_HAS_NAME = &H00000040
    DO_DEVICE_INITIALIZING = &H00000080
    DO_SYSTEM_BOOT_PARTITION = &H00000100
    DO_LONG_TERM_REQUESTS = &H00000200
    DO_NEVER_LAST_DEVICE = &H00000400
    DO_SHUTDOWN_REGISTERED = &H00000800
    DO_BUS_ENUMERATED_DEVICE = &H00001000
    DO_POWER_PAGABLE = &H00002000
    DO_POWER_INRUSH = &H00004000
    DO_LOW_PRIORITY_FILESYSTEM = &H00010000
    DO_SUPPORTS_PERSISTENT_ACLS = &H00020000
    DO_SUPPORTS_TRANSACTIONS = &H00040000
    DO_FORCE_NEITHER_IO = &H00080000
    DO_VOLUME_DEVICE_OBJECT = &H00100000
    DO_SYSTEM_SYSTEM_PARTITION = &H00200000
    DO_SYSTEM_CRITICAL_PARTITION = &H00400000
    DO_DISALLOW_EXECUTE = &H00800000
    DO_DEVICE_TO_BE_RESET = &H04000000
    DO_DEVICE_IRP_REQUIRES_EXTENSION = &H08000000
    DO_DAX_VOLUME = &H10000000
    DO_BOOT_CRITICAL = &H20000000
End Enum
Public Enum FILE_DEVICE_CHARACTERISTICS
    FILE_REMOVABLE_MEDIA = &H00000001
    FILE_READ_ONLY_DEVICE = &H00000002
    FILE_FLOPPY_DISKETTE = &H00000004
    FILE_WRITE_ONCE_MEDIA = &H00000008
    FILE_REMOTE_DEVICE = &H00000010
    FILE_DEVICE_IS_MOUNTED = &H00000020
    FILE_VIRTUAL_VOLUME = &H00000040
    FILE_AUTOGENERATED_DEVICE_NAME = &H00000080
    FILE_DEVICE_SECURE_OPEN = &H00000100
    FILE_CHARACTERISTIC_PNP_DEVICE = &H00000800
    FILE_CHARACTERISTIC_TS_DEVICE = &H00001000
    FILE_CHARACTERISTIC_WEBDAV_DEVICE = &H00002000
    FILE_CHARACTERISTIC_CSV = &H00010000
    FILE_DEVICE_ALLOW_APPCONTAINER_TRAVERSAL = &H00020000
    FILE_PORTABLE_DEVICE = &H00040000
    FILE_REMOTE_DEVICE_VSMB = &H00080000
    FILE_DEVICE_REQUIRE_SECURITY_CHECK = &H00100000
End Enum
Public Type DEVICE_OBJECT
    Type                As Integer
    Size                As Integer
    ReferenceCount      As Long
    DriverObject        As LongPtr
    NextDevice          As LongPtr
    AttachedDevice      As LongPtr
    CurrentIrp          As LongPtr
    Timer               As LongPtr
    Flags               As DEVICE_OBJECT_FLAGS
    Characteristics     As FILE_DEVICE_CHARACTERISTICS
    Vpb                 As LongPtr
    DeviceExtension     As LongPtr
    DeviceType          As Long
    StackSize           As Byte
    #If Win64 Then
    Queue(71)           As Byte 'This includes alignment padding, so be careful if copying out.
    #Else
    Queue(39)           As Byte
    #End If
    AlignRequirement    As Long
    DeviceQueue         As KDEVICE_QUEUE
    Dpc                 As KDPC
    ActiveThreadCount   As Long
    SecurityDescriptor  As LongPtr
    DeviceLock          As KEVENT
    SectorSize          As Integer
    Spare1              As Integer
    DeviceObjExtension  As LongPtr
    Reserved            As LongPtr
End Type 'Expected size x64=0x150, x86=0xb8

Public Enum FILE_OBJECT_FLAGS
    FO_FILE_OPEN = &H00000001
    FO_SYNCHRONOUS_IO = &H00000002
    FO_ALERTABLE_IO = &H00000004
    FO_NO_INTERMEDIATE_BUFFERING = &H00000008
    FO_WRITE_THROUGH = &H00000010
    FO_SEQUENTIAL_ONLY = &H00000020
    FO_CACHE_SUPPORTED = &H00000040
    FO_NAMED_PIPE = &H00000080
    FO_STREAM_FILE = &H00000100
    FO_MAILSLOT = &H00000200
    FO_GENERATE_AUDIT_ON_CLOSE = &H00000400
    FO_QUEUE_IRP_TO_THREAD = FO_GENERATE_AUDIT_ON_CLOSE
    FO_DIRECT_DEVICE_OPEN = &H00000800
    FO_FILE_MODIFIED = &H00001000
    FO_FILE_SIZE_CHANGED = &H00002000
    FO_CLEANUP_COMPLETE = &H00004000
    FO_TEMPORARY_FILE = &H00008000&
    FO_DELETE_ON_CLOSE = &H00010000
    FO_OPENED_CASE_SENSITIVE = &H00020000
    FO_HANDLE_CREATED = &H00040000
    FO_FILE_FAST_IO_READ = &H00080000
    FO_RANDOM_ACCESS = &H00100000
    FO_FILE_OPEN_CANCELLED = &H00200000
    FO_VOLUME_OPEN = &H00400000
    FO_BYPASS_IO_ENABLED = &H00800000  'when set BYPASS IO is enabled on this handle
    FO_REMOTE_ORIGIN = &H01000000
    FO_DISALLOW_EXCLUSIVE = &H02000000
    FO_SKIP_COMPLETION_PORT = FO_DISALLOW_EXCLUSIVE
    FO_SKIP_SET_EVENT = &H04000000
    FO_SKIP_SET_FAST_IO = &H08000000
    FO_INDIRECT_WAIT_OBJECT = &H10000000
    FO_SECTION_MINSTORE_TREATMENT = &H20000000
End Enum
Public Type FILE_OBJECT
    Type                 As Integer
    Size                 As Integer
    DeviceObject         As LongPtr 'PDEVICE_OBJECT
    Vpb                  As LongPtr 'PVBP
    FsContext            As LongPtr
    FsContext2           As LongPtr
    SectionObjectPointer As LongPtr 'PSECTION_OBJECT_POINTERS
    PrivateCacheMap      As LongPtr
    FinalStatus          As NTSTATUS
    RelatedFileObject    As LongPtr
    LockOperation        As Byte
    DeletePending        As Byte
    ReadAccess           As Byte
    WriteAccess          As Byte
    DeleteAccess         As Byte
    SharedRead           As Byte
    SharedWrite          As Byte
    SharedDelete         As Byte
    Flags                As FILE_OBJECT_FLAGS
    FileName             As UNICODE_STRING
    CurrentByteOffset    As LARGE_INTEGER
    Waiters              As Long
    Busy                 As Long
    LastLock             As LongPtr
    Lock                 As KEVENT
    Event                As KEVENT
    CompletionContext    As LongPtr 'PIO_COMPLETION_CONTEXT
    IrpListLock          As LongPtr
    IrpList              As LIST_ENTRY
    FileObjectExtension  As LongPtr
End Type 'Expected size x64=0xD8, x86=0x80
Public Type SECTION_OBJECT_POINTERS
    DataSectionObject As LongPtr
    SharedCacheMap As LongPtr
    ImageSectionObject As LongPtr
End Type
Public Type IO_COMPLETION_CONTEXT
    Port As LongPtr
    Key As LongPtr
    ' Used to prevent the completion context IOCP from being removed or
    ' replaced when it's being used. Note that because this field is protected
    ' by a spin lock, for perf reasons this value is only updated in code
    ' paths that are not already protected by other mechanisms. For example,
    ' the IOCP removal/replacement code already fails if there are any IRPs
    ' queued to the file object, therefore this value does not need to be
    ' updated when completing an IRP that is queued to a file object. The
    ' initial value is 0.
    UsageCount As LongPtr
End Type
Public Enum VBP_FLAGS
    VPB_MOUNTED = &H0001
    VPB_LOCKED = &H0002
    VPB_PERSISTENT = &H0004
    VPB_REMOVE_PENDING = &H0008
    VPB_RAW_MOUNT = &H0010
    VPB_DIRECT_WRITES_ALLOWED = &H0020
    '(NTDDI_VERSION  = >= NTDDI_WIN10_CO)
'   When set, BypassIO is completly disabled on this volume meaning filter,
'   volume and storage stack components will see all read/write operations.
    VPB_FLAGS_BYPASSIO_BLOCKED = &H0040
'   Flag that this VPB is for a volume that is being dismounted.
'   (Note: this flag is likely temporary.)
    VPB_DISMOUNTING = &H0080
End Enum
Public Const MAXIMUM_VOLUME_LABEL_LENGTH = 32 * LenB(Of Integer)
Public Type VPB
    Type As Integer
    Size As Integer
    Flags As Integer
    VolumeLabelLength As Integer ' in bytes
    DeviceObject As LongPtr 'PDEVICE_OBJECT
    RealDevice As LongPtr 'PDEVICE_OBJECT
    SerialNumber As Long
    ReferenceCount As Long
    VolumeLabel(0 To ((MAXIMUM_VOLUME_LABEL_LENGTH / LenB(Of Integer)) - 1)) As Integer
End Type

Public Enum POOL_TYPE
    NonPagedPool = 0
    NonPagedPoolExecute = NonPagedPool
    PagedPool = 1
    NonPagedPoolMustSucceed = NonPagedPool + 2
    DontUseThisType = 2
    NonPagedPoolCacheAligned = NonPagedPool + 4
    PagedPoolCacheAligned = 3
    NonPagedPoolCacheAlignedMustS = NonPagedPool + 6
    MaxPoolType = 4
    NonPagedPoolBase = 0
    NonPagedPoolBaseMustSucceed = NonPagedPoolBase + 2
    NonPagedPoolBaseCacheAligned = NonPagedPoolBase + 4
    NonPagedPoolBaseCacheAlignedMustS = NonPagedPoolBase + 6
    NonPagedPoolSession = 32
    PagedPoolSession = NonPagedPoolSession + 1
    NonPagedPoolMustSucceedSession = PagedPoolSession + 1
    DontUseThisTypeSession = NonPagedPoolMustSucceedSession + 1
    NonPagedPoolCacheAlignedSession = DontUseThisTypeSession + 1
    PagedPoolCacheAlignedSession = NonPagedPoolCacheAlignedSession + 1
    NonPagedPoolCacheAlignedMustSSession = PagedPoolCacheAlignedSession + 1
    NonPagedPoolNx = 512
    NonPagedPoolNxCacheAligned = NonPagedPoolNx + 4
    NonPagedPoolSessionNx = NonPagedPoolNx + 32
End Enum

Public Enum KPROCESSOR_MODE
    KernelMode
    UserMode
    MaximumMode
End Enum

'IRQLs for KeGetCurrentIrql:
Public Enum KIRQL
    PASSIVE_LEVEL = 0
    LOW_LEVEL = 0
    APC_LEVEL = 1
    DISPATCH_LEVEL = 2
End Enum


Public Const IO_NO_INCREMENT        As Long = &H0

Public Const IRP_MJ_CREATE  = &H00
Public Const IRP_MJ_CREATE_NAMED_PIPE  = &H01
Public Const IRP_MJ_CLOSE  = &H02
Public Const IRP_MJ_READ  = &H03
Public Const IRP_MJ_WRITE  = &H04
Public Const IRP_MJ_QUERY_INFORMATION  = &H05
Public Const IRP_MJ_SET_INFORMATION  = &H06
Public Const IRP_MJ_QUERY_EA  = &H07
Public Const IRP_MJ_SET_EA  = &H08
Public Const IRP_MJ_FLUSH_BUFFERS  = &H09
Public Const IRP_MJ_QUERY_VOLUME_INFORMATION  = &H0a
Public Const IRP_MJ_SET_VOLUME_INFORMATION  = &H0b
Public Const IRP_MJ_DIRECTORY_CONTROL  = &H0c
Public Const IRP_MJ_FILE_SYSTEM_CONTROL  = &H0d
Public Const IRP_MJ_DEVICE_CONTROL  = &H0e
Public Const IRP_MJ_INTERNAL_DEVICE_CONTROL  = &H0f
Public Const IRP_MJ_SHUTDOWN  = &H10
Public Const IRP_MJ_LOCK_CONTROL  = &H11
Public Const IRP_MJ_CLEANUP  = &H12
Public Const IRP_MJ_CREATE_MAILSLOT  = &H13
Public Const IRP_MJ_QUERY_SECURITY  = &H14
Public Const IRP_MJ_SET_SECURITY  = &H15
Public Const IRP_MJ_POWER  = &H16
Public Const IRP_MJ_SYSTEM_CONTROL  = &H17
Public Const IRP_MJ_DEVICE_CHANGE  = &H18
Public Const IRP_MJ_QUERY_QUOTA  = &H19
Public Const IRP_MJ_SET_QUOTA  = &H1A
Public Const IRP_MJ_PNP  = &H1B

Public Const IRP_MJ_MAXIMUM_FUNCTION As Long = &H1B

Public Const IRP_MJ_SCSI  = IRP_MJ_INTERNAL_DEVICE_CONTROL

Public Const IRP_MN_SCSI_CLASS  = &H01

'PNP minor function codes.
Public Const IRP_MN_START_DEVICE  = &H00
Public Const IRP_MN_QUERY_REMOVE_DEVICE  = &H01
Public Const IRP_MN_REMOVE_DEVICE  = &H02
Public Const IRP_MN_CANCEL_REMOVE_DEVICE  = &H03
Public Const IRP_MN_STOP_DEVICE  = &H04
Public Const IRP_MN_QUERY_STOP_DEVICE  = &H05

Public Const IRP_MN_CANCEL_STOP_DEVICE  = &H06
Public Const IRP_MN_QUERY_DEVICE_RELATIONS  = &H07
Public Const IRP_MN_QUERY_INTERFACE  = &H08
Public Const IRP_MN_QUERY_CAPABILITIES  = &H09
Public Const IRP_MN_QUERY_RESOURCES  = &H0A
Public Const IRP_MN_QUERY_RESOURCE_REQUIREMENTS  = &H0B

Public Const IRP_MN_QUERY_DEVICE_TEXT  = &H0C
Public Const IRP_MN_FILTER_RESOURCE_REQUIREMENTS  = &H0D
Public Const IRP_MN_READ_CONFIG  = &H0F
Public Const IRP_MN_WRITE_CONFIG  = &H10
Public Const IRP_MN_EJECT  = &H11
Public Const IRP_MN_SET_LOCK  = &H12
Public Const IRP_MN_QUERY_ID  = &H13
Public Const IRP_MN_QUERY_PNP_DEVICE_STATE  = &H14
Public Const IRP_MN_QUERY_BUS_INFORMATION  = &H15
Public Const IRP_MN_DEVICE_USAGE_NOTIFICATION  = &H16
Public Const IRP_MN_SURPRISE_REMOVAL  = &H17

Public Const IRP_MN_DEVICE_ENUMERATED  = &H19

'POWER minor function codes
Public Const IRP_MN_WAIT_WAKE  = &H00
Public Const IRP_MN_POWER_SEQUENCE  = &H01
Public Const IRP_MN_SET_POWER  = &H02
Public Const IRP_MN_QUERY_POWER  = &H03

'WMI minor function codes under IRP_MJ_SYSTEM_CONTROL
Public Const IRP_MN_QUERY_ALL_DATA  = &H00
Public Const IRP_MN_QUERY_SINGLE_INSTANCE  = &H01
Public Const IRP_MN_CHANGE_SINGLE_INSTANCE  = &H02
Public Const IRP_MN_CHANGE_SINGLE_ITEM  = &H03
Public Const IRP_MN_ENABLE_EVENTS  = &H04
Public Const IRP_MN_DISABLE_EVENTS  = &H05
Public Const IRP_MN_ENABLE_COLLECTION  = &H06
Public Const IRP_MN_DISABLE_COLLECTION  = &H07
Public Const IRP_MN_REGINFO  = &H08
Public Const IRP_MN_EXECUTE_METHOD  = &H09
'  Minor code 0x0a is reserved
Public Const IRP_MN_REGINFO_EX  = &H0b

Public Const RTL_REGISTRY_ABSOLUTE  = 0  ' Path is a full path
Public Const RTL_REGISTRY_SERVICES  = 1  ' \Registry\Machine\System\CurrentControlSet\Services
Public Const RTL_REGISTRY_CONTROL  = 2  ' \Registry\Machine\System\CurrentControlSet\Control
Public Const RTL_REGISTRY_WINDOWS_NT  = 3  ' \Registry\Machine\Software\Microsoft\Windows NT\CurrentVersion
Public Const RTL_REGISTRY_DEVICEMAP  = 4  ' \Registry\Machine\Hardware\DeviceMap
Public Const RTL_REGISTRY_USER  = 5  ' \Registry\User\CurrentUser
Public Const RTL_REGISTRY_MAXIMUM  = 6
Public Const RTL_REGISTRY_HANDLE  = &H40000000  ' Low order bits are registry handle
Public Const RTL_REGISTRY_OPTIONAL  = &H80000000  ' Indicates the key node is optional

Public Const RTL_QUERY_REGISTRY_SUBKEY  = &H00000001    ' Name is a subkey and remainder of
                                                        '  table or until next subkey are value
                                                        '  names for that subkey to look at.
Public Const RTL_QUERY_REGISTRY_TOPKEY  = &H00000002    ' Reset current key to original key for
                                                        '  this and all following table entries.
Public Const RTL_QUERY_REGISTRY_REQUIRED  = &H00000004  ' Fail if no match found for this table
                                                        '  entry.
Public Const RTL_QUERY_REGISTRY_NOVALUE  = &H00000008   ' Used to mark a table entry that has no
                                                        '  value name, just wants a call out, not
                                                        '  an enumeration of all values.
Public Const RTL_QUERY_REGISTRY_NOEXPAND  = &H00000010  ' Used to suppress the expansion of
                                                        '  REG_MULTI_SZ into multiple callouts or
                                                        '  to prevent the expansion of environment
                                                        '  variable values in REG_EXPAND_SZ
Public Const RTL_QUERY_REGISTRY_DIRECT  = &H00000020    ' QueryRoutine field ignored.  EntryContext
                                                        '  field points to location to store value.
                                                        '  For null terminated strings, EntryContext
                                                        '  points to UNICODE_STRING structure that
                                                        '  that describes maximum size of buffer.
                                                        '  If .Buffer field is NULL then a buffer is
                                                        '  allocated.
Public Const RTL_QUERY_REGISTRY_DELETE  = &H00000040    ' Used to delete value keys after they
                                                        '  are queried.
Public Const RTL_QUERY_REGISTRY_NOSTRING  = &H00000080  ' THIS IS DEPRECATED - use RTL_QUERY_REGISTRY_TYPECHECK
                                                        '  Used with RTL_QUERY_REGISTRY_DIRECT in
                                                        '  cases where the caller expects a
                                                        '  non-string value.  Otherwise, the
                                                        '  assumption that EntryContext points to
                                                        '  a UNICODE_STRING structure can overrun
                                                        '  the caller's buffer.
Public Const RTL_QUERY_REGISTRY_TYPECHECK  = &H00000100 ' Used with RTL_QUERY_REGISTRY_DIRECT to
                                                        '  validate the registry value type
                                                        '  expected by caller with actual type thats
                                                        '  read from the registry.
                                                        '  Use the most significant byte of DefaultType from QueryTable, as the
                                                        '  caller's expected REG_TYPE
Public Const RTL_QUERY_REGISTRY_TYPECHECK_SHIFT  = 24
Public Const RTL_QUERY_REGISTRY_TYPECHECK_MASK  = (&Hff << RTL_QUERY_REGISTRY_TYPECHECK_SHIFT)




Public Type RTL_QUERY_REGISTRY_TABLE
    QueryRoutine As LongPtr
    Flags As Long
    Name As LongPtr
    EntryContext As LongPtr
    DefaultType As Long
    DefaultData As LongPtr
    DefaultLength As Long
End Type

Public Enum NTSTATUS
    STATUS_SUCCESS = &H00000000
    STATUS_WAIT_0 = &H00000000
    STATUS_WAIT_1 = &H00000001
    STATUS_WAIT_2 = &H00000002
    STATUS_WAIT_3 = &H00000003
    STATUS_WAIT_63 = &H0000003F
    STATUS_ABANDONED = &H00000080
    STATUS_ABANDONED_WAIT_0 = &H00000080
    STATUS_ABANDONED_WAIT_63 = &H000000BF
    STATUS_USER_APC = &H000000C0
    STATUS_ALREADY_COMPLETE = &H000000FF
    STATUS_KERNEL_APC = &H00000100
    STATUS_ALERTED = &H00000101
    STATUS_TIMEOUT = &H00000102
    STATUS_PENDING = &H00000103
    STATUS_REPARSE = &H00000104
    STATUS_MORE_ENTRIES = &H00000105
    STATUS_NOT_ALL_ASSIGNED = &H00000106
    STATUS_SOME_NOT_MAPPED = &H00000107
    STATUS_OPLOCK_BREAK_IN_PROGRESS = &H00000108
    STATUS_VOLUME_MOUNTED = &H00000109
    STATUS_RXACT_COMMITTED = &H0000010A
    STATUS_NOTIFY_CLEANUP = &H0000010B
    STATUS_NOTIFY_ENUM_DIR = &H0000010C
    STATUS_NO_QUOTAS_FOR_ACCOUNT = &H0000010D
    STATUS_PRIMARY_TRANSPORT_CONNECT_FAILED = &H0000010E
    STATUS_PAGE_FAULT_TRANSITION = &H00000110
    STATUS_PAGE_FAULT_DEMAND_ZERO = &H00000111
    STATUS_PAGE_FAULT_COPY_ON_WRITE = &H00000112
    STATUS_PAGE_FAULT_GUARD_PAGE = &H00000113
    STATUS_PAGE_FAULT_PAGING_FILE = &H00000114
    STATUS_CACHE_PAGE_LOCKED = &H00000115
    STATUS_CRASH_DUMP = &H00000116
    STATUS_BUFFER_ALL_ZEROS = &H00000117
    STATUS_REPARSE_OBJECT = &H00000118
    STATUS_RESOURCE_REQUIREMENTS_CHANGED = &H00000119
    STATUS_TRANSLATION_COMPLETE = &H00000120
    STATUS_DS_MEMBERSHIP_EVALUATED_LOCALLY = &H00000121
    STATUS_NOTHING_TO_TERMINATE = &H00000122
    STATUS_PROCESS_NOT_IN_JOB = &H00000123
    STATUS_PROCESS_IN_JOB = &H00000124
    STATUS_VOLSNAP_HIBERNATE_READY = &H00000125
    STATUS_FSFILTER_OP_COMPLETED_SUCCESSFULLY = &H00000126
    STATUS_INTERRUPT_VECTOR_ALREADY_CONNECTED = &H00000127
    STATUS_INTERRUPT_STILL_CONNECTED = &H00000128
    STATUS_PROCESS_CLONED = &H00000129
    STATUS_FILE_LOCKED_WITH_ONLY_READERS = &H0000012A
    STATUS_FILE_LOCKED_WITH_WRITERS = &H0000012B
    STATUS_VALID_IMAGE_HASH = &H0000012C
    STATUS_VALID_CATALOG_HASH = &H0000012D
    STATUS_VALID_STRONG_CODE_HASH = &H0000012E
    STATUS_GHOSTED = &H0000012F
    STATUS_DATA_OVERWRITTEN = &H00000130
    STATUS_RESOURCEMANAGER_READ_ONLY = &H00000202
    STATUS_RING_PREVIOUSLY_EMPTY = &H00000210
    STATUS_RING_PREVIOUSLY_FULL = &H00000211
    STATUS_RING_PREVIOUSLY_ABOVE_QUOTA = &H00000212
    STATUS_RING_NEWLY_EMPTY = &H00000213
    STATUS_RING_SIGNAL_OPPOSITE_ENDPOINT = &H00000214
    STATUS_OPLOCK_SWITCHED_TO_NEW_HANDLE = &H00000215
    STATUS_OPLOCK_HANDLE_CLOSED = &H00000216
    STATUS_WAIT_FOR_OPLOCK = &H00000367
    STATUS_REPARSE_GLOBAL = &H00000368
    STATUS_PAGE_FAULT_RETRY = &H00000369
    STATUS_FLT_IO_COMPLETE = &H001C0001
    STATUS_OBJECT_NAME_EXISTS = &H40000000
    STATUS_THREAD_WAS_SUSPENDED = &H40000001
    STATUS_WORKING_SET_LIMIT_RANGE = &H40000002
    STATUS_IMAGE_NOT_AT_BASE = &H40000003
    STATUS_RXACT_STATE_CREATED = &H40000004
    STATUS_SEGMENT_NOTIFICATION = &H40000005
    STATUS_LOCAL_USER_SESSION_KEY = &H40000006
    STATUS_BAD_CURRENT_DIRECTORY = &H40000007
    STATUS_SERIAL_MORE_WRITES = &H40000008
    STATUS_REGISTRY_RECOVERED = &H40000009
    STATUS_FT_READ_RECOVERY_FROM_BACKUP = &H4000000A
    STATUS_FT_WRITE_RECOVERY = &H4000000B
    STATUS_SERIAL_COUNTER_TIMEOUT = &H4000000C
    STATUS_NULL_LM_PASSWORD = &H4000000D
    STATUS_IMAGE_MACHINE_TYPE_MISMATCH = &H4000000E
    STATUS_RECEIVE_PARTIAL = &H4000000F
    STATUS_RECEIVE_EXPEDITED = &H40000010
    STATUS_RECEIVE_PARTIAL_EXPEDITED = &H40000011
    STATUS_EVENT_DONE = &H40000012
    STATUS_EVENT_PENDING = &H40000013
    STATUS_CHECKING_FILE_SYSTEM = &H40000014
    STATUS_FATAL_APP_EXIT = &H40000015
    STATUS_PREDEFINED_HANDLE = &H40000016
    STATUS_WAS_UNLOCKED = &H40000017
    STATUS_SERVICE_NOTIFICATION = &H40000018
    STATUS_WAS_LOCKED = &H40000019
    STATUS_LOG_HARD_ERROR = &H4000001A
    STATUS_ALREADY_WIN32 = &H4000001B
    STATUS_WX86_UNSIMULATE = &H4000001C
    STATUS_WX86_CONTINUE = &H4000001D
    STATUS_WX86_SINGLE_STEP = &H4000001E
    STATUS_WX86_BREAKPOINT = &H4000001F
    STATUS_WX86_EXCEPTION_CONTINUE = &H40000020
    STATUS_WX86_EXCEPTION_LASTCHANCE = &H40000021
    STATUS_WX86_EXCEPTION_CHAIN = &H40000022
    STATUS_IMAGE_MACHINE_TYPE_MISMATCH_EXE = &H40000023
    STATUS_NO_YIELD_PERFORMED = &H40000024
    STATUS_TIMER_RESUME_IGNORED = &H40000025
    STATUS_ARBITRATION_UNHANDLED = &H40000026
    STATUS_CARDBUS_NOT_SUPPORTED = &H40000027
    STATUS_WX86_CREATEWX86TIB = &H40000028
    STATUS_MP_PROCESSOR_MISMATCH = &H40000029
    STATUS_HIBERNATED = &H4000002A
    STATUS_RESUME_HIBERNATION = &H4000002B
    STATUS_FIRMWARE_UPDATED = &H4000002C
    STATUS_DRIVERS_LEAKING_LOCKED_PAGES = &H4000002D
    STATUS_MESSAGE_RETRIEVED = &H4000002E
    STATUS_SYSTEM_POWERSTATE_TRANSITION = &H4000002F
    STATUS_ALPC_CHECK_COMPLETION_LIST = &H40000030
    STATUS_SYSTEM_POWERSTATE_COMPLEX_TRANSITION = &H40000031
    STATUS_ACCESS_AUDIT_BY_POLICY = &H40000032
    STATUS_ABANDON_HIBERFILE = &H40000033
    STATUS_BIZRULES_NOT_ENABLED = &H40000034
    STATUS_FT_READ_FROM_COPY = &H40000035
    STATUS_IMAGE_AT_DIFFERENT_BASE = &H40000036
    STATUS_PATCH_DEFERRED = &H40000037
    STATUS_EMULATION_BREAKPOINT = &H40000038
    STATUS_EMULATION_SYSCALL = &H40000039
    STATUS_HEURISTIC_DAMAGE_POSSIBLE = &H40190001
    STATUS_GUARD_PAGE_VIOLATION = &H80000001
    STATUS_DATATYPE_MISALIGNMENT = &H80000002
    STATUS_BREAKPOINT = &H80000003
    STATUS_SINGLE_STEP = &H80000004
    STATUS_BUFFER_OVERFLOW = &H80000005
    STATUS_NO_MORE_FILES = &H80000006
    STATUS_WAKE_SYSTEM_DEBUGGER = &H80000007
    STATUS_HANDLES_CLOSED = &H8000000A
    STATUS_NO_INHERITANCE = &H8000000B
    STATUS_GUID_SUBSTITUTION_MADE = &H8000000C
    STATUS_PARTIAL_COPY = &H8000000D
    STATUS_DEVICE_PAPER_EMPTY = &H8000000E
    STATUS_DEVICE_POWERED_OFF = &H8000000F
    STATUS_DEVICE_OFF_LINE = &H80000010
    STATUS_DEVICE_BUSY = &H80000011
    STATUS_NO_MORE_EAS = &H80000012
    STATUS_INVALID_EA_NAME = &H80000013
    STATUS_EA_LIST_INCONSISTENT = &H80000014
    STATUS_INVALID_EA_FLAG = &H80000015
    STATUS_VERIFY_REQUIRED = &H80000016
    STATUS_EXTRANEOUS_INFORMATION = &H80000017
    STATUS_RXACT_COMMIT_NECESSARY = &H80000018
    STATUS_NO_MORE_ENTRIES = &H8000001A
    STATUS_FILEMARK_DETECTED = &H8000001B
    STATUS_MEDIA_CHANGED = &H8000001C
    STATUS_BUS_RESET = &H8000001D
    STATUS_END_OF_MEDIA = &H8000001E
    STATUS_BEGINNING_OF_MEDIA = &H8000001F
    STATUS_MEDIA_CHECK = &H80000020
    STATUS_SETMARK_DETECTED = &H80000021
    STATUS_NO_DATA_DETECTED = &H80000022
    STATUS_REDIRECTOR_HAS_OPEN_HANDLES = &H80000023
    STATUS_SERVER_HAS_OPEN_HANDLES = &H80000024
    STATUS_ALREADY_DISCONNECTED = &H80000025
    STATUS_LONGJUMP = &H80000026
    STATUS_CLEANER_CARTRIDGE_INSTALLED = &H80000027
    STATUS_PLUGPLAY_QUERY_VETOED = &H80000028
    STATUS_UNWIND_CONSOLIDATE = &H80000029
    STATUS_REGISTRY_HIVE_RECOVERED = &H8000002A
    STATUS_DLL_MIGHT_BE_INSECURE = &H8000002B
    STATUS_DLL_MIGHT_BE_INCOMPATIBLE = &H8000002C
    STATUS_STOPPED_ON_SYMLINK = &H8000002D
    STATUS_CANNOT_GRANT_REQUESTED_OPLOCK = &H8000002E
    STATUS_NO_ACE_CONDITION = &H8000002F
    STATUS_DEVICE_SUPPORT_IN_PROGRESS = &H80000030
    STATUS_DEVICE_POWER_CYCLE_REQUIRED = &H80000031
    STATUS_NO_WORK_DONE = &H80000032
    STATUS_RETURN_ADDRESS_HIJACK_ATTEMPT = &H80000033
    STATUS_RECOVERABLE_BUGCHECK = &H80000034
    STATUS_CLUSTER_NODE_ALREADY_UP = &H80130001
    STATUS_CLUSTER_NODE_ALREADY_DOWN = &H80130002
    STATUS_CLUSTER_NETWORK_ALREADY_ONLINE = &H80130003
    STATUS_CLUSTER_NETWORK_ALREADY_OFFLINE = &H80130004
    STATUS_CLUSTER_NODE_ALREADY_MEMBER = &H80130005
    STATUS_FLT_BUFFER_TOO_SMALL = &H801C0001
    STATUS_GRAPHICS_LINK_CONFIGURATION_IN_PROGRESS = &H801E0000
    STATUS_FVE_PARTIAL_METADATA = &H80210001
    STATUS_FVE_TRANSIENT_STATE = &H80210002
    STATUS_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH = &H8000CF00
    STATUS_UNSUCCESSFUL = &HC0000001
    STATUS_NOT_IMPLEMENTED = &HC0000002
    STATUS_INVALID_INFO_CLASS = &HC0000003
    STATUS_INFO_LENGTH_MISMATCH = &HC0000004
    STATUS_ACCESS_VIOLATION = &HC0000005
    STATUS_IN_PAGE_ERROR = &HC0000006
    STATUS_PAGEFILE_QUOTA = &HC0000007
    STATUS_INVALID_HANDLE = &HC0000008
    STATUS_BAD_INITIAL_STACK = &HC0000009
    STATUS_BAD_INITIAL_PC = &HC000000A
    STATUS_INVALID_CID = &HC000000B
    STATUS_TIMER_NOT_CANCELED = &HC000000C
    STATUS_INVALID_PARAMETER = &HC000000D
    STATUS_NO_SUCH_DEVICE = &HC000000E
    STATUS_NO_SUCH_FILE = &HC000000F
    STATUS_INVALID_DEVICE_REQUEST = &HC0000010
    STATUS_END_OF_FILE = &HC0000011
    STATUS_WRONG_VOLUME = &HC0000012
    STATUS_NO_MEDIA_IN_DEVICE = &HC0000013
    STATUS_UNRECOGNIZED_MEDIA = &HC0000014
    STATUS_NONEXISTENT_SECTOR = &HC0000015
    STATUS_MORE_PROCESSING_REQUIRED = &HC0000016
    STATUS_NO_MEMORY = &HC0000017
    STATUS_CONFLICTING_ADDRESSES = &HC0000018
    STATUS_NOT_MAPPED_VIEW = &HC0000019
    STATUS_UNABLE_TO_FREE_VM = &HC000001A
    STATUS_UNABLE_TO_DELETE_SECTION = &HC000001B
    STATUS_INVALID_SYSTEM_SERVICE = &HC000001C
    STATUS_ILLEGAL_INSTRUCTION = &HC000001D
    STATUS_INVALID_LOCK_SEQUENCE = &HC000001E
    STATUS_INVALID_VIEW_SIZE = &HC000001F
    STATUS_INVALID_FILE_FOR_SECTION = &HC0000020
    STATUS_ALREADY_COMMITTED = &HC0000021
    STATUS_ACCESS_DENIED = &HC0000022
    STATUS_BUFFER_TOO_SMALL = &HC0000023
    STATUS_OBJECT_TYPE_MISMATCH = &HC0000024
    STATUS_NONCONTINUABLE_EXCEPTION = &HC0000025
    STATUS_INVALID_DISPOSITION = &HC0000026
    STATUS_UNWIND = &HC0000027
    STATUS_BAD_STACK = &HC0000028
    STATUS_INVALID_UNWIND_TARGET = &HC0000029
    STATUS_NOT_LOCKED = &HC000002A
    STATUS_PARITY_ERROR = &HC000002B
    STATUS_UNABLE_TO_DECOMMIT_VM = &HC000002C
    STATUS_NOT_COMMITTED = &HC000002D
    STATUS_INVALID_PORT_ATTRIBUTES = &HC000002E
    STATUS_PORT_MESSAGE_TOO_LONG = &HC000002F
    STATUS_INVALID_PARAMETER_MIX = &HC0000030
    STATUS_INVALID_QUOTA_LOWER = &HC0000031
    STATUS_DISK_CORRUPT_ERROR = &HC0000032
    STATUS_OBJECT_NAME_INVALID = &HC0000033
    STATUS_OBJECT_NAME_NOT_FOUND = &HC0000034
    STATUS_OBJECT_NAME_COLLISION = &HC0000035
    STATUS_HANDLE_NOT_WAITABLE = &HC0000036
    STATUS_PORT_DISCONNECTED = &HC0000037
    STATUS_DEVICE_ALREADY_ATTACHED = &HC0000038
    STATUS_OBJECT_PATH_INVALID = &HC0000039
    STATUS_OBJECT_PATH_NOT_FOUND = &HC000003A
    STATUS_OBJECT_PATH_SYNTAX_BAD = &HC000003B
    STATUS_DATA_OVERRUN = &HC000003C
    STATUS_DATA_LATE_ERROR = &HC000003D
    STATUS_DATA_ERROR = &HC000003E
    STATUS_CRC_ERROR = &HC000003F
    STATUS_SECTION_TOO_BIG = &HC0000040
    STATUS_PORT_CONNECTION_REFUSED = &HC0000041
    STATUS_INVALID_PORT_HANDLE = &HC0000042
    STATUS_SHARING_VIOLATION = &HC0000043
    STATUS_QUOTA_EXCEEDED = &HC0000044
    STATUS_INVALID_PAGE_PROTECTION = &HC0000045
    STATUS_MUTANT_NOT_OWNED = &HC0000046
    STATUS_SEMAPHORE_LIMIT_EXCEEDED = &HC0000047
    STATUS_PORT_ALREADY_SET = &HC0000048
    STATUS_SECTION_NOT_IMAGE = &HC0000049
    STATUS_SUSPEND_COUNT_EXCEEDED = &HC000004A
    STATUS_THREAD_IS_TERMINATING = &HC000004B
    STATUS_BAD_WORKING_SET_LIMIT = &HC000004C
    STATUS_INCOMPATIBLE_FILE_MAP = &HC000004D
    STATUS_SECTION_PROTECTION = &HC000004E
    STATUS_EAS_NOT_SUPPORTED = &HC000004F
    STATUS_EA_TOO_LARGE = &HC0000050
    STATUS_NONEXISTENT_EA_ENTRY = &HC0000051
    STATUS_NO_EAS_ON_FILE = &HC0000052
    STATUS_EA_CORRUPT_ERROR = &HC0000053
    STATUS_FILE_LOCK_CONFLICT = &HC0000054
    STATUS_LOCK_NOT_GRANTED = &HC0000055
    STATUS_DELETE_PENDING = &HC0000056
    STATUS_CTL_FILE_NOT_SUPPORTED = &HC0000057
    STATUS_UNKNOWN_REVISION = &HC0000058
    STATUS_REVISION_MISMATCH = &HC0000059
    STATUS_INVALID_OWNER = &HC000005A
    STATUS_INVALID_PRIMARY_GROUP = &HC000005B
    STATUS_NO_IMPERSONATION_TOKEN = &HC000005C
    STATUS_CANT_DISABLE_MANDATORY = &HC000005D
    STATUS_NO_LOGON_SERVERS = &HC000005E
    STATUS_NO_SUCH_LOGON_SESSION = &HC000005F
    STATUS_NO_SUCH_PRIVILEGE = &HC0000060
    STATUS_PRIVILEGE_NOT_HELD = &HC0000061
    STATUS_INVALID_ACCOUNT_NAME = &HC0000062
    STATUS_USER_EXISTS = &HC0000063
    STATUS_NO_SUCH_USER = &HC0000064
    STATUS_GROUP_EXISTS = &HC0000065
    STATUS_NO_SUCH_GROUP = &HC0000066
    STATUS_MEMBER_IN_GROUP = &HC0000067
    STATUS_MEMBER_NOT_IN_GROUP = &HC0000068
    STATUS_LAST_ADMIN = &HC0000069
    STATUS_WRONG_PASSWORD = &HC000006A
    STATUS_ILL_FORMED_PASSWORD = &HC000006B
    STATUS_PASSWORD_RESTRICTION = &HC000006C
    STATUS_LOGON_FAILURE = &HC000006D
    STATUS_ACCOUNT_RESTRICTION = &HC000006E
    STATUS_INVALID_LOGON_HOURS = &HC000006F
    STATUS_INVALID_WORKSTATION = &HC0000070
    STATUS_PASSWORD_EXPIRED = &HC0000071
    STATUS_ACCOUNT_DISABLED = &HC0000072
    STATUS_NONE_MAPPED = &HC0000073
    STATUS_TOO_MANY_LUIDS_REQUESTED = &HC0000074
    STATUS_LUIDS_EXHAUSTED = &HC0000075
    STATUS_INVALID_SUB_AUTHORITY = &HC0000076
    STATUS_INVALID_ACL = &HC0000077
    STATUS_INVALID_SID = &HC0000078
    STATUS_INVALID_SECURITY_DESCR = &HC0000079
    STATUS_PROCEDURE_NOT_FOUND = &HC000007A
    STATUS_INVALID_IMAGE_FORMAT = &HC000007B
    STATUS_NO_TOKEN = &HC000007C
    STATUS_BAD_INHERITANCE_ACL = &HC000007D
    STATUS_RANGE_NOT_LOCKED = &HC000007E
    STATUS_DISK_FULL = &HC000007F
    STATUS_SERVER_DISABLED = &HC0000080
    STATUS_SERVER_NOT_DISABLED = &HC0000081
    STATUS_TOO_MANY_GUIDS_REQUESTED = &HC0000082
    STATUS_GUIDS_EXHAUSTED = &HC0000083
    STATUS_INVALID_ID_AUTHORITY = &HC0000084
    STATUS_AGENTS_EXHAUSTED = &HC0000085
    STATUS_INVALID_VOLUME_LABEL = &HC0000086
    STATUS_SECTION_NOT_EXTENDED = &HC0000087
    STATUS_NOT_MAPPED_DATA = &HC0000088
    STATUS_RESOURCE_DATA_NOT_FOUND = &HC0000089
    STATUS_RESOURCE_TYPE_NOT_FOUND = &HC000008A
    STATUS_RESOURCE_NAME_NOT_FOUND = &HC000008B
    STATUS_ARRAY_BOUNDS_EXCEEDED = &HC000008C
    STATUS_FLOAT_DENORMAL_OPERAND = &HC000008D
    STATUS_FLOAT_DIVIDE_BY_ZERO = &HC000008E
    STATUS_FLOAT_INEXACT_RESULT = &HC000008F
    STATUS_FLOAT_INVALID_OPERATION = &HC0000090
    STATUS_FLOAT_OVERFLOW = &HC0000091
    STATUS_FLOAT_STACK_CHECK = &HC0000092
    STATUS_FLOAT_UNDERFLOW = &HC0000093
    STATUS_INTEGER_DIVIDE_BY_ZERO = &HC0000094
    STATUS_INTEGER_OVERFLOW = &HC0000095
    STATUS_PRIVILEGED_INSTRUCTION = &HC0000096
    STATUS_TOO_MANY_PAGING_FILES = &HC0000097
    STATUS_FILE_INVALID = &HC0000098
    STATUS_ALLOTTED_SPACE_EXCEEDED = &HC0000099
    STATUS_INSUFFICIENT_RESOURCES = &HC000009A
    STATUS_DFS_EXIT_PATH_FOUND = &HC000009B
    STATUS_DEVICE_DATA_ERROR = &HC000009C
    STATUS_DEVICE_NOT_CONNECTED = &HC000009D
    STATUS_DEVICE_POWER_FAILURE = &HC000009E
    STATUS_FREE_VM_NOT_AT_BASE = &HC000009F
    STATUS_MEMORY_NOT_ALLOCATED = &HC00000A0
    STATUS_WORKING_SET_QUOTA = &HC00000A1
    STATUS_MEDIA_WRITE_PROTECTED = &HC00000A2
    STATUS_DEVICE_NOT_READY = &HC00000A3
    STATUS_INVALID_GROUP_ATTRIBUTES = &HC00000A4
    STATUS_BAD_IMPERSONATION_LEVEL = &HC00000A5
    STATUS_CANT_OPEN_ANONYMOUS = &HC00000A6
    STATUS_BAD_VALIDATION_CLASS = &HC00000A7
    STATUS_BAD_TOKEN_TYPE = &HC00000A8
    STATUS_BAD_MASTER_BOOT_RECORD = &HC00000A9
    STATUS_INSTRUCTION_MISALIGNMENT = &HC00000AA
    STATUS_INSTANCE_NOT_AVAILABLE = &HC00000AB
    STATUS_PIPE_NOT_AVAILABLE = &HC00000AC
    STATUS_INVALID_PIPE_STATE = &HC00000AD
    STATUS_PIPE_BUSY = &HC00000AE
    STATUS_ILLEGAL_FUNCTION = &HC00000AF
    STATUS_PIPE_DISCONNECTED = &HC00000B0
    STATUS_PIPE_CLOSING = &HC00000B1
    STATUS_PIPE_CONNECTED = &HC00000B2
    STATUS_PIPE_LISTENING = &HC00000B3
    STATUS_INVALID_READ_MODE = &HC00000B4
    STATUS_IO_TIMEOUT = &HC00000B5
    STATUS_FILE_FORCED_CLOSED = &HC00000B6
    STATUS_PROFILING_NOT_STARTED = &HC00000B7
    STATUS_PROFILING_NOT_STOPPED = &HC00000B8
    STATUS_COULD_NOT_INTERPRET = &HC00000B9
    STATUS_FILE_IS_A_DIRECTORY = &HC00000BA
    STATUS_NOT_SUPPORTED = &HC00000BB
    STATUS_REMOTE_NOT_LISTENING = &HC00000BC
    STATUS_DUPLICATE_NAME = &HC00000BD
    STATUS_BAD_NETWORK_PATH = &HC00000BE
    STATUS_NETWORK_BUSY = &HC00000BF
    STATUS_DEVICE_DOES_NOT_EXIST = &HC00000C0
    STATUS_TOO_MANY_COMMANDS = &HC00000C1
    STATUS_ADAPTER_HARDWARE_ERROR = &HC00000C2
    STATUS_INVALID_NETWORK_RESPONSE = &HC00000C3
    STATUS_UNEXPECTED_NETWORK_ERROR = &HC00000C4
    STATUS_BAD_REMOTE_ADAPTER = &HC00000C5
    STATUS_PRINT_QUEUE_FULL = &HC00000C6
    STATUS_NO_SPOOL_SPACE = &HC00000C7
    STATUS_PRINT_CANCELLED = &HC00000C8
    STATUS_NETWORK_NAME_DELETED = &HC00000C9
    STATUS_NETWORK_ACCESS_DENIED = &HC00000CA
    STATUS_BAD_DEVICE_TYPE = &HC00000CB
    STATUS_BAD_NETWORK_NAME = &HC00000CC
    STATUS_TOO_MANY_NAMES = &HC00000CD
    STATUS_TOO_MANY_SESSIONS = &HC00000CE
    STATUS_SHARING_PAUSED = &HC00000CF
    STATUS_REQUEST_NOT_ACCEPTED = &HC00000D0
    STATUS_REDIRECTOR_PAUSED = &HC00000D1
    STATUS_NET_WRITE_FAULT = &HC00000D2
    STATUS_PROFILING_AT_LIMIT = &HC00000D3
    STATUS_NOT_SAME_DEVICE = &HC00000D4
    STATUS_FILE_RENAMED = &HC00000D5
    STATUS_VIRTUAL_CIRCUIT_CLOSED = &HC00000D6
    STATUS_NO_SECURITY_ON_OBJECT = &HC00000D7
    STATUS_CANT_WAIT = &HC00000D8
    STATUS_PIPE_EMPTY = &HC00000D9
    STATUS_CANT_ACCESS_DOMAIN_INFO = &HC00000DA
    STATUS_CANT_TERMINATE_SELF = &HC00000DB
    STATUS_INVALID_SERVER_STATE = &HC00000DC
    STATUS_INVALID_DOMAIN_STATE = &HC00000DD
    STATUS_INVALID_DOMAIN_ROLE = &HC00000DE
    STATUS_NO_SUCH_DOMAIN = &HC00000DF
    STATUS_DOMAIN_EXISTS = &HC00000E0
    STATUS_DOMAIN_LIMIT_EXCEEDED = &HC00000E1
    STATUS_OPLOCK_NOT_GRANTED = &HC00000E2
    STATUS_INVALID_OPLOCK_PROTOCOL = &HC00000E3
    STATUS_INTERNAL_DB_CORRUPTION = &HC00000E4
    STATUS_INTERNAL_ERROR = &HC00000E5
    STATUS_GENERIC_NOT_MAPPED = &HC00000E6
    STATUS_BAD_DESCRIPTOR_FORMAT = &HC00000E7
    STATUS_INVALID_USER_BUFFER = &HC00000E8
    STATUS_UNEXPECTED_IO_ERROR = &HC00000E9
    STATUS_UNEXPECTED_MM_CREATE_ERR = &HC00000EA
    STATUS_UNEXPECTED_MM_MAP_ERROR = &HC00000EB
    STATUS_UNEXPECTED_MM_EXTEND_ERR = &HC00000EC
    STATUS_NOT_LOGON_PROCESS = &HC00000ED
    STATUS_LOGON_SESSION_EXISTS = &HC00000EE
    STATUS_INVALID_PARAMETER_1 = &HC00000EF
    STATUS_INVALID_PARAMETER_2 = &HC00000F0
    STATUS_INVALID_PARAMETER_3 = &HC00000F1
    STATUS_INVALID_PARAMETER_4 = &HC00000F2
    STATUS_INVALID_PARAMETER_5 = &HC00000F3
    STATUS_INVALID_PARAMETER_6 = &HC00000F4
    STATUS_INVALID_PARAMETER_7 = &HC00000F5
    STATUS_INVALID_PARAMETER_8 = &HC00000F6
    STATUS_INVALID_PARAMETER_9 = &HC00000F7
    STATUS_INVALID_PARAMETER_10 = &HC00000F8
    STATUS_INVALID_PARAMETER_11 = &HC00000F9
    STATUS_INVALID_PARAMETER_12 = &HC00000FA
    STATUS_REDIRECTOR_NOT_STARTED = &HC00000FB
    STATUS_REDIRECTOR_STARTED = &HC00000FC
    STATUS_STACK_OVERFLOW = &HC00000FD
    STATUS_NO_SUCH_PACKAGE = &HC00000FE
    STATUS_BAD_FUNCTION_TABLE = &HC00000FF
    STATUS_VARIABLE_NOT_FOUND = &HC0000100
    STATUS_DIRECTORY_NOT_EMPTY = &HC0000101
    STATUS_FILE_CORRUPT_ERROR = &HC0000102
    STATUS_NOT_A_DIRECTORY = &HC0000103
    STATUS_BAD_LOGON_SESSION_STATE = &HC0000104
    STATUS_LOGON_SESSION_COLLISION = &HC0000105
    STATUS_NAME_TOO_LONG = &HC0000106
    STATUS_FILES_OPEN = &HC0000107
    STATUS_CONNECTION_IN_USE = &HC0000108
    STATUS_MESSAGE_NOT_FOUND = &HC0000109
    STATUS_PROCESS_IS_TERMINATING = &HC000010A
    STATUS_INVALID_LOGON_TYPE = &HC000010B
    STATUS_NO_GUID_TRANSLATION = &HC000010C
    STATUS_CANNOT_IMPERSONATE = &HC000010D
    STATUS_IMAGE_ALREADY_LOADED = &HC000010E
    STATUS_ABIOS_NOT_PRESENT = &HC000010F
    STATUS_ABIOS_LID_NOT_EXIST = &HC0000110
    STATUS_ABIOS_LID_ALREADY_OWNED = &HC0000111
    STATUS_ABIOS_NOT_LID_OWNER = &HC0000112
    STATUS_ABIOS_INVALID_COMMAND = &HC0000113
    STATUS_ABIOS_INVALID_LID = &HC0000114
    STATUS_ABIOS_SELECTOR_NOT_AVAILABLE = &HC0000115
    STATUS_ABIOS_INVALID_SELECTOR = &HC0000116
    STATUS_NO_LDT = &HC0000117
    STATUS_INVALID_LDT_SIZE = &HC0000118
    STATUS_INVALID_LDT_OFFSET = &HC0000119
    STATUS_INVALID_LDT_DESCRIPTOR = &HC000011A
    STATUS_INVALID_IMAGE_NE_FORMAT = &HC000011B
    STATUS_RXACT_INVALID_STATE = &HC000011C
    STATUS_RXACT_COMMIT_FAILURE = &HC000011D
    STATUS_MAPPED_FILE_SIZE_ZERO = &HC000011E
    STATUS_TOO_MANY_OPENED_FILES = &HC000011F
    STATUS_CANCELLED = &HC0000120
    STATUS_CANNOT_DELETE = &HC0000121
    STATUS_INVALID_COMPUTER_NAME = &HC0000122
    STATUS_FILE_DELETED = &HC0000123
    STATUS_SPECIAL_ACCOUNT = &HC0000124
    STATUS_SPECIAL_GROUP = &HC0000125
    STATUS_SPECIAL_USER = &HC0000126
    STATUS_MEMBERS_PRIMARY_GROUP = &HC0000127
    STATUS_FILE_CLOSED = &HC0000128
    STATUS_TOO_MANY_THREADS = &HC0000129
    STATUS_THREAD_NOT_IN_PROCESS = &HC000012A
    STATUS_TOKEN_ALREADY_IN_USE = &HC000012B
    STATUS_PAGEFILE_QUOTA_EXCEEDED = &HC000012C
    STATUS_COMMITMENT_LIMIT = &HC000012D
    STATUS_INVALID_IMAGE_LE_FORMAT = &HC000012E
    STATUS_INVALID_IMAGE_NOT_MZ = &HC000012F
    STATUS_INVALID_IMAGE_PROTECT = &HC0000130
    STATUS_INVALID_IMAGE_WIN_16 = &HC0000131
    STATUS_LOGON_SERVER_CONFLICT = &HC0000132
    STATUS_TIME_DIFFERENCE_AT_DC = &HC0000133
    STATUS_SYNCHRONIZATION_REQUIRED = &HC0000134
    STATUS_DLL_NOT_FOUND = &HC0000135
    STATUS_OPEN_FAILED = &HC0000136
    STATUS_IO_PRIVILEGE_FAILED = &HC0000137
    STATUS_ORDINAL_NOT_FOUND = &HC0000138
    STATUS_ENTRYPOINT_NOT_FOUND = &HC0000139
    STATUS_CONTROL_C_EXIT = &HC000013A
    STATUS_LOCAL_DISCONNECT = &HC000013B
    STATUS_REMOTE_DISCONNECT = &HC000013C
    STATUS_REMOTE_RESOURCES = &HC000013D
    STATUS_LINK_FAILED = &HC000013E
    STATUS_LINK_TIMEOUT = &HC000013F
    STATUS_INVALID_CONNECTION = &HC0000140
    STATUS_INVALID_ADDRESS = &HC0000141
    STATUS_DLL_INIT_FAILED = &HC0000142
    STATUS_MISSING_SYSTEMFILE = &HC0000143
    STATUS_UNHANDLED_EXCEPTION = &HC0000144
    STATUS_APP_INIT_FAILURE = &HC0000145
    STATUS_PAGEFILE_CREATE_FAILED = &HC0000146
    STATUS_NO_PAGEFILE = &HC0000147
    STATUS_INVALID_LEVEL = &HC0000148
    STATUS_WRONG_PASSWORD_CORE = &HC0000149
    STATUS_ILLEGAL_FLOAT_CONTEXT = &HC000014A
    STATUS_PIPE_BROKEN = &HC000014B
    STATUS_REGISTRY_CORRUPT = &HC000014C
    STATUS_REGISTRY_IO_FAILED = &HC000014D
    STATUS_NO_EVENT_PAIR = &HC000014E
    STATUS_UNRECOGNIZED_VOLUME = &HC000014F
    STATUS_SERIAL_NO_DEVICE_INITED = &HC0000150
    STATUS_NO_SUCH_ALIAS = &HC0000151
    STATUS_MEMBER_NOT_IN_ALIAS = &HC0000152
    STATUS_MEMBER_IN_ALIAS = &HC0000153
    STATUS_ALIAS_EXISTS = &HC0000154
    STATUS_LOGON_NOT_GRANTED = &HC0000155
    STATUS_TOO_MANY_SECRETS = &HC0000156
    STATUS_SECRET_TOO_LONG = &HC0000157
    STATUS_INTERNAL_DB_ERROR = &HC0000158
    STATUS_FULLSCREEN_MODE = &HC0000159
    STATUS_TOO_MANY_CONTEXT_IDS = &HC000015A
    STATUS_LOGON_TYPE_NOT_GRANTED = &HC000015B
    STATUS_NOT_REGISTRY_FILE = &HC000015C
    STATUS_NT_CROSS_ENCRYPTION_REQUIRED = &HC000015D
    STATUS_DOMAIN_CTRLR_CONFIG_ERROR = &HC000015E
    STATUS_FT_MISSING_MEMBER = &HC000015F
    STATUS_ILL_FORMED_SERVICE_ENTRY = &HC0000160
    STATUS_ILLEGAL_CHARACTER = &HC0000161
    STATUS_UNMAPPABLE_CHARACTER = &HC0000162
    STATUS_UNDEFINED_CHARACTER = &HC0000163
    STATUS_FLOPPY_VOLUME = &HC0000164
    STATUS_FLOPPY_ID_MARK_NOT_FOUND = &HC0000165
    STATUS_FLOPPY_WRONG_CYLINDER = &HC0000166
    STATUS_FLOPPY_UNKNOWN_ERROR = &HC0000167
    STATUS_FLOPPY_BAD_REGISTERS = &HC0000168
    STATUS_DISK_RECALIBRATE_FAILED = &HC0000169
    STATUS_DISK_OPERATION_FAILED = &HC000016A
    STATUS_DISK_RESET_FAILED = &HC000016B
    STATUS_SHARED_IRQ_BUSY = &HC000016C
    STATUS_FT_ORPHANING = &HC000016D
    STATUS_BIOS_FAILED_TO_CONNECT_INTERRUPT = &HC000016E
    STATUS_PARTITION_FAILURE = &HC0000172
    STATUS_INVALID_BLOCK_LENGTH = &HC0000173
    STATUS_DEVICE_NOT_PARTITIONED = &HC0000174
    STATUS_UNABLE_TO_LOCK_MEDIA = &HC0000175
    STATUS_UNABLE_TO_UNLOAD_MEDIA = &HC0000176
    STATUS_EOM_OVERFLOW = &HC0000177
    STATUS_NO_MEDIA = &HC0000178
    STATUS_NO_SUCH_MEMBER = &HC000017A
    STATUS_INVALID_MEMBER = &HC000017B
    STATUS_KEY_DELETED = &HC000017C
    STATUS_NO_LOG_SPACE = &HC000017D
    STATUS_TOO_MANY_SIDS = &HC000017E
    STATUS_LM_CROSS_ENCRYPTION_REQUIRED = &HC000017F
    STATUS_KEY_HAS_CHILDREN = &HC0000180
    STATUS_CHILD_MUST_BE_VOLATILE = &HC0000181
    STATUS_DEVICE_CONFIGURATION_ERROR = &HC0000182
    STATUS_DRIVER_INTERNAL_ERROR = &HC0000183
    STATUS_INVALID_DEVICE_STATE = &HC0000184
    STATUS_IO_DEVICE_ERROR = &HC0000185
    STATUS_DEVICE_PROTOCOL_ERROR = &HC0000186
    STATUS_BACKUP_CONTROLLER = &HC0000187
    STATUS_LOG_FILE_FULL = &HC0000188
    STATUS_TOO_LATE = &HC0000189
    STATUS_NO_TRUST_LSA_SECRET = &HC000018A
    STATUS_NO_TRUST_SAM_ACCOUNT = &HC000018B
    STATUS_TRUSTED_DOMAIN_FAILURE = &HC000018C
    STATUS_TRUSTED_RELATIONSHIP_FAILURE = &HC000018D
    STATUS_EVENTLOG_FILE_CORRUPT = &HC000018E
    STATUS_EVENTLOG_CANT_START = &HC000018F
    STATUS_TRUST_FAILURE = &HC0000190
    STATUS_MUTANT_LIMIT_EXCEEDED = &HC0000191
    STATUS_NETLOGON_NOT_STARTED = &HC0000192
    STATUS_ACCOUNT_EXPIRED = &HC0000193
    STATUS_POSSIBLE_DEADLOCK = &HC0000194
    STATUS_NETWORK_CREDENTIAL_CONFLICT = &HC0000195
    STATUS_REMOTE_SESSION_LIMIT = &HC0000196
    STATUS_EVENTLOG_FILE_CHANGED = &HC0000197
    STATUS_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = &HC0000198
    STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT = &HC0000199
    STATUS_NOLOGON_SERVER_TRUST_ACCOUNT = &HC000019A
    STATUS_DOMAIN_TRUST_INCONSISTENT = &HC000019B
    STATUS_FS_DRIVER_REQUIRED = &HC000019C
    STATUS_NO_USER_SESSION_KEY = &HC0000202
    STATUS_USER_SESSION_DELETED = &HC0000203
    STATUS_RESOURCE_LANG_NOT_FOUND = &HC0000204
    STATUS_INSUFF_SERVER_RESOURCES = &HC0000205
    STATUS_INVALID_BUFFER_SIZE = &HC0000206
    STATUS_INVALID_ADDRESS_COMPONENT = &HC0000207
    STATUS_INVALID_ADDRESS_WILDCARD = &HC0000208
    STATUS_TOO_MANY_ADDRESSES = &HC0000209
    STATUS_ADDRESS_ALREADY_EXISTS = &HC000020A
    STATUS_ADDRESS_CLOSED = &HC000020B
    STATUS_CONNECTION_DISCONNECTED = &HC000020C
    STATUS_CONNECTION_RESET = &HC000020D
    STATUS_TOO_MANY_NODES = &HC000020E
    STATUS_TRANSACTION_ABORTED = &HC000020F
    STATUS_TRANSACTION_TIMED_OUT = &HC0000210
    STATUS_TRANSACTION_NO_RELEASE = &HC0000211
    STATUS_TRANSACTION_NO_MATCH = &HC0000212
    STATUS_TRANSACTION_RESPONDED = &HC0000213
    STATUS_TRANSACTION_INVALID_ID = &HC0000214
    STATUS_TRANSACTION_INVALID_TYPE = &HC0000215
    STATUS_NOT_SERVER_SESSION = &HC0000216
    STATUS_NOT_CLIENT_SESSION = &HC0000217
    STATUS_CANNOT_LOAD_REGISTRY_FILE = &HC0000218
    STATUS_DEBUG_ATTACH_FAILED = &HC0000219
    STATUS_SYSTEM_PROCESS_TERMINATED = &HC000021A
    STATUS_DATA_NOT_ACCEPTED = &HC000021B
    STATUS_NO_BROWSER_SERVERS_FOUND = &HC000021C
    STATUS_VDM_HARD_ERROR = &HC000021D
    STATUS_DRIVER_CANCEL_TIMEOUT = &HC000021E
    STATUS_REPLY_MESSAGE_MISMATCH = &HC000021F
    STATUS_MAPPED_ALIGNMENT = &HC0000220
    STATUS_IMAGE_CHECKSUM_MISMATCH = &HC0000221
    STATUS_LOST_WRITEBEHIND_DATA = &HC0000222
    STATUS_CLIENT_SERVER_PARAMETERS_INVALID = &HC0000223
    STATUS_PASSWORD_MUST_CHANGE = &HC0000224
    STATUS_NOT_FOUND = &HC0000225
    STATUS_NOT_TINY_STREAM = &HC0000226
    STATUS_RECOVERY_FAILURE = &HC0000227
    STATUS_STACK_OVERFLOW_READ = &HC0000228
    STATUS_FAIL_CHECK = &HC0000229
    STATUS_DUPLICATE_OBJECTID = &HC000022A
    STATUS_OBJECTID_EXISTS = &HC000022B
    STATUS_CONVERT_TO_LARGE = &HC000022C
    STATUS_RETRY = &HC000022D
    STATUS_FOUND_OUT_OF_SCOPE = &HC000022E
    STATUS_ALLOCATE_BUCKET = &HC000022F
    STATUS_PROPSET_NOT_FOUND = &HC0000230
    STATUS_MARSHALL_OVERFLOW = &HC0000231
    STATUS_INVALID_VARIANT = &HC0000232
    STATUS_DOMAIN_CONTROLLER_NOT_FOUND = &HC0000233
    STATUS_ACCOUNT_LOCKED_OUT = &HC0000234
    STATUS_HANDLE_NOT_CLOSABLE = &HC0000235
    STATUS_CONNECTION_REFUSED = &HC0000236
    STATUS_GRACEFUL_DISCONNECT = &HC0000237
    STATUS_ADDRESS_ALREADY_ASSOCIATED = &HC0000238
    STATUS_ADDRESS_NOT_ASSOCIATED = &HC0000239
    STATUS_CONNECTION_INVALID = &HC000023A
    STATUS_CONNECTION_ACTIVE = &HC000023B
    STATUS_NETWORK_UNREACHABLE = &HC000023C
    STATUS_HOST_UNREACHABLE = &HC000023D
    STATUS_PROTOCOL_UNREACHABLE = &HC000023E
    STATUS_PORT_UNREACHABLE = &HC000023F
    STATUS_REQUEST_ABORTED = &HC0000240
    STATUS_CONNECTION_ABORTED = &HC0000241
    STATUS_BAD_COMPRESSION_BUFFER = &HC0000242
    STATUS_USER_MAPPED_FILE = &HC0000243
    STATUS_AUDIT_FAILED = &HC0000244
    STATUS_TIMER_RESOLUTION_NOT_SET = &HC0000245
    STATUS_CONNECTION_COUNT_LIMIT = &HC0000246
    STATUS_LOGIN_TIME_RESTRICTION = &HC0000247
    STATUS_LOGIN_WKSTA_RESTRICTION = &HC0000248
    STATUS_IMAGE_MP_UP_MISMATCH = &HC0000249
    STATUS_INSUFFICIENT_LOGON_INFO = &HC0000250
    STATUS_BAD_DLL_ENTRYPOINT = &HC0000251
    STATUS_BAD_SERVICE_ENTRYPOINT = &HC0000252
    STATUS_LPC_REPLY_LOST = &HC0000253
    STATUS_IP_ADDRESS_CONFLICT1 = &HC0000254
    STATUS_IP_ADDRESS_CONFLICT2 = &HC0000255
    STATUS_REGISTRY_QUOTA_LIMIT = &HC0000256
    STATUS_PATH_NOT_COVERED = &HC0000257
    STATUS_NO_CALLBACK_ACTIVE = &HC0000258
    STATUS_LICENSE_QUOTA_EXCEEDED = &HC0000259
    STATUS_PWD_TOO_SHORT = &HC000025A
    STATUS_PWD_TOO_RECENT = &HC000025B
    STATUS_PWD_HISTORY_CONFLICT = &HC000025C
    STATUS_PLUGPLAY_NO_DEVICE = &HC000025E
    STATUS_UNSUPPORTED_COMPRESSION = &HC000025F
    STATUS_INVALID_HW_PROFILE = &HC0000260
    STATUS_INVALID_PLUGPLAY_DEVICE_PATH = &HC0000261
    STATUS_DRIVER_ORDINAL_NOT_FOUND = &HC0000262
    STATUS_DRIVER_ENTRYPOINT_NOT_FOUND = &HC0000263
    STATUS_RESOURCE_NOT_OWNED = &HC0000264
    STATUS_TOO_MANY_LINKS = &HC0000265
    STATUS_QUOTA_LIST_INCONSISTENT = &HC0000266
    STATUS_FILE_IS_OFFLINE = &HC0000267
    STATUS_EVALUATION_EXPIRATION = &HC0000268
    STATUS_ILLEGAL_DLL_RELOCATION = &HC0000269
    STATUS_LICENSE_VIOLATION = &HC000026A
    STATUS_DLL_INIT_FAILED_LOGOFF = &HC000026B
    STATUS_DRIVER_UNABLE_TO_LOAD = &HC000026C
    STATUS_DFS_UNAVAILABLE = &HC000026D
    STATUS_VOLUME_DISMOUNTED = &HC000026E
    STATUS_WX86_INTERNAL_ERROR = &HC000026F
    STATUS_WX86_FLOAT_STACK_CHECK = &HC0000270
    STATUS_VALIDATE_CONTINUE = &HC0000271
    STATUS_NO_MATCH = &HC0000272
    STATUS_NO_MORE_MATCHES = &HC0000273
    STATUS_NOT_A_REPARSE_POINT = &HC0000275
    STATUS_IO_REPARSE_TAG_INVALID = &HC0000276
    STATUS_IO_REPARSE_TAG_MISMATCH = &HC0000277
    STATUS_IO_REPARSE_DATA_INVALID = &HC0000278
    STATUS_IO_REPARSE_TAG_NOT_HANDLED = &HC0000279
    STATUS_REPARSE_POINT_NOT_RESOLVED = &HC0000280
    STATUS_DIRECTORY_IS_A_REPARSE_POINT = &HC0000281
    STATUS_RANGE_LIST_CONFLICT = &HC0000282
    STATUS_SOURCE_ELEMENT_EMPTY = &HC0000283
    STATUS_DESTINATION_ELEMENT_FULL = &HC0000284
    STATUS_ILLEGAL_ELEMENT_ADDRESS = &HC0000285
    STATUS_MAGAZINE_NOT_PRESENT = &HC0000286
    STATUS_REINITIALIZATION_NEEDED = &HC0000287
    STATUS_DEVICE_REQUIRES_CLEANING = &H80000288
    STATUS_DEVICE_DOOR_OPEN = &H80000289
    STATUS_ENCRYPTION_FAILED = &HC000028A
    STATUS_DECRYPTION_FAILED = &HC000028B
    STATUS_RANGE_NOT_FOUND = &HC000028C
    STATUS_NO_RECOVERY_POLICY = &HC000028D
    STATUS_NO_EFS = &HC000028E
    STATUS_WRONG_EFS = &HC000028F
    STATUS_NO_USER_KEYS = &HC0000290
    STATUS_FILE_NOT_ENCRYPTED = &HC0000291
    STATUS_NOT_EXPORT_FORMAT = &HC0000292
    STATUS_FILE_ENCRYPTED = &HC0000293
    STATUS_WAKE_SYSTEM = &H40000294
    STATUS_WMI_GUID_NOT_FOUND = &HC0000295
    STATUS_WMI_INSTANCE_NOT_FOUND = &HC0000296
    STATUS_WMI_ITEMID_NOT_FOUND = &HC0000297
    STATUS_WMI_TRY_AGAIN = &HC0000298
    STATUS_SHARED_POLICY = &HC0000299
    STATUS_POLICY_OBJECT_NOT_FOUND = &HC000029A
    STATUS_POLICY_ONLY_IN_DS = &HC000029B
    STATUS_VOLUME_NOT_UPGRADED = &HC000029C
    STATUS_REMOTE_STORAGE_NOT_ACTIVE = &HC000029D
    STATUS_REMOTE_STORAGE_MEDIA_ERROR = &HC000029E
    STATUS_NO_TRACKING_SERVICE = &HC000029F
    STATUS_SERVER_SID_MISMATCH = &HC00002A0
    STATUS_DS_NO_ATTRIBUTE_OR_VALUE = &HC00002A1
    STATUS_DS_INVALID_ATTRIBUTE_SYNTAX = &HC00002A2
    STATUS_DS_ATTRIBUTE_TYPE_UNDEFINED = &HC00002A3
    STATUS_DS_ATTRIBUTE_OR_VALUE_EXISTS = &HC00002A4
    STATUS_DS_BUSY = &HC00002A5
    STATUS_DS_UNAVAILABLE = &HC00002A6
    STATUS_DS_NO_RIDS_ALLOCATED = &HC00002A7
    STATUS_DS_NO_MORE_RIDS = &HC00002A8
    STATUS_DS_INCORRECT_ROLE_OWNER = &HC00002A9
    STATUS_DS_RIDMGR_INIT_ERROR = &HC00002AA
    STATUS_DS_OBJ_CLASS_VIOLATION = &HC00002AB
    STATUS_DS_CANT_ON_NON_LEAF = &HC00002AC
    STATUS_DS_CANT_ON_RDN = &HC00002AD
    STATUS_DS_CANT_MOD_OBJ_CLASS = &HC00002AE
    STATUS_DS_CROSS_DOM_MOVE_FAILED = &HC00002AF
    STATUS_DS_GC_NOT_AVAILABLE = &HC00002B0
    STATUS_DIRECTORY_SERVICE_REQUIRED = &HC00002B1
    STATUS_REPARSE_ATTRIBUTE_CONFLICT = &HC00002B2
    STATUS_CANT_ENABLE_DENY_ONLY = &HC00002B3
    STATUS_FLOAT_MULTIPLE_FAULTS = &HC00002B4
    STATUS_FLOAT_MULTIPLE_TRAPS = &HC00002B5
    STATUS_DEVICE_REMOVED = &HC00002B6
    STATUS_JOURNAL_DELETE_IN_PROGRESS = &HC00002B7
    STATUS_JOURNAL_NOT_ACTIVE = &HC00002B8
    STATUS_NOINTERFACE = &HC00002B9
    STATUS_DS_ADMIN_LIMIT_EXCEEDED = &HC00002C1
    STATUS_DRIVER_FAILED_SLEEP = &HC00002C2
    STATUS_MUTUAL_AUTHENTICATION_FAILED = &HC00002C3
    STATUS_CORRUPT_SYSTEM_FILE = &HC00002C4
    STATUS_DATATYPE_MISALIGNMENT_ERROR = &HC00002C5
    STATUS_WMI_READ_ONLY = &HC00002C6
    STATUS_WMI_SET_FAILURE = &HC00002C7
    STATUS_COMMITMENT_MINIMUM = &HC00002C8
    STATUS_REG_NAT_CONSUMPTION = &HC00002C9
    STATUS_TRANSPORT_FULL = &HC00002CA
    STATUS_DS_SAM_INIT_FAILURE = &HC00002CB
    STATUS_ONLY_IF_CONNECTED = &HC00002CC
    STATUS_DS_SENSITIVE_GROUP_VIOLATION = &HC00002CD
    STATUS_PNP_RESTART_ENUMERATION = &HC00002CE
    STATUS_JOURNAL_ENTRY_DELETED = &HC00002CF
    STATUS_DS_CANT_MOD_PRIMARYGROUPID = &HC00002D0
    STATUS_SYSTEM_IMAGE_BAD_SIGNATURE = &HC00002D1
    STATUS_PNP_REBOOT_REQUIRED = &HC00002D2
    STATUS_POWER_STATE_INVALID = &HC00002D3
    STATUS_DS_INVALID_GROUP_TYPE = &HC00002D4
    STATUS_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN = &HC00002D5
    STATUS_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN = &HC00002D6
    STATUS_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER = &HC00002D7
    STATUS_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER = &HC00002D8
    STATUS_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER = &HC00002D9
    STATUS_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER = &HC00002DA
    STATUS_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER = &HC00002DB
    STATUS_DS_HAVE_PRIMARY_MEMBERS = &HC00002DC
    STATUS_WMI_NOT_SUPPORTED = &HC00002DD
    STATUS_INSUFFICIENT_POWER = &HC00002DE
    STATUS_SAM_NEED_BOOTKEY_PASSWORD = &HC00002DF
    STATUS_SAM_NEED_BOOTKEY_FLOPPY = &HC00002E0
    STATUS_DS_CANT_START = &HC00002E1
    STATUS_DS_INIT_FAILURE = &HC00002E2
    STATUS_SAM_INIT_FAILURE = &HC00002E3
    STATUS_DS_GC_REQUIRED = &HC00002E4
    STATUS_DS_LOCAL_MEMBER_OF_LOCAL_ONLY = &HC00002E5
    STATUS_DS_NO_FPO_IN_UNIVERSAL_GROUPS = &HC00002E6
    STATUS_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = &HC00002E7
    STATUS_MULTIPLE_FAULT_VIOLATION = &HC00002E8
    STATUS_CURRENT_DOMAIN_NOT_ALLOWED = &HC00002E9
    STATUS_CANNOT_MAKE = &HC00002EA
    STATUS_SYSTEM_SHUTDOWN = &HC00002EB
    STATUS_DS_INIT_FAILURE_CONSOLE = &HC00002EC
    STATUS_DS_SAM_INIT_FAILURE_CONSOLE = &HC00002ED
    STATUS_UNFINISHED_CONTEXT_DELETED = &HC00002EE
    STATUS_NO_TGT_REPLY = &HC00002EF
    STATUS_OBJECTID_NOT_FOUND = &HC00002F0
    STATUS_NO_IP_ADDRESSES = &HC00002F1
    STATUS_WRONG_CREDENTIAL_HANDLE = &HC00002F2
    STATUS_CRYPTO_SYSTEM_INVALID = &HC00002F3
    STATUS_MAX_REFERRALS_EXCEEDED = &HC00002F4
    STATUS_MUST_BE_KDC = &HC00002F5
    STATUS_STRONG_CRYPTO_NOT_SUPPORTED = &HC00002F6
    STATUS_TOO_MANY_PRINCIPALS = &HC00002F7
    STATUS_NO_PA_DATA = &HC00002F8
    STATUS_PKINIT_NAME_MISMATCH = &HC00002F9
    STATUS_SMARTCARD_LOGON_REQUIRED = &HC00002FA
    STATUS_KDC_INVALID_REQUEST = &HC00002FB
    STATUS_KDC_UNABLE_TO_REFER = &HC00002FC
    STATUS_KDC_UNKNOWN_ETYPE = &HC00002FD
    STATUS_SHUTDOWN_IN_PROGRESS = &HC00002FE
    STATUS_SERVER_SHUTDOWN_IN_PROGRESS = &HC00002FF
    STATUS_NOT_SUPPORTED_ON_SBS = &HC0000300
    STATUS_WMI_GUID_DISCONNECTED = &HC0000301
    STATUS_WMI_ALREADY_DISABLED = &HC0000302
    STATUS_WMI_ALREADY_ENABLED = &HC0000303
    STATUS_MFT_TOO_FRAGMENTED = &HC0000304
    STATUS_COPY_PROTECTION_FAILURE = &HC0000305
    STATUS_CSS_AUTHENTICATION_FAILURE = &HC0000306
    STATUS_CSS_KEY_NOT_PRESENT = &HC0000307
    STATUS_CSS_KEY_NOT_ESTABLISHED = &HC0000308
    STATUS_CSS_SCRAMBLED_SECTOR = &HC0000309
    STATUS_CSS_REGION_MISMATCH = &HC000030A
    STATUS_CSS_RESETS_EXHAUSTED = &HC000030B
    STATUS_PKINIT_FAILURE = &HC0000320
    STATUS_SMARTCARD_SUBSYSTEM_FAILURE = &HC0000321
    STATUS_NO_KERB_KEY = &HC0000322
    STATUS_HOST_DOWN = &HC0000350
    STATUS_UNSUPPORTED_PREAUTH = &HC0000351
    STATUS_EFS_ALG_BLOB_TOO_BIG = &HC0000352
    STATUS_PORT_NOT_SET = &HC0000353
    STATUS_DEBUGGER_INACTIVE = &HC0000354
    STATUS_DS_VERSION_CHECK_FAILURE = &HC0000355
    STATUS_AUDITING_DISABLED = &HC0000356
    STATUS_PRENT4_MACHINE_ACCOUNT = &HC0000357
    STATUS_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER = &HC0000358
    STATUS_INVALID_IMAGE_WIN_32 = &HC0000359
    STATUS_INVALID_IMAGE_WIN_64 = &HC000035A
    STATUS_BAD_BINDINGS = &HC000035B
    STATUS_NETWORK_SESSION_EXPIRED = &HC000035C
    STATUS_APPHELP_BLOCK = &HC000035D
    STATUS_ALL_SIDS_FILTERED = &HC000035E
    STATUS_NOT_SAFE_MODE_DRIVER = &HC000035F
    STATUS_ACCESS_DISABLED_BY_POLICY_DEFAULT = &HC0000361
    STATUS_ACCESS_DISABLED_BY_POLICY_PATH = &HC0000362
    STATUS_ACCESS_DISABLED_BY_POLICY_PUBLISHER = &HC0000363
    STATUS_ACCESS_DISABLED_BY_POLICY_OTHER = &HC0000364
    STATUS_FAILED_DRIVER_ENTRY = &HC0000365
    STATUS_DEVICE_ENUMERATION_ERROR = &HC0000366
    STATUS_MOUNT_POINT_NOT_RESOLVED = &HC0000368
    STATUS_INVALID_DEVICE_OBJECT_PARAMETER = &HC0000369
    STATUS_MCA_OCCURED = &HC000036A
    STATUS_DRIVER_BLOCKED_CRITICAL = &HC000036B
    STATUS_DRIVER_BLOCKED = &HC000036C
    STATUS_DRIVER_DATABASE_ERROR = &HC000036D
    STATUS_SYSTEM_HIVE_TOO_LARGE = &HC000036E
    STATUS_INVALID_IMPORT_OF_NON_DLL = &HC000036F
    STATUS_DS_SHUTTING_DOWN = &H40000370
    STATUS_NO_SECRETS = &HC0000371
    STATUS_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY = &HC0000372
    STATUS_FAILED_STACK_SWITCH = &HC0000373
    STATUS_HEAP_CORRUPTION = &HC0000374
    STATUS_SMARTCARD_WRONG_PIN = &HC0000380
    STATUS_SMARTCARD_CARD_BLOCKED = &HC0000381
    STATUS_SMARTCARD_CARD_NOT_AUTHENTICATED = &HC0000382
    STATUS_SMARTCARD_NO_CARD = &HC0000383
    STATUS_SMARTCARD_NO_KEY_CONTAINER = &HC0000384
    STATUS_SMARTCARD_NO_CERTIFICATE = &HC0000385
    STATUS_SMARTCARD_NO_KEYSET = &HC0000386
    STATUS_SMARTCARD_IO_ERROR = &HC0000387
    STATUS_DOWNGRADE_DETECTED = &HC0000388
    STATUS_SMARTCARD_CERT_REVOKED = &HC0000389
    STATUS_ISSUING_CA_UNTRUSTED = &HC000038A
    STATUS_REVOCATION_OFFLINE_C = &HC000038B
    STATUS_PKINIT_CLIENT_FAILURE = &HC000038C
    STATUS_SMARTCARD_CERT_EXPIRED = &HC000038D
    STATUS_DRIVER_FAILED_PRIOR_UNLOAD = &HC000038E
    STATUS_SMARTCARD_SILENT_CONTEXT = &HC000038F
    STATUS_PER_USER_TRUST_QUOTA_EXCEEDED = &HC0000401
    STATUS_ALL_USER_TRUST_QUOTA_EXCEEDED = &HC0000402
    STATUS_USER_DELETE_TRUST_QUOTA_EXCEEDED = &HC0000403
    STATUS_DS_NAME_NOT_UNIQUE = &HC0000404
    STATUS_DS_DUPLICATE_ID_FOUND = &HC0000405
    STATUS_DS_GROUP_CONVERSION_ERROR = &HC0000406
    STATUS_VOLSNAP_PREPARE_HIBERNATE = &HC0000407
    STATUS_USER2USER_REQUIRED = &HC0000408
    STATUS_STACK_BUFFER_OVERRUN = &HC0000409
    STATUS_NO_S4U_PROT_SUPPORT = &HC000040A
    STATUS_CROSSREALM_DELEGATION_FAILURE = &HC000040B
    STATUS_REVOCATION_OFFLINE_KDC = &HC000040C
    STATUS_ISSUING_CA_UNTRUSTED_KDC = &HC000040D
    STATUS_KDC_CERT_EXPIRED = &HC000040E
    STATUS_KDC_CERT_REVOKED = &HC000040F
    STATUS_PARAMETER_QUOTA_EXCEEDED = &HC0000410
    STATUS_HIBERNATION_FAILURE = &HC0000411
    STATUS_DELAY_LOAD_FAILED = &HC0000412
    STATUS_AUTHENTICATION_FIREWALL_FAILED = &HC0000413
    STATUS_VDM_DISALLOWED = &HC0000414
    STATUS_HUNG_DISPLAY_DRIVER_THREAD = &HC0000415
    STATUS_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE = &HC0000416
    STATUS_INVALID_CRUNTIME_PARAMETER = &HC0000417
    STATUS_NTLM_BLOCKED = &HC0000418
    STATUS_DS_SRC_SID_EXISTS_IN_FOREST = &HC0000419
    STATUS_DS_DOMAIN_NAME_EXISTS_IN_FOREST = &HC000041A
    STATUS_DS_FLAT_NAME_EXISTS_IN_FOREST = &HC000041B
    STATUS_INVALID_USER_PRINCIPAL_NAME = &HC000041C
    STATUS_FATAL_USER_CALLBACK_EXCEPTION = &HC000041D
    STATUS_ASSERTION_FAILURE = &HC0000420
    STATUS_VERIFIER_STOP = &HC0000421
    STATUS_CALLBACK_POP_STACK = &HC0000423
    STATUS_INCOMPATIBLE_DRIVER_BLOCKED = &HC0000424
    STATUS_HIVE_UNLOADED = &HC0000425
    STATUS_COMPRESSION_DISABLED = &HC0000426
    STATUS_FILE_SYSTEM_LIMITATION = &HC0000427
    STATUS_INVALID_IMAGE_HASH = &HC0000428
    STATUS_NOT_CAPABLE = &HC0000429
    STATUS_REQUEST_OUT_OF_SEQUENCE = &HC000042A
    STATUS_IMPLEMENTATION_LIMIT = &HC000042B
    STATUS_ELEVATION_REQUIRED = &HC000042C
    STATUS_NO_SECURITY_CONTEXT = &HC000042D
    STATUS_PKU2U_CERT_FAILURE = &HC000042F
    STATUS_BEYOND_VDL = &HC0000432
    STATUS_ENCOUNTERED_WRITE_IN_PROGRESS = &HC0000433
    STATUS_PTE_CHANGED = &HC0000434
    STATUS_PURGE_FAILED = &HC0000435
    STATUS_CRED_REQUIRES_CONFIRMATION = &HC0000440
    STATUS_CS_ENCRYPTION_INVALID_SERVER_RESPONSE = &HC0000441
    STATUS_CS_ENCRYPTION_UNSUPPORTED_SERVER = &HC0000442
    STATUS_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE = &HC0000443
    STATUS_CS_ENCRYPTION_NEW_ENCRYPTED_FILE = &HC0000444
    STATUS_CS_ENCRYPTION_FILE_NOT_CSE = &HC0000445
    STATUS_INVALID_LABEL = &HC0000446
    STATUS_DRIVER_PROCESS_TERMINATED = &HC0000450
    STATUS_AMBIGUOUS_SYSTEM_DEVICE = &HC0000451
    STATUS_SYSTEM_DEVICE_NOT_FOUND = &HC0000452
    STATUS_RESTART_BOOT_APPLICATION = &HC0000453
    STATUS_INSUFFICIENT_NVRAM_RESOURCES = &HC0000454
    STATUS_INVALID_SESSION = &HC0000455
    STATUS_THREAD_ALREADY_IN_SESSION = &HC0000456
    STATUS_THREAD_NOT_IN_SESSION = &HC0000457
    STATUS_INVALID_WEIGHT = &HC0000458
    STATUS_REQUEST_PAUSED = &HC0000459
    STATUS_NO_RANGES_PROCESSED = &HC0000460
    STATUS_DISK_RESOURCES_EXHAUSTED = &HC0000461
    STATUS_NEEDS_REMEDIATION = &HC0000462
    STATUS_DEVICE_FEATURE_NOT_SUPPORTED = &HC0000463
    STATUS_DEVICE_UNREACHABLE = &HC0000464
    STATUS_INVALID_TOKEN = &HC0000465
    STATUS_SERVER_UNAVAILABLE = &HC0000466
    STATUS_FILE_NOT_AVAILABLE = &HC0000467
    STATUS_DEVICE_INSUFFICIENT_RESOURCES = &HC0000468
    STATUS_PACKAGE_UPDATING = &HC0000469
    STATUS_NOT_READ_FROM_COPY = &HC000046A
    STATUS_FT_WRITE_FAILURE = &HC000046B
    STATUS_FT_DI_SCAN_REQUIRED = &HC000046C
    STATUS_OBJECT_NOT_EXTERNALLY_BACKED = &HC000046D
    STATUS_EXTERNAL_BACKING_PROVIDER_UNKNOWN = &HC000046E
    STATUS_COMPRESSION_NOT_BENEFICIAL = &HC000046F
    STATUS_DATA_CHECKSUM_ERROR = &HC0000470
    STATUS_INTERMIXED_KERNEL_EA_OPERATION = &HC0000471
    STATUS_TRIM_READ_ZERO_NOT_SUPPORTED = &HC0000472
    STATUS_TOO_MANY_SEGMENT_DESCRIPTORS = &HC0000473
    STATUS_INVALID_OFFSET_ALIGNMENT = &HC0000474
    STATUS_INVALID_FIELD_IN_PARAMETER_LIST = &HC0000475
    STATUS_OPERATION_IN_PROGRESS = &HC0000476
    STATUS_INVALID_INITIATOR_TARGET_PATH = &HC0000477
    STATUS_SCRUB_DATA_DISABLED = &HC0000478
    STATUS_NOT_REDUNDANT_STORAGE = &HC0000479
    STATUS_RESIDENT_FILE_NOT_SUPPORTED = &HC000047A
    STATUS_COMPRESSED_FILE_NOT_SUPPORTED = &HC000047B
    STATUS_DIRECTORY_NOT_SUPPORTED = &HC000047C
    STATUS_IO_OPERATION_TIMEOUT = &HC000047D
    STATUS_SYSTEM_NEEDS_REMEDIATION = &HC000047E
    STATUS_APPX_INTEGRITY_FAILURE_CLR_NGEN = &HC000047F
    STATUS_SHARE_UNAVAILABLE = &HC0000480
    STATUS_APISET_NOT_HOSTED = &HC0000481
    STATUS_APISET_NOT_PRESENT = &HC0000482
    STATUS_DEVICE_HARDWARE_ERROR = &HC0000483
    STATUS_FIRMWARE_SLOT_INVALID = &HC0000484
    STATUS_FIRMWARE_IMAGE_INVALID = &HC0000485
    STATUS_STORAGE_TOPOLOGY_ID_MISMATCH = &HC0000486
    STATUS_WIM_NOT_BOOTABLE = &HC0000487
    STATUS_BLOCKED_BY_PARENTAL_CONTROLS = &HC0000488
    STATUS_NEEDS_REGISTRATION = &HC0000489
    STATUS_QUOTA_ACTIVITY = &HC000048A
    STATUS_CALLBACK_INVOKE_INLINE = &HC000048B
    STATUS_BLOCK_TOO_MANY_REFERENCES = &HC000048C
    STATUS_MARKED_TO_DISALLOW_WRITES = &HC000048D
    STATUS_NETWORK_ACCESS_DENIED_EDP = &HC000048E
    STATUS_ENCLAVE_FAILURE = &HC000048F
    STATUS_PNP_NO_COMPAT_DRIVERS = &HC0000490
    STATUS_PNP_DRIVER_PACKAGE_NOT_FOUND = &HC0000491
    STATUS_PNP_DRIVER_CONFIGURATION_NOT_FOUND = &HC0000492
    STATUS_PNP_DRIVER_CONFIGURATION_INCOMPLETE = &HC0000493
    STATUS_PNP_FUNCTION_DRIVER_REQUIRED = &HC0000494
    STATUS_PNP_DEVICE_CONFIGURATION_PENDING = &HC0000495
    STATUS_DEVICE_HINT_NAME_BUFFER_TOO_SMALL = &HC0000496
    STATUS_PACKAGE_NOT_AVAILABLE = &HC0000497
    STATUS_DEVICE_IN_MAINTENANCE = &HC0000499
    STATUS_NOT_SUPPORTED_ON_DAX = &HC000049A
    STATUS_FREE_SPACE_TOO_FRAGMENTED = &HC000049B
    STATUS_DAX_MAPPING_EXISTS = &HC000049C
    STATUS_CHILD_PROCESS_BLOCKED = &HC000049D
    STATUS_STORAGE_LOST_DATA_PERSISTENCE = &HC000049E
    STATUS_PARTITION_TERMINATING = &HC00004A0
    STATUS_EXTERNAL_SYSKEY_NOT_SUPPORTED = &HC00004A1
    STATUS_ENCLAVE_VIOLATION = &HC00004A2
    STATUS_FILE_PROTECTED_UNDER_DPL = &HC00004A3
    STATUS_VOLUME_NOT_CLUSTER_ALIGNED = &HC00004A4
    STATUS_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND = &HC00004A5
    STATUS_APPX_FILE_NOT_ENCRYPTED = &HC00004A6
    STATUS_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED = &HC00004A7
    STATUS_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET = &HC00004A8
    STATUS_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE = &HC00004A9
    STATUS_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER = &HC00004AA
    STATUS_FT_READ_FAILURE = &HC00004AB
    STATUS_PATCH_CONFLICT = &HC00004AC
    STATUS_STORAGE_RESERVE_ID_INVALID = &HC00004AD
    STATUS_STORAGE_RESERVE_DOES_NOT_EXIST = &HC00004AE
    STATUS_STORAGE_RESERVE_ALREADY_EXISTS = &HC00004AF
    STATUS_STORAGE_RESERVE_NOT_EMPTY = &HC00004B0
    STATUS_NOT_A_DAX_VOLUME = &HC00004B1
    STATUS_NOT_DAX_MAPPABLE = &HC00004B2
    STATUS_CASE_DIFFERING_NAMES_IN_DIR = &HC00004B3
    STATUS_FILE_NOT_SUPPORTED = &HC00004B4
    STATUS_NOT_SUPPORTED_WITH_BTT = &HC00004B5
    STATUS_ENCRYPTION_DISABLED = &HC00004B6
    STATUS_ENCRYPTING_METADATA_DISALLOWED = &HC00004B7
    STATUS_CANT_CLEAR_ENCRYPTION_FLAG = &HC00004B8
    STATUS_UNSATISFIED_DEPENDENCIES = &HC00004B9
    STATUS_CASE_SENSITIVE_PATH = &HC00004BA
    STATUS_UNSUPPORTED_PAGING_MODE = &HC00004BB
    STATUS_UNTRUSTED_MOUNT_POINT = &HC00004BC
    STATUS_HAS_SYSTEM_CRITICAL_FILES = &HC00004BD
    STATUS_OBJECT_IS_IMMUTABLE = &HC00004BE
    STATUS_FT_READ_FROM_COPY_FAILURE = &HC00004BF
    STATUS_IMAGE_LOADED_AS_PATCH_IMAGE = &HC00004C0
    STATUS_STORAGE_STACK_ACCESS_DENIED = &HC00004C1
    STATUS_INSUFFICIENT_VIRTUAL_ADDR_RESOURCES = &HC00004C2
    STATUS_ENCRYPTED_FILE_NOT_SUPPORTED = &HC00004C3
    STATUS_SPARSE_FILE_NOT_SUPPORTED = &HC00004C4
    STATUS_PAGEFILE_NOT_SUPPORTED = &HC00004C5
    STATUS_VOLUME_NOT_SUPPORTED = &HC00004C6
    STATUS_NOT_SUPPORTED_WITH_BYPASSIO = &HC00004C7
    STATUS_NO_BYPASSIO_DRIVER_SUPPORT = &HC00004C8
    STATUS_NOT_SUPPORTED_WITH_ENCRYPTION = &HC00004C9
    STATUS_NOT_SUPPORTED_WITH_COMPRESSION = &HC00004CA
    STATUS_NOT_SUPPORTED_WITH_REPLICATION = &HC00004CB
    STATUS_NOT_SUPPORTED_WITH_DEDUPLICATION = &HC00004CC
    STATUS_NOT_SUPPORTED_WITH_AUDITING = &HC00004CD
    STATUS_NOT_SUPPORTED_WITH_MONITORING = &HC00004CE
    STATUS_NOT_SUPPORTED_WITH_SNAPSHOT = &HC00004CF
    STATUS_NOT_SUPPORTED_WITH_VIRTUALIZATION = &HC00004D0
    STATUS_INDEX_OUT_OF_BOUNDS = &HC00004D1
    STATUS_BYPASSIO_FLT_NOT_SUPPORTED = &HC00004D2
    STATUS_VOLUME_WRITE_ACCESS_DENIED = &HC00004D3
    STATUS_PATCH_NOT_REGISTERED = &HC00004D4
    STATUS_NOT_SUPPORTED_WITH_CACHED_HANDLE = &HC00004D5
    STATUS_PDE_ENCRYPTION_UNAVAILABLE_FAILURE = &HC00004D6
    STATUS_PDE_DECRYPTION_UNAVAILABLE_FAILURE = &HC00004D7
    STATUS_PDE_DECRYPTION_UNAVAILABLE = &HC00004D8
    STATUS_VOLUME_UPGRADE_NOT_NEEDED = &HC00004D9
    STATUS_VOLUME_UPGRADE_PENDING = &HC00004DA
    STATUS_VOLUME_UPGRADE_DISABLED = &HC00004DB
    STATUS_VOLUME_UPGRADE_DISABLED_TILL_OS_DOWNGRADE_EXPIRED = &HC00004DC
    STATUS_NOT_A_DEV_VOLUME = &HC00004DD
    STATUS_FS_GUID_MISMATCH = &HC00004DE
    STATUS_CANT_ATTACH_TO_DEV_VOLUME = &HC00004DF
    STATUS_INVALID_TASK_NAME = &HC0000500
    STATUS_INVALID_TASK_INDEX = &HC0000501
    STATUS_THREAD_ALREADY_IN_TASK = &HC0000502
    STATUS_CALLBACK_BYPASS = &HC0000503
    STATUS_UNDEFINED_SCOPE = &HC0000504
    STATUS_INVALID_CAP = &HC0000505
    STATUS_NOT_GUI_PROCESS = &HC0000506
    STATUS_DEVICE_HUNG = &HC0000507
    STATUS_CONTAINER_ASSIGNED = &HC0000508
    STATUS_JOB_NO_CONTAINER = &HC0000509
    STATUS_DEVICE_UNRESPONSIVE = &HC000050A
    STATUS_REPARSE_POINT_ENCOUNTERED = &HC000050B
    STATUS_ATTRIBUTE_NOT_PRESENT = &HC000050C
    STATUS_NOT_A_TIERED_VOLUME = &HC000050D
    STATUS_ALREADY_HAS_STREAM_ID = &HC000050E
    STATUS_JOB_NOT_EMPTY = &HC000050F
    STATUS_ALREADY_INITIALIZED = &HC0000510
    STATUS_ENCLAVE_NOT_TERMINATED = &HC0000511
    STATUS_ENCLAVE_IS_TERMINATING = &HC0000512
    STATUS_SMB1_NOT_AVAILABLE = &HC0000513
    STATUS_SMR_GARBAGE_COLLECTION_REQUIRED = &HC0000514
    STATUS_INTERRUPTED = &HC0000515
    STATUS_THREAD_NOT_RUNNING = &HC0000516
    STATUS_SESSION_KEY_TOO_SHORT = &HC0000517
    STATUS_FS_METADATA_INCONSISTENT = &HC0000518
    STATUS_FAIL_FAST_EXCEPTION = &HC0000602
    STATUS_IMAGE_CERT_REVOKED = &HC0000603
    STATUS_DYNAMIC_CODE_BLOCKED = &HC0000604
    STATUS_IMAGE_CERT_EXPIRED = &HC0000605
    STATUS_STRICT_CFG_VIOLATION = &HC0000606
    STATUS_SET_CONTEXT_DENIED = &HC000060A
    STATUS_CROSS_PARTITION_VIOLATION = &HC000060B
    STATUS_PORT_CLOSED = &HC0000700
    STATUS_MESSAGE_LOST = &HC0000701
    STATUS_INVALID_MESSAGE = &HC0000702
    STATUS_REQUEST_CANCELED = &HC0000703
    STATUS_RECURSIVE_DISPATCH = &HC0000704
    STATUS_LPC_RECEIVE_BUFFER_EXPECTED = &HC0000705
    STATUS_LPC_INVALID_CONNECTION_USAGE = &HC0000706
    STATUS_LPC_REQUESTS_NOT_ALLOWED = &HC0000707
    STATUS_RESOURCE_IN_USE = &HC0000708
    STATUS_HARDWARE_MEMORY_ERROR = &HC0000709
    STATUS_THREADPOOL_HANDLE_EXCEPTION = &HC000070A
    STATUS_THREADPOOL_SET_EVENT_ON_COMPLETION_FAILED = &HC000070B
    STATUS_THREADPOOL_RELEASE_SEMAPHORE_ON_COMPLETION_FAILED = &HC000070C
    STATUS_THREADPOOL_RELEASE_MUTEX_ON_COMPLETION_FAILED = &HC000070D
    STATUS_THREADPOOL_FREE_LIBRARY_ON_COMPLETION_FAILED = &HC000070E
    STATUS_THREADPOOL_RELEASED_DURING_OPERATION = &HC000070F
    STATUS_CALLBACK_RETURNED_WHILE_IMPERSONATING = &HC0000710
    STATUS_APC_RETURNED_WHILE_IMPERSONATING = &HC0000711
    STATUS_PROCESS_IS_PROTECTED = &HC0000712
    STATUS_MCA_EXCEPTION = &HC0000713
    STATUS_CERTIFICATE_MAPPING_NOT_UNIQUE = &HC0000714
    STATUS_SYMLINK_CLASS_DISABLED = &HC0000715
    STATUS_INVALID_IDN_NORMALIZATION = &HC0000716
    STATUS_NO_UNICODE_TRANSLATION = &HC0000717
    STATUS_ALREADY_REGISTERED = &HC0000718
    STATUS_CONTEXT_MISMATCH = &HC0000719
    STATUS_PORT_ALREADY_HAS_COMPLETION_LIST = &HC000071A
    STATUS_CALLBACK_RETURNED_THREAD_PRIORITY = &HC000071B
    STATUS_INVALID_THREAD = &HC000071C
    STATUS_CALLBACK_RETURNED_TRANSACTION = &HC000071D
    STATUS_CALLBACK_RETURNED_LDR_LOCK = &HC000071E
    STATUS_CALLBACK_RETURNED_LANG = &HC000071F
    STATUS_CALLBACK_RETURNED_PRI_BACK = &HC0000720
    STATUS_CALLBACK_RETURNED_THREAD_AFFINITY = &HC0000721
    STATUS_LPC_HANDLE_COUNT_EXCEEDED = &HC0000722
    STATUS_EXECUTABLE_MEMORY_WRITE = &HC0000723
    STATUS_KERNEL_EXECUTABLE_MEMORY_WRITE = &HC0000724
    STATUS_ATTACHED_EXECUTABLE_MEMORY_WRITE = &HC0000725
    STATUS_TRIGGERED_EXECUTABLE_MEMORY_WRITE = &HC0000726
    STATUS_DISK_REPAIR_DISABLED = &HC0000800
    STATUS_DS_DOMAIN_RENAME_IN_PROGRESS = &HC0000801
    STATUS_DISK_QUOTA_EXCEEDED = &HC0000802
    STATUS_DATA_LOST_REPAIR = &H80000803
    STATUS_CONTENT_BLOCKED = &HC0000804
    STATUS_BAD_CLUSTERS = &HC0000805
    STATUS_VOLUME_DIRTY = &HC0000806
    STATUS_DISK_REPAIR_REDIRECTED = &H40000807
    STATUS_DISK_REPAIR_UNSUCCESSFUL = &HC0000808
    STATUS_CORRUPT_LOG_OVERFULL = &HC0000809
    STATUS_CORRUPT_LOG_CORRUPTED = &HC000080A
    STATUS_CORRUPT_LOG_UNAVAILABLE = &HC000080B
    STATUS_CORRUPT_LOG_DELETED_FULL = &HC000080C
    STATUS_CORRUPT_LOG_CLEARED = &HC000080D
    STATUS_ORPHAN_NAME_EXHAUSTED = &HC000080E
    STATUS_PROACTIVE_SCAN_IN_PROGRESS = &HC000080F
    STATUS_ENCRYPTED_IO_NOT_POSSIBLE = &HC0000810
    STATUS_CORRUPT_LOG_UPLEVEL_RECORDS = &HC0000811
    STATUS_FILE_CHECKED_OUT = &HC0000901
    STATUS_CHECKOUT_REQUIRED = &HC0000902
    STATUS_BAD_FILE_TYPE = &HC0000903
    STATUS_FILE_TOO_LARGE = &HC0000904
    STATUS_FORMS_AUTH_REQUIRED = &HC0000905
    STATUS_VIRUS_INFECTED = &HC0000906
    STATUS_VIRUS_DELETED = &HC0000907
    STATUS_BAD_MCFG_TABLE = &HC0000908
    STATUS_CANNOT_BREAK_OPLOCK = &HC0000909
    STATUS_BAD_KEY = &HC000090A
    STATUS_BAD_DATA = &HC000090B
    STATUS_NO_KEY = &HC000090C
    STATUS_FILE_HANDLE_REVOKED = &HC0000910
    STATUS_SECTION_DIRECT_MAP_ONLY = &HC0000911
    STATUS_BLOCK_WEAK_REFERENCE_INVALID = &HC0000912
    STATUS_BLOCK_SOURCE_WEAK_REFERENCE_INVALID = &HC0000913
    STATUS_BLOCK_TARGET_WEAK_REFERENCE_INVALID = &HC0000914
    STATUS_BLOCK_SHARED = &HC0000915
    STATUS_VRF_VOLATILE_CFG_AND_IO_ENABLED = &HC0000C08
    STATUS_VRF_VOLATILE_NOT_STOPPABLE = &HC0000C09
    STATUS_VRF_VOLATILE_SAFE_MODE = &HC0000C0A
    STATUS_VRF_VOLATILE_NOT_RUNNABLE_SYSTEM = &HC0000C0B
    STATUS_VRF_VOLATILE_NOT_SUPPORTED_RULECLASS = &HC0000C0C
    STATUS_VRF_VOLATILE_PROTECTED_DRIVER = &HC0000C0D
    STATUS_VRF_VOLATILE_NMI_REGISTERED = &HC0000C0E
    STATUS_VRF_VOLATILE_SETTINGS_CONFLICT = &HC0000C0F
    STATUS_DIF_ZERO_SIZE_INFORMATION = &HC0000C73
    STATUS_DIF_DRIVER_PLUGIN_MISMATCH = &HC0000C74
    STATUS_DIF_DRIVER_THUNKS_NOT_ALLOWED = &HC0000C75
    STATUS_DIF_IOCALLBACK_NOT_REPLACED = &HC0000C76
    STATUS_DIF_LIVEDUMP_LIMIT_EXCEEDED = &HC0000C77
    STATUS_DIF_VOLATILE_SECTION_NOT_LOCKED = &HC0000C78
    STATUS_DIF_VOLATILE_DRIVER_HOTPATCHED = &HC0000C79
    STATUS_DIF_VOLATILE_INVALID_INFO = &HC0000C7A
    STATUS_DIF_VOLATILE_DRIVER_IS_NOT_RUNNING = &HC0000C7B
    STATUS_DIF_VOLATILE_PLUGIN_IS_NOT_RUNNING = &HC0000C7C
    STATUS_DIF_VOLATILE_PLUGIN_CHANGE_NOT_ALLOWED = &HC0000C7D
    STATUS_DIF_VOLATILE_NOT_ALLOWED = &HC0000C7E
    STATUS_DIF_BINDING_API_NOT_FOUND = &HC0000C7F
    STATUS_WOW_ASSERTION = &HC0009898
    STATUS_INVALID_SIGNATURE = &HC000A000
    STATUS_HMAC_NOT_SUPPORTED = &HC000A001
    STATUS_AUTH_TAG_MISMATCH = &HC000A002
    STATUS_INVALID_STATE_TRANSITION = &HC000A003
    STATUS_INVALID_KERNEL_INFO_VERSION = &HC000A004
    STATUS_INVALID_PEP_INFO_VERSION = &HC000A005
    STATUS_HANDLE_REVOKED = &HC000A006
    STATUS_EOF_ON_GHOSTED_RANGE = &HC000A007
    STATUS_CC_NEEDS_CALLBACK_SECTION_DRAIN = &HC000A008
    /*++
    &Ha010  = - &Ha07f (inclusive) are reserved for TCPIP errors.
     = --*/
    STATUS_IPSEC_QUEUE_OVERFLOW = &HC000A010
    STATUS_ND_QUEUE_OVERFLOW = &HC000A011
    STATUS_HOPLIMIT_EXCEEDED = &HC000A012
    STATUS_PROTOCOL_NOT_SUPPORTED = &HC000A013
    STATUS_FASTPATH_REJECTED = &HC000A014
    /*++
    &Ha014  = - &Ha07f (inclusive) are reserved for TCPIP errors.
     = --*/
    STATUS_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED = &HC000A080
    STATUS_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR = &HC000A081
    STATUS_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR = &HC000A082
    STATUS_XML_PARSE_ERROR = &HC000A083
    STATUS_XMLDSIG_ERROR = &HC000A084
    STATUS_WRONG_COMPARTMENT = &HC000A085
    STATUS_AUTHIP_FAILURE = &HC000A086
    STATUS_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS = &HC000A087
    STATUS_DS_OID_NOT_FOUND = &HC000A088
    STATUS_INCORRECT_ACCOUNT_TYPE = &HC000A089
    STATUS_LOCAL_POLICY_MODIFICATION_NOT_SUPPORTED = &HC000A08A
    STATUS_POLICY_CONTROLLED_ACCOUNT = &HC000A08B
    STATUS_LAPS_LEGACY_SCHEMA_MISSING = &HC000A08C
    STATUS_LAPS_SCHEMA_MISSING = &HC000A08D
    STATUS_LAPS_ENCRYPTION_REQUIRES_2016_DFL = &HC000A08E
    /*++
    &Ha100  = - &Ha120 (inclusive) are for the SMB Hash Generation Service.
    */
    STATUS_HASH_NOT_SUPPORTED = &HC000A100
    STATUS_HASH_NOT_PRESENT = &HC000A101
    /*++
    &Ha121  = - &Ha140 (inclusive) are for GPIO (General Purpose I/O) controller related errors.
     = --*/
    STATUS_SECONDARY_IC_PROVIDER_NOT_REGISTERED = &HC000A121
    STATUS_GPIO_CLIENT_INFORMATION_INVALID = &HC000A122
    STATUS_GPIO_VERSION_NOT_SUPPORTED = &HC000A123
    STATUS_GPIO_INVALID_REGISTRATION_PACKET = &HC000A124
    STATUS_GPIO_OPERATION_DENIED = &HC000A125
    STATUS_GPIO_INCOMPATIBLE_CONNECT_MODE = &HC000A126
    STATUS_GPIO_INTERRUPT_ALREADY_UNMASKED = &H8000A127
    /*++
    &Ha141  = - &Ha160 (inclusive) are for run levels support.
     = --*/
    STATUS_CANNOT_SWITCH_RUNLEVEL = &HC000A141
    STATUS_INVALID_RUNLEVEL_SETTING = &HC000A142
    STATUS_RUNLEVEL_SWITCH_TIMEOUT = &HC000A143
    STATUS_SERVICES_FAILED_AUTOSTART = &H4000A144
    STATUS_RUNLEVEL_SWITCH_AGENT_TIMEOUT = &HC000A145
    STATUS_RUNLEVEL_SWITCH_IN_PROGRESS = &HC000A146
    /*++
    &Ha200  = - &Ha280 (inclusive) are reserved for app container specific messages.
     = --*/
    STATUS_NOT_APPCONTAINER = &HC000A200
    STATUS_NOT_SUPPORTED_IN_APPCONTAINER = &HC000A201
    STATUS_INVALID_PACKAGE_SID_LENGTH = &HC000A202
    STATUS_LPAC_ACCESS_DENIED = &HC000A203
    STATUS_ADMINLESS_ACCESS_DENIED = &HC000A204
    /*++
    &Ha281  = - &Ha2a0 (inclusive) are reserved for Fast Cache specific messages.
     = --*/
    STATUS_APP_DATA_NOT_FOUND = &HC000A281
    STATUS_APP_DATA_EXPIRED = &HC000A282
    STATUS_APP_DATA_CORRUPT = &HC000A283
    STATUS_APP_DATA_LIMIT_EXCEEDED = &HC000A284
    STATUS_APP_DATA_REBOOT_REQUIRED = &HC000A285
    /*++
    &Ha2a1  = - &Ha2dc (inclusive) are for File System specific messages.
     = --*/
    STATUS_OFFLOAD_READ_FLT_NOT_SUPPORTED = &HC000A2A1
    STATUS_OFFLOAD_WRITE_FLT_NOT_SUPPORTED = &HC000A2A2
    STATUS_OFFLOAD_READ_FILE_NOT_SUPPORTED = &HC000A2A3
    STATUS_OFFLOAD_WRITE_FILE_NOT_SUPPORTED = &HC000A2A4
    STATUS_WOF_WIM_HEADER_CORRUPT = &HC000A2A5
    STATUS_WOF_WIM_RESOURCE_TABLE_CORRUPT = &HC000A2A6
    STATUS_WOF_FILE_RESOURCE_TABLE_CORRUPT = &HC000A2A7
    /*++
    &Hc000  = - &Hc0ff (inclusive) are for CimFS specific messages.
     = --*/
    STATUS_CIMFS_IMAGE_CORRUPT = &HC000C001
    STATUS_CIMFS_IMAGE_VERSION_NOT_SUPPORTED = &HC000C002
    /*++
    of  = CimFS specific messages.
     = --*/
    /*++
    &Hce00  = - &Hceff (inclusive) are for File System virtualization specific messages.
     = --*/
    STATUS_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE = &HC000CE01
    STATUS_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT = &HC000CE02
    STATUS_FILE_SYSTEM_VIRTUALIZATION_BUSY = &HC000CE03
    STATUS_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN = &HC000CE04
    STATUS_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION = &HC000CE05
    /*++
    &Hcf00  = - &Hcfff (inclusive) are for Cloud Files specific messages.
     = --*/
    STATUS_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT = &HC000CF00
    STATUS_CLOUD_FILE_PROVIDER_NOT_RUNNING = &HC000CF01
    STATUS_CLOUD_FILE_METADATA_CORRUPT = &HC000CF02
    STATUS_CLOUD_FILE_METADATA_TOO_LARGE = &HC000CF03
    STATUS_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE = &H8000CF04
    STATUS_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS = &H8000CF05
    STATUS_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED = &HC000CF06
    STATUS_NOT_A_CLOUD_FILE = &HC000CF07
    STATUS_CLOUD_FILE_NOT_IN_SYNC = &HC000CF08
    STATUS_CLOUD_FILE_ALREADY_CONNECTED = &HC000CF09
    STATUS_CLOUD_FILE_NOT_SUPPORTED = &HC000CF0A
    STATUS_CLOUD_FILE_INVALID_REQUEST = &HC000CF0B
    STATUS_CLOUD_FILE_READ_ONLY_VOLUME = &HC000CF0C
    STATUS_CLOUD_FILE_CONNECTED_PROVIDER_ONLY = &HC000CF0D
    STATUS_CLOUD_FILE_VALIDATION_FAILED = &HC000CF0E
    STATUS_CLOUD_FILE_AUTHENTICATION_FAILED = &HC000CF0F
    STATUS_CLOUD_FILE_INSUFFICIENT_RESOURCES = &HC000CF10
    STATUS_CLOUD_FILE_NETWORK_UNAVAILABLE = &HC000CF11
    STATUS_CLOUD_FILE_UNSUCCESSFUL = &HC000CF12
    STATUS_CLOUD_FILE_NOT_UNDER_SYNC_ROOT = &HC000CF13
    STATUS_CLOUD_FILE_IN_USE = &HC000CF14
    STATUS_CLOUD_FILE_PINNED = &HC000CF15
    STATUS_CLOUD_FILE_REQUEST_ABORTED = &HC000CF16
    STATUS_CLOUD_FILE_PROPERTY_CORRUPT = &HC000CF17
    STATUS_CLOUD_FILE_ACCESS_DENIED = &HC000CF18
    STATUS_CLOUD_FILE_INCOMPATIBLE_HARDLINKS = &HC000CF19
    STATUS_CLOUD_FILE_PROPERTY_LOCK_CONFLICT = &HC000CF1A
    STATUS_CLOUD_FILE_REQUEST_CANCELED = &HC000CF1B
    STATUS_CLOUD_FILE_PROVIDER_TERMINATED = &HC000CF1D
    STATUS_NOT_A_CLOUD_SYNC_ROOT = &HC000CF1E
    STATUS_CLOUD_FILE_REQUEST_TIMEOUT = &HC000CF1F
    STATUS_CLOUD_FILE_DEHYDRATION_DISALLOWED = &HC000CF20
    STATUS_CLOUD_FILE_US_MESSAGE_TIMEOUT = &HC000CF21
    /*++
    of  = Cloud Files specific messages.
     = --*/
    /*++
    &Hf500  = - &Hf5ff (inclusive) are for File Snap specific messages.
     = --*/
    STATUS_FILE_SNAP_IN_PROGRESS = &HC000F500
    STATUS_FILE_SNAP_USER_SECTION_NOT_SUPPORTED = &HC000F501
    STATUS_FILE_SNAP_MODIFY_NOT_SUPPORTED = &HC000F502
    STATUS_FILE_SNAP_IO_NOT_COORDINATED = &HC000F503
    STATUS_FILE_SNAP_UNEXPECTED_ERROR = &HC000F504
    STATUS_FILE_SNAP_INVALID_PARAMETER = &HC000F505
    /*++
    of  = File Snap specific messages.
     = --*/
    STATUS_UNIONFS_CANNOT_CROSS_UNION = &HC0ED0001
    STATUS_UNIONFS_CANNOT_EXIT_UNION = &HC0ED0002
    STATUS_UNIONFS_CANNOT_PRESERVE_LINK = &HC0ED0003
    STATUS_UNIONFS_INVALID_TOMBSTONE_STATE = &HC0ED0004
    STATUS_UNIONFS_LAYERS_PRESENT = &HC0ED0005
    STATUS_UNIONFS_NESTED_LAYER = &HC0ED0006
    STATUS_UNIONFS_UNION_DUPLICATE_ID = &HC0ED0007
    STATUS_UNIONFS_INACTIVE_UNION = &HC0ED0008
    STATUS_UNIONFS_TOO_MANY_LAYERS = &HC0ED0009
    DBG_NO_STATE_CHANGE = &HC0010001
    DBG_APP_NOT_IDLE = &HC0010002
    RPC_NT_INVALID_STRING_BINDING = &HC0020001
    RPC_NT_WRONG_KIND_OF_BINDING = &HC0020002
    RPC_NT_INVALID_BINDING = &HC0020003
    RPC_NT_PROTSEQ_NOT_SUPPORTED = &HC0020004
    RPC_NT_INVALID_RPC_PROTSEQ = &HC0020005
    RPC_NT_INVALID_STRING_UUID = &HC0020006
    RPC_NT_INVALID_ENDPOINT_FORMAT = &HC0020007
    RPC_NT_INVALID_NET_ADDR = &HC0020008
    RPC_NT_NO_ENDPOINT_FOUND = &HC0020009
    RPC_NT_INVALID_TIMEOUT = &HC002000A
    RPC_NT_OBJECT_NOT_FOUND = &HC002000B
    RPC_NT_ALREADY_REGISTERED = &HC002000C
    RPC_NT_TYPE_ALREADY_REGISTERED = &HC002000D
    RPC_NT_ALREADY_LISTENING = &HC002000E
    RPC_NT_NO_PROTSEQS_REGISTERED = &HC002000F
    RPC_NT_NOT_LISTENING = &HC0020010
    RPC_NT_UNKNOWN_MGR_TYPE = &HC0020011
    RPC_NT_UNKNOWN_IF = &HC0020012
    RPC_NT_NO_BINDINGS = &HC0020013
    RPC_NT_NO_PROTSEQS = &HC0020014
    RPC_NT_CANT_CREATE_ENDPOINT = &HC0020015
    RPC_NT_OUT_OF_RESOURCES = &HC0020016
    RPC_NT_SERVER_UNAVAILABLE = &HC0020017
    RPC_NT_SERVER_TOO_BUSY = &HC0020018
    RPC_NT_INVALID_NETWORK_OPTIONS = &HC0020019
    RPC_NT_NO_CALL_ACTIVE = &HC002001A
    RPC_NT_CALL_FAILED = &HC002001B
    RPC_NT_CALL_FAILED_DNE = &HC002001C
    RPC_NT_PROTOCOL_ERROR = &HC002001D
    RPC_NT_UNSUPPORTED_TRANS_SYN = &HC002001F
    RPC_NT_UNSUPPORTED_TYPE = &HC0020021
    RPC_NT_INVALID_TAG = &HC0020022
    RPC_NT_INVALID_BOUND = &HC0020023
    RPC_NT_NO_ENTRY_NAME = &HC0020024
    RPC_NT_INVALID_NAME_SYNTAX = &HC0020025
    RPC_NT_UNSUPPORTED_NAME_SYNTAX = &HC0020026
    RPC_NT_UUID_NO_ADDRESS = &HC0020028
    RPC_NT_DUPLICATE_ENDPOINT = &HC0020029
    RPC_NT_UNKNOWN_AUTHN_TYPE = &HC002002A
    RPC_NT_MAX_CALLS_TOO_SMALL = &HC002002B
    RPC_NT_STRING_TOO_LONG = &HC002002C
    RPC_NT_PROTSEQ_NOT_FOUND = &HC002002D
    RPC_NT_PROCNUM_OUT_OF_RANGE = &HC002002E
    RPC_NT_BINDING_HAS_NO_AUTH = &HC002002F
    RPC_NT_UNKNOWN_AUTHN_SERVICE = &HC0020030
    RPC_NT_UNKNOWN_AUTHN_LEVEL = &HC0020031
    RPC_NT_INVALID_AUTH_IDENTITY = &HC0020032
    RPC_NT_UNKNOWN_AUTHZ_SERVICE = &HC0020033
    EPT_NT_INVALID_ENTRY = &HC0020034
    EPT_NT_CANT_PERFORM_OP = &HC0020035
    EPT_NT_NOT_REGISTERED = &HC0020036
    RPC_NT_NOTHING_TO_EXPORT = &HC0020037
    RPC_NT_INCOMPLETE_NAME = &HC0020038
    RPC_NT_INVALID_VERS_OPTION = &HC0020039
    RPC_NT_NO_MORE_MEMBERS = &HC002003A
    RPC_NT_NOT_ALL_OBJS_UNEXPORTED = &HC002003B
    RPC_NT_INTERFACE_NOT_FOUND = &HC002003C
    RPC_NT_ENTRY_ALREADY_EXISTS = &HC002003D
    RPC_NT_ENTRY_NOT_FOUND = &HC002003E
    RPC_NT_NAME_SERVICE_UNAVAILABLE = &HC002003F
    RPC_NT_INVALID_NAF_ID = &HC0020040
    RPC_NT_CANNOT_SUPPORT = &HC0020041
    RPC_NT_NO_CONTEXT_AVAILABLE = &HC0020042
    RPC_NT_INTERNAL_ERROR = &HC0020043
    RPC_NT_ZERO_DIVIDE = &HC0020044
    RPC_NT_ADDRESS_ERROR = &HC0020045
    RPC_NT_FP_DIV_ZERO = &HC0020046
    RPC_NT_FP_UNDERFLOW = &HC0020047
    RPC_NT_FP_OVERFLOW = &HC0020048
    RPC_NT_NO_MORE_ENTRIES = &HC0030001
    RPC_NT_SS_CHAR_TRANS_OPEN_FAIL = &HC0030002
    RPC_NT_SS_CHAR_TRANS_SHORT_FILE = &HC0030003
    RPC_NT_SS_IN_NULL_CONTEXT = &HC0030004
    RPC_NT_SS_CONTEXT_MISMATCH = &HC0030005
    RPC_NT_SS_CONTEXT_DAMAGED = &HC0030006
    RPC_NT_SS_HANDLES_MISMATCH = &HC0030007
    RPC_NT_SS_CANNOT_GET_CALL_HANDLE = &HC0030008
    RPC_NT_NULL_REF_POINTER = &HC0030009
    RPC_NT_ENUM_VALUE_OUT_OF_RANGE = &HC003000A
    RPC_NT_BYTE_COUNT_TOO_SMALL = &HC003000B
    RPC_NT_BAD_STUB_DATA = &HC003000C
    RPC_NT_CALL_IN_PROGRESS = &HC0020049
    RPC_NT_NO_MORE_BINDINGS = &HC002004A
    RPC_NT_GROUP_MEMBER_NOT_FOUND = &HC002004B
    EPT_NT_CANT_CREATE = &HC002004C
    RPC_NT_INVALID_OBJECT = &HC002004D
    RPC_NT_NO_INTERFACES = &HC002004F
    RPC_NT_CALL_CANCELLED = &HC0020050
    RPC_NT_BINDING_INCOMPLETE = &HC0020051
    RPC_NT_COMM_FAILURE = &HC0020052
    RPC_NT_UNSUPPORTED_AUTHN_LEVEL = &HC0020053
    RPC_NT_NO_PRINC_NAME = &HC0020054
    RPC_NT_NOT_RPC_ERROR = &HC0020055
    RPC_NT_UUID_LOCAL_ONLY = &H40020056
    RPC_NT_SEC_PKG_ERROR = &HC0020057
    RPC_NT_NOT_CANCELLED = &HC0020058
    RPC_NT_INVALID_ES_ACTION = &HC0030059
    RPC_NT_WRONG_ES_VERSION = &HC003005A
    RPC_NT_WRONG_STUB_VERSION = &HC003005B
    RPC_NT_INVALID_PIPE_OBJECT = &HC003005C
    RPC_NT_INVALID_PIPE_OPERATION = &HC003005D
    RPC_NT_WRONG_PIPE_VERSION = &HC003005E
    RPC_NT_PIPE_CLOSED = &HC003005F
    RPC_NT_PIPE_DISCIPLINE_ERROR = &HC0030060
    RPC_NT_PIPE_EMPTY = &HC0030061
    RPC_NT_INVALID_ASYNC_HANDLE = &HC0020062
    RPC_NT_INVALID_ASYNC_CALL = &HC0020063
    RPC_NT_SEND_INCOMPLETE = &H400200AF
    STATUS_ACPI_INVALID_OPCODE = &HC0140001
    STATUS_ACPI_STACK_OVERFLOW = &HC0140002
    STATUS_ACPI_ASSERT_FAILED = &HC0140003
    STATUS_ACPI_INVALID_INDEX = &HC0140004
    STATUS_ACPI_INVALID_ARGUMENT = &HC0140005
    STATUS_ACPI_FATAL = &HC0140006
    STATUS_ACPI_INVALID_SUPERNAME = &HC0140007
    STATUS_ACPI_INVALID_ARGTYPE = &HC0140008
    STATUS_ACPI_INVALID_OBJTYPE = &HC0140009
    STATUS_ACPI_INVALID_TARGETTYPE = &HC014000A
    STATUS_ACPI_INCORRECT_ARGUMENT_COUNT = &HC014000B
    STATUS_ACPI_ADDRESS_NOT_MAPPED = &HC014000C
    STATUS_ACPI_INVALID_EVENTTYPE = &HC014000D
    STATUS_ACPI_HANDLER_COLLISION = &HC014000E
    STATUS_ACPI_INVALID_DATA = &HC014000F
    STATUS_ACPI_INVALID_REGION = &HC0140010
    STATUS_ACPI_INVALID_ACCESS_SIZE = &HC0140011
    STATUS_ACPI_ACQUIRE_GLOBAL_LOCK = &HC0140012
    STATUS_ACPI_ALREADY_INITIALIZED = &HC0140013
    STATUS_ACPI_NOT_INITIALIZED = &HC0140014
    STATUS_ACPI_INVALID_MUTEX_LEVEL = &HC0140015
    STATUS_ACPI_MUTEX_NOT_OWNED = &HC0140016
    STATUS_ACPI_MUTEX_NOT_OWNER = &HC0140017
    STATUS_ACPI_RS_ACCESS = &HC0140018
    STATUS_ACPI_INVALID_TABLE = &HC0140019
    STATUS_ACPI_REG_HANDLER_FAILED = &HC0140020
    STATUS_ACPI_POWER_REQUEST_FAILED = &HC0140021
    STATUS_CTX_WINSTATION_NAME_INVALID = &HC00A0001
    STATUS_CTX_INVALID_PD = &HC00A0002
    STATUS_CTX_PD_NOT_FOUND = &HC00A0003
    STATUS_CTX_CDM_CONNECT = &H400A0004
    STATUS_CTX_CDM_DISCONNECT = &H400A0005
    STATUS_CTX_CLOSE_PENDING = &HC00A0006
    STATUS_CTX_NO_OUTBUF = &HC00A0007
    STATUS_CTX_MODEM_INF_NOT_FOUND = &HC00A0008
    STATUS_CTX_INVALID_MODEMNAME = &HC00A0009
    STATUS_CTX_RESPONSE_ERROR = &HC00A000A
    STATUS_CTX_MODEM_RESPONSE_TIMEOUT = &HC00A000B
    STATUS_CTX_MODEM_RESPONSE_NO_CARRIER = &HC00A000C
    STATUS_CTX_MODEM_RESPONSE_NO_DIALTONE = &HC00A000D
    STATUS_CTX_MODEM_RESPONSE_BUSY = &HC00A000E
    STATUS_CTX_MODEM_RESPONSE_VOICE = &HC00A000F
    STATUS_CTX_TD_ERROR = &HC00A0010
    STATUS_CTX_LICENSE_CLIENT_INVALID = &HC00A0012
    STATUS_CTX_LICENSE_NOT_AVAILABLE = &HC00A0013
    STATUS_CTX_LICENSE_EXPIRED = &HC00A0014
    STATUS_CTX_WINSTATION_NOT_FOUND = &HC00A0015
    STATUS_CTX_WINSTATION_NAME_COLLISION = &HC00A0016
    STATUS_CTX_WINSTATION_BUSY = &HC00A0017
    STATUS_CTX_BAD_VIDEO_MODE = &HC00A0018
    STATUS_CTX_GRAPHICS_INVALID = &HC00A0022
    STATUS_CTX_NOT_CONSOLE = &HC00A0024
    STATUS_CTX_CLIENT_QUERY_TIMEOUT = &HC00A0026
    STATUS_CTX_CONSOLE_DISCONNECT = &HC00A0027
    STATUS_CTX_CONSOLE_CONNECT = &HC00A0028
    STATUS_CTX_SHADOW_DENIED = &HC00A002A
    STATUS_CTX_WINSTATION_ACCESS_DENIED = &HC00A002B
    STATUS_CTX_INVALID_WD = &HC00A002E
    STATUS_CTX_WD_NOT_FOUND = &HC00A002F
    STATUS_CTX_SHADOW_INVALID = &HC00A0030
    STATUS_CTX_SHADOW_DISABLED = &HC00A0031
    STATUS_RDP_PROTOCOL_ERROR = &HC00A0032
    STATUS_CTX_CLIENT_LICENSE_NOT_SET = &HC00A0033
    STATUS_CTX_CLIENT_LICENSE_IN_USE = &HC00A0034
    STATUS_CTX_SHADOW_ENDED_BY_MODE_CHANGE = &HC00A0035
    STATUS_CTX_SHADOW_NOT_RUNNING = &HC00A0036
    STATUS_PNP_BAD_MPS_TABLE = &HC0040035
    STATUS_PNP_TRANSLATION_FAILED = &HC0040036
    STATUS_PNP_IRQ_TRANSLATION_FAILED = &HC0040037
    STATUS_PNP_INVALID_ID = &HC0040038
    STATUS_SXS_SECTION_NOT_FOUND = &HC0150001
    STATUS_SXS_CANT_GEN_ACTCTX = &HC0150002
    STATUS_SXS_INVALID_ACTCTXDATA_FORMAT = &HC0150003
    STATUS_SXS_ASSEMBLY_NOT_FOUND = &HC0150004
    STATUS_SXS_MANIFEST_FORMAT_ERROR = &HC0150005
    STATUS_SXS_MANIFEST_PARSE_ERROR = &HC0150006
    STATUS_SXS_ACTIVATION_CONTEXT_DISABLED = &HC0150007
    STATUS_SXS_KEY_NOT_FOUND = &HC0150008
    STATUS_SXS_VERSION_CONFLICT = &HC0150009
    STATUS_SXS_WRONG_SECTION_TYPE = &HC015000A
    STATUS_SXS_THREAD_QUERIES_DISABLED = &HC015000B
    STATUS_SXS_ASSEMBLY_MISSING = &HC015000C
    STATUS_SXS_RELEASE_ACTIVATION_CONTEXT = &H4015000D
    STATUS_SXS_PROCESS_DEFAULT_ALREADY_SET = &HC015000E
    STATUS_SXS_EARLY_DEACTIVATION = &HC015000F
    STATUS_SXS_INVALID_DEACTIVATION = &HC0150010
    STATUS_SXS_MULTIPLE_DEACTIVATION = &HC0150011
    STATUS_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY = &HC0150012
    STATUS_SXS_PROCESS_TERMINATION_REQUESTED = &HC0150013
    STATUS_SXS_CORRUPT_ACTIVATION_STACK = &HC0150014
    STATUS_SXS_CORRUPTION = &HC0150015
    STATUS_CLUSTER_INVALID_NODE = &HC0130001
    STATUS_CLUSTER_NODE_EXISTS = &HC0130002
    STATUS_CLUSTER_JOIN_IN_PROGRESS = &HC0130003
    STATUS_CLUSTER_NODE_NOT_FOUND = &HC0130004
    STATUS_CLUSTER_LOCAL_NODE_NOT_FOUND = &HC0130005
    STATUS_CLUSTER_NETWORK_EXISTS = &HC0130006
    STATUS_CLUSTER_NETWORK_NOT_FOUND = &HC0130007
    STATUS_CLUSTER_NETINTERFACE_EXISTS = &HC0130008
    STATUS_CLUSTER_NETINTERFACE_NOT_FOUND = &HC0130009
    STATUS_CLUSTER_INVALID_REQUEST = &HC013000A
    STATUS_CLUSTER_INVALID_NETWORK_PROVIDER = &HC013000B
    STATUS_CLUSTER_NODE_DOWN = &HC013000C
    STATUS_CLUSTER_NODE_UNREACHABLE = &HC013000D
    STATUS_CLUSTER_NODE_NOT_MEMBER = &HC013000E
    STATUS_CLUSTER_JOIN_NOT_IN_PROGRESS = &HC013000F
    STATUS_CLUSTER_INVALID_NETWORK = &HC0130010
    STATUS_CLUSTER_NO_NET_ADAPTERS = &HC0130011
    STATUS_CLUSTER_NODE_UP = &HC0130012
    STATUS_CLUSTER_NODE_PAUSED = &HC0130013
    STATUS_CLUSTER_NODE_NOT_PAUSED = &HC0130014
    STATUS_CLUSTER_NO_SECURITY_CONTEXT = &HC0130015
    STATUS_CLUSTER_NETWORK_NOT_INTERNAL = &HC0130016
    STATUS_CLUSTER_POISONED = &HC0130017
    STATUS_LOG_SECTOR_INVALID = &HC01A0001
    STATUS_LOG_SECTOR_PARITY_INVALID = &HC01A0002
    STATUS_LOG_SECTOR_REMAPPED = &HC01A0003
    STATUS_LOG_BLOCK_INCOMPLETE = &HC01A0004
    STATUS_LOG_INVALID_RANGE = &HC01A0005
    STATUS_LOG_BLOCKS_EXHAUSTED = &HC01A0006
    STATUS_LOG_READ_CONTEXT_INVALID = &HC01A0007
    STATUS_LOG_RESTART_INVALID = &HC01A0008
    STATUS_LOG_BLOCK_VERSION = &HC01A0009
    STATUS_LOG_BLOCK_INVALID = &HC01A000A
    STATUS_LOG_READ_MODE_INVALID = &HC01A000B
    STATUS_LOG_NO_RESTART = &H401A000C
    STATUS_LOG_METADATA_CORRUPT = &HC01A000D
    STATUS_LOG_METADATA_INVALID = &HC01A000E
    STATUS_LOG_METADATA_INCONSISTENT = &HC01A000F
    STATUS_LOG_RESERVATION_INVALID = &HC01A0010
    STATUS_LOG_CANT_DELETE = &HC01A0011
    STATUS_LOG_CONTAINER_LIMIT_EXCEEDED = &HC01A0012
    STATUS_LOG_START_OF_LOG = &HC01A0013
    STATUS_LOG_POLICY_ALREADY_INSTALLED = &HC01A0014
    STATUS_LOG_POLICY_NOT_INSTALLED = &HC01A0015
    STATUS_LOG_POLICY_INVALID = &HC01A0016
    STATUS_LOG_POLICY_CONFLICT = &HC01A0017
    STATUS_LOG_PINNED_ARCHIVE_TAIL = &HC01A0018
    STATUS_LOG_RECORD_NONEXISTENT = &HC01A0019
    STATUS_LOG_RECORDS_RESERVED_INVALID = &HC01A001A
    STATUS_LOG_SPACE_RESERVED_INVALID = &HC01A001B
    STATUS_LOG_TAIL_INVALID = &HC01A001C
    STATUS_LOG_FULL = &HC01A001D
    STATUS_LOG_MULTIPLEXED = &HC01A001E
    STATUS_LOG_DEDICATED = &HC01A001F
    STATUS_LOG_ARCHIVE_NOT_IN_PROGRESS = &HC01A0020
    STATUS_LOG_ARCHIVE_IN_PROGRESS = &HC01A0021
    STATUS_LOG_EPHEMERAL = &HC01A0022
    STATUS_LOG_NOT_ENOUGH_CONTAINERS = &HC01A0023
    STATUS_LOG_CLIENT_ALREADY_REGISTERED = &HC01A0024
    STATUS_LOG_CLIENT_NOT_REGISTERED = &HC01A0025
    STATUS_LOG_FULL_HANDLER_IN_PROGRESS = &HC01A0026
    STATUS_LOG_CONTAINER_READ_FAILED = &HC01A0027
    STATUS_LOG_CONTAINER_WRITE_FAILED = &HC01A0028
    STATUS_LOG_CONTAINER_OPEN_FAILED = &HC01A0029
    STATUS_LOG_CONTAINER_STATE_INVALID = &HC01A002A
    STATUS_LOG_STATE_INVALID = &HC01A002B
    STATUS_LOG_PINNED = &HC01A002C
    STATUS_LOG_METADATA_FLUSH_FAILED = &HC01A002D
    STATUS_LOG_INCONSISTENT_SECURITY = &HC01A002E
    STATUS_COULD_NOT_RESIZE_LOG = &H80190009
    
    STATUS_SMB_NO_PREAUTH_INTEGRITY_HASH_OVERLAP = (&HC05D0000)
'  MessageId: STATUS_SMB_BAD_CLUSTER_DIALECT
'  MessageText:
'  The current cluster functional level does not support this SMB dialect.
    STATUS_SMB_BAD_CLUSTER_DIALECT = (&HC05D0001)
'  MessageId: STATUS_SMB_GUEST_LOGON_BLOCKED
'  MessageText:
'  You can't access this shared folder because your organization's security policies block unauthenticated guest access. These policies help protect your PC from unsafe or malicious devices on the network.
    STATUS_SMB_GUEST_LOGON_BLOCKED = (&HC05D0002)
'  MessageId: STATUS_SMB_NO_SIGNING_ALGORITHM_OVERLAP
'  MessageText:
'  Failed to negotiate a signing hash function.
    STATUS_SMB_NO_SIGNING_ALGORITHM_OVERLAP = (&HC05D0003)
'  MessageId: STATUS_NETWORK_AUTHENTICATION_PROMPT_CANCELED
'  MessageText:
'  The user canceled the authentication prompt to a remote server.
    STATUS_NETWORK_AUTHENTICATION_PROMPT_CANCELED = (&HC05D0004)
    
    
    'HID
    HIDP_STATUS_SUCCESS = &H110000
    HIDP_STATUS_NULL = &H80110001
    HIDP_STATUS_INVALID_PREPARSED_DATA = &Hc0110001
    HIDP_STATUS_INVALID_REPORT_TYPE = &Hc0110002
    HIDP_STATUS_INVALID_REPORT_LENGTH = &Hc0110003
    HIDP_STATUS_USAGE_NOT_FOUND = &Hc0110004
    HIDP_STATUS_VALUE_OUT_OF_RANGE = &Hc0110005
    HIDP_STATUS_BAD_LOG_PHY_VALUES = &Hc0110006
    HIDP_STATUS_BUFFER_TOO_SMALL = &Hc0110007
    HIDP_STATUS_INTERNAL_ERROR = &Hc0110008
    HIDP_STATUS_I8042_TRANS_UNKNOWN = &Hc0110009
    HIDP_STATUS_INCOMPATIBLE_REPORT_ID = &Hc011000a
    HIDP_STATUS_NOT_VALUE_ARRAY = &Hc011000b
    HIDP_STATUS_IS_VALUE_ARRAY = &Hc011000c
    HIDP_STATUS_DATA_INDEX_NOT_FOUND = &Hc011000d
    HIDP_STATUS_DATA_INDEX_OUT_OF_RANGE = &Hc011000e
    HIDP_STATUS_BUTTON_NOT_PRESSED = &Hc011000f
    HIDP_STATUS_REPORT_DOES_NOT_EXIST = &Hc0110010
    HIDP_STATUS_NOT_IMPLEMENTED = &Hc0110020
    HIDP_STATUS_NOT_BUTTON_ARRAY = &Hc0110021
    HIDP_STATUS_I8242_TRANS_UNKNOWN = HIDP_STATUS_I8042_TRANS_UNKNOWN
End Enum

Public Const METHOD_BUFFERED = 0
Public Const METHOD_IN_DIRECT  = 1
Public Const METHOD_OUT_DIRECT  = 2
Public Const METHOD_NEITHER  = 3

Public Const FILE_ANY_ACCESS = &H0
Public Const FILE_READ_ACCESS = &H1
Public Const FILE_WRITE_ACCESS = &H2

Public Type CLIENT_ID
    UniqueProcess As LongPtr
    UniqueThread  As LongPtr
End Type

Public Enum MM_COPY_FLAGS
    MM_COPY_MEMORY_PHYSICAL = &H1
    MM_COPY_MEMORY_VIRTUAL = &H2
End Enum

Public Enum MDL_FLAGS
    MDL_MAPPED_TO_SYSTEM_VA = &H0001
    MDL_PAGES_LOCKED = &H0002
    MDL_SOURCE_IS_NONPAGED_POOL = &H0004
    MDL_ALLOCATED_FIXED_SIZE = &H0008
    MDL_PARTIAL = &H0010
    MDL_PARTIAL_HAS_BEEN_MAPPED = &H0020
    MDL_IO_PAGE_READ = &H0040
    MDL_WRITE_OPERATION = &H0080
    MDL_LOCKED_PAGE_TABLES = &H0100
    MDL_PARENT_MAPPED_SYSTEM_VA = MDL_LOCKED_PAGE_TABLES
    MDL_FREE_EXTRA_PTES = &H0200
    MDL_DESCRIBES_AWE = &H0400
    MDL_IO_SPACE = &H0800
    MDL_NETWORK_HEADER = &H1000
    MDL_MAPPING_CAN_FAIL = &H2000
    MDL_PAGE_CONTENTS_INVARIANT = &H4000
    MDL_ALLOCATED_MUST_SUCCEED = MDL_PAGE_CONTENTS_INVARIANT
    MDL_INTERNAL = &H8000&
    MDL_MAPPING_FLAGS = (MDL_MAPPED_TO_SYSTEM_VA Or MDL_PAGES_LOCKED Or MDL_SOURCE_IS_NONPAGED_POOL Or MDL_PARTIAL_HAS_BEEN_MAPPED Or MDL_PARENT_MAPPED_SYSTEM_VA /* Or MDL_SYSTEM_VA */ Or MDL_IO_SPACE)
End Enum
Public Type MDL
    Next As LongPtr 'PMDL
    Size As Integer
    /* [ TypeHint(MDL_FLAGS) ] */ MdlFlags As Integer
    Process As LongPtr 'PEPROCESS
    MappedSystemVa As LongPtr '/ see creators for field size annotations.
    StartVa As LongPtr '/ see creators for validity; could be address 0.
    ByteCount As Long
    ByteOffset As Long
End Type
Public Enum MM_PAGE_PRIORITY
    LowPagePriority = 0
    NormalPagePriority = 16
    HighPagePriority = 32
End Enum
Public Enum MdlMappingFlags
    MdlMappingNoWrite = &H80000000  ' Create the mapping as nowrite
    MdlMappingNoExecute = &H40000000  ' Create the mapping as noexecute
    MdlMappingWithGuardPtes = &H20000000  ' Create the mapping with guard PTEs
End Enum


Public Type KSYSTEM_TIME
    LowPart As Long '0x0
    High1Time As Long '0x4
    High2Time As Long '0x8
End Type
Public Enum NT_PRODUCT_TYPE
    NtProductWinNt = 1
    NtProductLanManNt = 2
    NtProductServer = 3
End Enum
Public Enum ALTERNATIVE_ARCHITECTURE_TYPE
    StandardDesign = 0
    NEC98x86 = 1
    EndAlternatives = 2
End Enum
Public Type KUSER_SHARED_DATA
    TickCountLowDeprecated As Long '0x0
    TickCountMultiplier As Long '0x4
    InterruptTime As KSYSTEM_TIME '0x8
    SystemTime As KSYSTEM_TIME '0x14
    TimeZoneBias As KSYSTEM_TIME '0x20
    ImageNumberLow As Integer '0x2c
    ImageNumberHigh As Integer '0x2e
    NtSystemRoot(0 To 259) As Integer '0x30
    MaxStackTraceDepth As Long '0x238
    CryptoExponent As Long '0x23c
    TimeZoneId As Long '0x240
    LargePageMinimum As Long '0x244
    Reserved2(0 To 6) As Long '0x248
    NtProductType As NT_PRODUCT_TYPE '0x264
    ProductTypeIsValid As Byte '0x268
    NtMajorVersion As Long '0x26c
    NtMinorVersion As Long '0x270
    ProcessorFeatures(0 To 63) As Byte '0x274
    Reserved1 As Long '0x2b4
    Reserved3 As Long '0x2b8
    TimeSlip As Long '0x2bc
    AlternativeArchitecture As ALTERNATIVE_ARCHITECTURE_TYPE '0x2c0
    SystemExpirationDate As LARGE_INTEGER '0x2c8
    SuiteMask As Long '0x2d0
    KdDebuggerEnabled As Byte '0x2d4
    NXSupportPolicy As Byte '0x2d5
    ActiveConsoleId As Long '0x2d8
    DismountCount As Long '0x2dc
    ComPlusPackage As Long '0x2e0
    LastSystemRITEventTickCount As Long '0x2e4
    NumberOfPhysicalPages As Long '0x2e8
    SafeBootMode As Byte '0x2ec
    TraceLogging As Long '0x2f0
    TestRetInstruction As LongLong '0x2f8
    SystemCall As Long '0x300
    SystemCallReturn As Long '0x304
    SystemCallPad(0 To 2) As LongLong '0x308
    'union
    '{
    '    volatile struct _KSYSTEM_TIME TickCount;                            //0x320
    TickCountQuad As LongLong '0x320
    Pad As LongLong 'Since not using _KSYSTEM_TIME
    '};
    Cookie As Long '0x330
    'Wow64SharedInformation(0 To 15) As Long '0x334
End Type

Public Enum ProcessAccessRights
    PROCESS_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED Or SYNCHRONIZE Or &HFFF&)
    PROCESS_TERMINATE = &H1 ' Enables using the process handle in the TerminateProcess function to terminate the process.
    PROCESS_CREATE_THREAD = &H2   ' Enables using the process handle in the CreateRemoteThread function to create a thread in the process.
    PROCESS_VM_OPERATION = &H8 ' Enables using the process handle in the VirtualProtectEx and WriteProcessMemory functions to modify the virtual memory of the process.
    PROCESS_VM_READ = &H10     ' Enables using the process handle in the ReadProcessMemory function to read from the virtual memory of the process.
    PROCESS_VM_WRITE = &H20 ' Enables using the process handle in the WriteProcessMemory function to write to the virtual memory of the process.
    PROCESS_DUP_HANDLE = &H40   ' Enables using the process handle as either the source or target process in the DuplicateHandle function to duplicate a handle
    PROCESS_CREATE_PROCESS = &H80 ' Required to use this process as the parent process with PROC_THREAD_ATTRIBUTE_PARENT_PROCESS.
    PROCESS_SET_QUOTA = &H100 ' Required to set memory limits using SetProcessWorkingSetSize.
    PROCESS_SET_INFORMATION = &H200 ' Enables using the process handle in the SetPriorityClass function to set the priority class of the process.
    PROCESS_QUERY_INFORMATION = &H400 ' Enables using the process handle in the GetExitCodeProcess and GetPriorityClass functions to read information from the process object.
    PROCESS_SUSPEND_RESUME = &H800 ' Required to suspend or resume a process.
    PROCESS_QUERY_LIMITED_INFORMATION = &H1000 ' Required to retrieve certain information about a process (see GetExitCodeProcess, GetPriorityClass, IsProcessInJob, QueryFullProcessImageName).
End Enum
Public Enum ThreadAccessRights
    THREAD_DIRECT_IMPERSONATION = &H200
    THREAD_GET_CONTEXT = &H8
    THREAD_IMPERSONATE = &H100
    THREAD_QUERY_INFORMATION = &H40
    THREAD_QUERY_LIMITED_INFORMATION = &H800
    THREAD_SET_CONTEXT = &H10
    THREAD_SET_INFORMATION = &H20
    THREAD_SET_LIMITED_INFORMATION = &H400
    THREAD_SET_THREAD_TOKEN = &H80
    THREAD_SUSPEND_RESUME = &H2
    THREAD_TERMINATE = &H1
End Enum

Public Enum PortAccessRights
    PORT_CONNECT = &H0001
    PORT_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED Or SYNCHRONIZE Or &H1)
End Enum

Public Type PORT_MESSAGE
    Length As Long
    ' [ Description("union {" & vbCrLf & _
    '               "  struct{" & vbCrLf & _
    '               "    CSHORT Type;" & vbCrLf & _
    '               "    CSHORT DataInfoOffset;" & vbCrLf & _
    '               "  } s2;" & vbCrLf & _
    '               "  ULONG ZeroInit;" & vbCrLf & _
    '               "}") ]
    u2 As Long
    ClientId As CLIENT_ID
    MessageId As Long
    ClientViewSizeOrCallbackId As LongPtr
End Type
Public Type PORT_DATA_ENTRY
    Base As LongPtr
    Size As Long
End Type
[Description("⚠️ **WARNING:** You cannot use this struct as-is due to SAFEARRAY considerations. Copy the first 4 bytes, determine the size, then copy the rest into bRawData(0) ")]
Public Type PORT_DATA_INFORMATION
    CountDataEntries As Long
    'DataEntries(0 To 0) As PORT_DATA_ENTRY
End Type
Public Enum NT_LPC_MSG_TYPE
    LPC_REQUEST = 1
    LPC_REPLY = 2
    LPC_DATAGRAM = 3
    LPC_LOST_REPLY = 4
    LPC_PORT_CLOSED = 5
    LPC_CLIENT_DIED = 6
    LPC_EXCEPTION = 7
    LPC_DEBUG_EVENT = 8
    LPC_ERROR_EVENT = 9
    LPC_CONNECTION_REQUEST = 10
    LPC_KERNELMODE_MESSAGE = &H8000&
    LPC_NO_IMPERSONATE = &H4000&
End Enum

#If Win64 Then
Public Const PORT_MAXIMUM_MESSAGE_LENGTH = 512
#Else
Public Const PORT_MAXIMUM_MESSAGE_LENGTH = 256
#End If

Public Type LPC_MESSAGE
    DataLength As Integer
    Length As Integer
    /* [ TypeHint(NT_LPC_MSG_TYPE) ] */ MessageType As Integer
    DataInfoOffset As Integer
    ClientId As CLIENT_ID
    MessageId As Long
    CallbackId As Long
End Type
Public Enum HARDERROR_RESPONSE_OPTION
    HardError_OptionAbortRetryIgnore
    HardError_OptionOk
    HardError_OptionOkCancel
    HardError_OptionRetryCancel
    HardError_OptionYesNo
    HardError_OptionYesNoCancel
    HardError_OptionShutdownSystem
End Enum
Public Enum HARDERROR_RESPONSE
    HardError_ResponseReturnToCaller
    HardError_ResponseNotHandled
    HardError_ResponseAbort
    HardError_ResponseCancel
    HardError_ResponseIgnore
    HardError_ResponseNo
    HardError_ResponseOk
    HardError_ResponseRetry
    HardError_ResponseYes
End Enum
Public Const HARDERROR_OVERRIDE_ERRORMODE     = &H10000000


Public Type FAST_MUTEX
    Count As Long
    Owner As LongPtr
    Contention As Long
    Event As KEVENT
    OldIrql As Long
End Type

Private Const szCmKeyObjectType = "CmKeyObjectType"
Private Const szIoFileObjectType = "IoFileObjectType"
Private Const szExEventObjectType = "ExEventObjectType"
Private Const szExSemaphoreObjectType = "ExSemaphoreObjectType"
Private Const szTmTransactionManagerObjectType = "TmTransactionManagerObjectType"
Private Const szTmResourceManagerObjectType = "TmResourceManagerObjectType"
Private Const szTmEnlistmentObjectType = "TmEnlistmentObjectType"
Private Const szTmTransactionObjectType = "TmTransactionObjectType"
Private Const szPsProcessType = "PsProcessType"
Private Const szPsThreadType = "PsThreadType"
Private Const szPsJobType = "PsJobType"
Private Const szSeTokenObjectType = "SeTokenObjectType"
Private Const szExDesktopObjectType = "ExDesktopObjectType"
Private usCmKeyObjectType As UNICODE_STRING
Private usIoFileObjectType As UNICODE_STRING
Private usExEventObjectType As UNICODE_STRING
Private usExSemaphoreObjectType As UNICODE_STRING
Private usTmTransactionManagerObjectType As UNICODE_STRING
Private usTmResourceManagerObjectType As UNICODE_STRING
Private usTmEnlistmentObjectType As UNICODE_STRING
Private usTmTransactionObjectType As UNICODE_STRING
Private usPsProcessType As UNICODE_STRING
Private usPsThreadType As UNICODE_STRING
Private usPsJobType As UNICODE_STRING
Private usSeTokenObjectType As UNICODE_STRING
Private usExDesktopObjectType As UNICODE_STRING


Public Enum PSCNI_Flags
    PSCNI_FILE_OPEN_NAME_AVAILABLE = &H01
    PSCNI_IS_SUBSYSTEM_PROCESS = &H02
End Enum
Public Type PS_CREATE_NOTIFY_INFO
    Size As LongPtr
    Flags As PSCNI_Flags
    ParentProcessId As LongPtr
    CreatingThreadId As CLIENT_ID
    FileObject As LongPtr 'PFILE_OBJECT
    ImageFileName As LongPtr 'PUNICODE_STRING
    CommandLine As LongPtr 'PUNICODE_STRING
    CreationStatus As NTSTATUS 'Read/Write
End Type



Public Enum OB_OPERATION
    OB_OPERATION_HANDLE_CREATE = &H00000001
    OB_OPERATION_HANDLE_DUPLICATE = &H00000002
End Enum

Public Type OB_OPERATION_REGISTRATION
    ObjectType As LongPtr '_In_ POBJECT_TYPE
    Operations As OB_OPERATION
    PreOperation As LongPtr '_In_ POB_PRE_OPERATION_CALLBACK
    PostOperation As LongPtr '_In_ POB_POST_OPERATION_CALLBACK
End Type
Public Type OB_CALLBACK_REGISTRATION
    Version As Integer 'OB_FLT_REGISTRATION_VERSION
    OperationRegistrationCount As Integer
    Altitude As UNICODE_STRING
    RegistrationContext As LongPtr
    OperationRegistration As LongPtr '*OB_OPERATION_REGISTRATION
End Type

Public Type OB_PRE_CREATE_HANDLE_INFORMATION
    /* [ TypeHint(ProcessAccessRights, ThreadAccessRights) ] */ DesiredAccess As ProcessAccessRights
    /* [ TypeHint(ProcessAccessRights, ThreadAccessRights) ] */ OriginalDesiredAccess As ProcessAccessRights
End Type
Public Type OB_PRE_DUPLICATE_HANDLE_INFORMATION
    /* [ TypeHint(ProcessAccessRights, ThreadAccessRights) ] */ DesiredAccess As ProcessAccessRights
    /* [ TypeHint(ProcessAccessRights, ThreadAccessRights) ] */ OriginalDesiredAccess As ProcessAccessRights
    SourceProcess As LongPtr
    TargetProcess As LongPtr
End Type

Public Type OB_PRE_OPERATION_INFORMATION
    Operation As OB_OPERATION
    [Description("This is a union with an undefined flags param and a bitfield with a single bit defined: KernelHandle. I've collapsed this logic to a BOOL, 1 = bit set, 0 = not.")]
    KernelHandle As BOOL
    Object As LongPtr
    ObjectType As LongPtr
    CallContext As LongPtr
    [Description("Union: OB_PRE_DUPLICATE_HANDLE_INFORMATION or OB_PRE_CREATE_HANDLE_INFORMATION")]
    #If Win64 Then
    Parameters(23) As Byte
    #Else
    Parameters(15) As Byte
    #End If
End Type

Public Type OB_POST_CREATE_HANDLE_INFORMATION
    /* [ TypeHint(ProcessAccessRights, ThreadAccessRights) ] */ GrantedAccess As ProcessAccessRights
End Type
Public Type OB_POST_DUPLICATE_HANDLE_INFORMATION
    /* [ TypeHint(ProcessAccessRights, ThreadAccessRights) ] */ GrantedAccess As ProcessAccessRights
End Type
[Description("Since both union options are the same, just provide the member.")]
Public Type OB_POST_OPERATION_PARAMETERS
    /* [ TypeHint(ProcessAccessRights, ThreadAccessRights) ] */ GrantedAccess As ProcessAccessRights
End Type

Public Type OB_POST_OPERATION_INFORMATION
    Operation As OB_OPERATION
    [Description("This is a union with an undefined flags param and a bitfield with a single bit defined: KernelHandle. I've collapsed this logic to a BOOL, 1 = bit set, 0 = not.")]
    KernelHandle As BOOL
    Object As LongPtr
    ObjectType As LongPtr
    CallContext As LongPtr
    ReturnStatus As NTSTATUS
    Parameters As OB_POST_OPERATION_PARAMETERS
End Type

Public Enum OB_PREOP_CALLBACK_STATUS
    OB_PREOP_SUCCESS
End Enum


Public Const OB_FLT_REGISTRATION_VERSION = &H100

Public Type RTL_OSVERSIONINFOW
    dwOSVersionInfoSize As Long
    dwMajorVersion As Long
    dwMinorVersion As Long
    dwBuildNumber As Long
    dwPlatformId As Long
    szCSDVersion(0 To 127) As Integer ' Maintenance string for PSS usage
End Type
Public Type RTL_OSVERSIONINFOEXW
    dwOSVersionInfoSize As Long
    dwMajorVersion As Long
    dwMinorVersion As Long
    dwBuildNumber As Long
    dwPlatformId As Long
    szCSDVersion(0 To 127) As Integer ' Maintenance string for PSS usage
    wServicePackMajor As Integer
    wServicePackMinor As Integer
    wSuiteMask As Integer
    wProductType As Byte
    wReserved As Byte
End Type

Public Enum KPRIORITY
    LOW_PRIORITY = 0  ' Lowest thread priority level
    LOW_REALTIME_PRIORITY = 16  ' Lowest realtime priority level
    HIGH_PRIORITY = 31  ' Highest thread priority level
    MAXIMUM_PRIORITY = 32  ' Number of thread priority levels
End Enum

Public Enum MEMORY_CACHING_TYPE
    MmNonCached
    MmCached
    MmWriteCombined
    MmHardwareCoherentCached
    MmNonCachedUnordered
    MmUSWCCached
    MmMaximumCacheType
    MmNotMapped
End Enum

[Description("NOTE: Windows 10+ only")]
Public Enum PSCREATETHREADNOTIFYTYPE
    PsCreateThreadNotifyNonSystem = 0
    PsCreateThreadNotifySubsystems = 1
End Enum

Public Type IMAGE_INFO
    ImageBase As LongPtr
' union {
    ' ULONG Properties;
    ' struct {
        ' ULONG ImageAddressingMode  : 8;  // Code addressing mode
        ' ULONG SystemModeImage      : 1;  // System mode image
        ' ULONG ImageMappedToAllPids : 1;  // Image mapped into all processes
        ' ULONG ExtendedInfoPresent  : 1;  // IMAGE_INFO_EX available
        ' ULONG MachineTypeMismatch  : 1;  // Architecture type mismatch
        ' ULONG ImageSignatureLevel  : 4;  // Signature level
        ' ULONG ImageSignatureType   : 3;  // Signature type
        ' ULONG ImagePartialMap      : 1;  // Nonzero if entire image is not mapped
        ' ULONG Reserved             : 12;
    ' };
' };
    Properties As Long
    ImageSelector As Long
    ImageSize As LongPtr
    ImageSectionNumber As Long
End Type
Public Type IMAGE_INFO_EX
    Size As LongPtr
    ImageInfo As IMAGE_INFO
    FileObject As LongPtr '*struct _FILE_OBJECT
End Type

Public Enum REG_NOTIFY_CLASS
    RegNtDeleteKey
    RegNtPreDeleteKey = RegNtDeleteKey
    RegNtSetValueKey
    RegNtPreSetValueKey = RegNtSetValueKey
    RegNtDeleteValueKey
    RegNtPreDeleteValueKey = RegNtDeleteValueKey
    RegNtSetInformationKey
    RegNtPreSetInformationKey = RegNtSetInformationKey
    RegNtRenameKey
    RegNtPreRenameKey = RegNtRenameKey
    RegNtEnumerateKey
    RegNtPreEnumerateKey = RegNtEnumerateKey
    RegNtEnumerateValueKey
    RegNtPreEnumerateValueKey = RegNtEnumerateValueKey
    RegNtQueryKey
    RegNtPreQueryKey = RegNtQueryKey
    RegNtQueryValueKey
    RegNtPreQueryValueKey = RegNtQueryValueKey
    RegNtQueryMultipleValueKey
    RegNtPreQueryMultipleValueKey = RegNtQueryMultipleValueKey
    RegNtPreCreateKey
    RegNtPostCreateKey
    RegNtPreOpenKey
    RegNtPostOpenKey
    RegNtKeyHandleClose
    RegNtPreKeyHandleClose = RegNtKeyHandleClose
    '
    ' .Net only
    '    
    RegNtPostDeleteKey
    RegNtPostSetValueKey
    RegNtPostDeleteValueKey
    RegNtPostSetInformationKey
    RegNtPostRenameKey
    RegNtPostEnumerateKey
    RegNtPostEnumerateValueKey
    RegNtPostQueryKey
    RegNtPostQueryValueKey
    RegNtPostQueryMultipleValueKey
    RegNtPostKeyHandleClose
    RegNtPreCreateKeyEx
    RegNtPostCreateKeyEx
    RegNtPreOpenKeyEx
    RegNtPostOpenKeyEx
    '
    ' new to Windows Vista
    '
    RegNtPreFlushKey
    RegNtPostFlushKey
    RegNtPreLoadKey
    RegNtPostLoadKey
    RegNtPreUnLoadKey
    RegNtPostUnLoadKey
    RegNtPreQueryKeySecurity
    RegNtPostQueryKeySecurity
    RegNtPreSetKeySecurity
    RegNtPostSetKeySecurity
    '
    ' per-object context cleanup
    '
    RegNtCallbackObjectContextCleanup
    '
    ' new in Vista SP2 
    '
    RegNtPreRestoreKey
    RegNtPostRestoreKey
    RegNtPreSaveKey
    RegNtPostSaveKey
    RegNtPreReplaceKey
    RegNtPostReplaceKey
    '
    ' new to Windows 10
    '
    RegNtPreQueryKeyName
    RegNtPostQueryKeyName
    RegNtPreSaveMergedKey
    RegNtPostSaveMergedKey

    MaxRegNtNotifyClass 'should always be the last enum
End Enum

Public Type REG_DELETE_KEY_INFORMATION
    Object As LongPtr ' IN
    CallContext As LongPtr ' new to Windows Vista
    ObjectContext As LongPtr ' new to Windows Vista
    Reserved As LongPtr ' new to Windows Vista
End Type
'Alias REG_FLUSH_KEY_INFORMATION As REG_DELETE_KEY_INFORMATION
Public Type REG_FLUSH_KEY_INFORMATION
    Object As LongPtr ' IN
    CallContext As LongPtr ' new to Windows Vista
    ObjectContext As LongPtr ' new to Windows Vista
    Reserved As LongPtr ' new to Windows Vista
End Type

Public Type REG_SET_VALUE_KEY_INFORMATION
    Object As LongPtr ' IN
    ValueName As LongPtr 'PUNICODE_STRING ' IN
    TitleIndex As Long ' IN
    Type As Long ' IN
    Data As LongPtr ' IN
    DataSize As Long ' IN
    CallContext As LongPtr ' new to Windows Vista
    ObjectContext As LongPtr ' new to Windows Vista
    Reserved As LongPtr ' new to Windows Vista
End Type

Public Type REG_DELETE_VALUE_KEY_INFORMATION
    Object As LongPtr ' IN
    ValueName As LongPtr ' PUNICODE_STRING ' IN
    CallContext As LongPtr ' new to Windows Vista
    ObjectContext As LongPtr ' new to Windows Vista
    Reserved As LongPtr ' new to Windows Vista
End Type

Public Enum KEY_SET_INFORMATION_CLASS
    KeyWriteTimeInformation
    KeyWow64FlagsInformation
    KeyControlFlagsInformation
    KeySetVirtualizationInformation
    KeySetDebugInformation
    KeySetHandleTagsInformation
    KeySetLayerInformation
    MaxKeySetInfoClass  ' MaxKeySetInfoClass should always be the last enum
End Enum
Public Enum KEY_INFORMATION_CLASS
    KeyBasicInformation
    KeyNodeInformation
    KeyFullInformation
    KeyNameInformation
    KeyCachedInformation
    KeyFlagsInformation
    KeyVirtualizationInformation
    KeyHandleTagsInformation
    KeyTrustInformation
    KeyLayerInformation
    MaxKeyInfoClass  ' MaxKeyInfoClass should always be the last enum
End Enum
Public Enum KEY_VALUE_INFORMATION_CLASS
    KeyValueBasicInformation
    KeyValueFullInformation
    KeyValuePartialInformation
    KeyValueFullInformationAlign64
    KeyValuePartialInformationAlign64
    KeyValueLayerInformation
    MaxKeyValueInfoClass
End Enum


Public Type REG_SET_INFORMATION_KEY_INFORMATION
    Object As LongPtr ' IN
    KeySetInformationClass As KEY_SET_INFORMATION_CLASS ' IN
    KeySetInformation As LongPtr ' IN
    KeySetInformationLength As Long ' IN
    CallContext As LongPtr ' new to Windows Vista
    ObjectContext As LongPtr ' new to Windows Vista
    Reserved As LongPtr ' new to Windows Vista
End Type

Public Type REG_ENUMERATE_KEY_INFORMATION
    Object As LongPtr ' IN
    Index As Long ' IN
    KeyInformationClass As KEY_INFORMATION_CLASS ' IN
    KeyInformation As LongPtr ' IN
    Length As Long ' IN
    ResultLength As LongPtr ' OUT
    CallContext As LongPtr ' new to Windows Vista
    ObjectContext As LongPtr ' new to Windows Vista
    Reserved As LongPtr ' new to Windows Vista
End Type

Public Type REG_ENUMERATE_VALUE_KEY_INFORMATION
    Object As LongPtr ' IN
    Index As Long ' IN
    KeyValueInformationClass As KEY_VALUE_INFORMATION_CLASS ' IN
    KeyValueInformation As LongPtr ' IN
    Length As Long ' IN
    ResultLength As LongPtr ' OUT
    CallContext As LongPtr ' new to Windows Vista
    ObjectContext As LongPtr ' new to Windows Vista
    Reserved As LongPtr ' new to Windows Vista
End Type

Public Type REG_QUERY_KEY_INFORMATION
    Object As LongPtr ' IN
    KeyInformationClass As KEY_INFORMATION_CLASS ' IN
    KeyInformation As LongPtr ' IN
    Length As Long ' IN
    ResultLength As LongPtr ' OUT
    CallContext As LongPtr ' new to Windows Vista
    ObjectContext As LongPtr ' new to Windows Vista
    Reserved As LongPtr ' new to Windows Vista
End Type

Public Type REG_QUERY_VALUE_KEY_INFORMATION
    Object As LongPtr ' IN
    ValueName As LongPtr 'PUNICODE_STRING ' IN
    KeyValueInformationClass As KEY_VALUE_INFORMATION_CLASS ' IN
    KeyValueInformation As LongPtr ' IN
    Length As Long ' IN
    ResultLength As LongPtr ' OUT
    CallContext As LongPtr ' new to Windows Vista
    ObjectContext As LongPtr ' new to Windows Vista
    Reserved As LongPtr ' new to Windows Vista
End Type

Public Type REG_QUERY_MULTIPLE_VALUE_KEY_INFORMATION
    Object As LongPtr ' IN
    ValueEntries As LongPtr 'PKEY_VALUE_ENTRY ' IN
    EntryCount As Long ' IN
    ValueBuffer As LongPtr ' IN
    BufferLength As LongPtr ' IN OUT
    RequiredBufferLength As LongPtr ' OUT
    CallContext As LongPtr ' new to Windows Vista
    ObjectContext As LongPtr ' new to Windows Vista
    Reserved As LongPtr ' new to Windows Vista
End Type

Public Enum REGSAM
    KEY_QUERY_VALUE = &H0001
    KEY_SET_VALUE = &H0002
    KEY_CREATE_SUB_KEY = &H0004
    KEY_ENUMERATE_SUB_KEYS = &H0008
    KEY_NOTIFY = &H0010
    KEY_CREATE_LINK = &H0020
    KEY_WOW64_64KEY = &H0100
    KEY_WOW64_32KEY = &H0200
    KEY_READ = &H00020019
    KEY_WRITE = &H00020006
    KEY_EXECUTE = &H00020019
    KEY_ALL_ACCESS = &H000F003F
End Enum

Public Enum REGTYPES
    REG_NONE = 0
    REG_SZ = 1
    REG_EXPAND_SZ = 2
    REG_BINARY = 3
    REG_DWORD = 4
    REG_DWORD_BIG_ENDIAN = 5
    REG_DWORD_LITTLE_ENDIAN = 4
    REG_LINK = 6
    REG_MULTI_SZ = 7
    REG_RESOURCE_LIST = 8
    REG_FULL_RESOURCE_DESCRIPTOR = 9
    REG_RESOURCE_REQUIREMENTS_LIST = &HA
    REG_QWORD = &HB
    REG_QWORD_LITTLE_ENDIAN = &HB
End Enum


[Description("WARNING: Buffer substituted for variable C-style array.")]
Public Type KEY_VALUE_BASIC_INFORMATION
    TitleIndex As Long
    Type As Long
    NameLength As Long
    Name(0 To 511) As Integer
End Type

[Description("WARNING: Header only.")]
Public Type KEY_VALUE_FULL_INFORMATION
    TitleIndex As Long
    Type As Long
    DataOffset As Long
    DataLength As Long
    NameLength As Long
End Type

[Description("WARNING: Buffer substituted for variable C-style array.")]
Public Type KEY_VALUE_PARTIAL_INFORMATION
    TitleIndex As Long
    Type As Long
    DataLength As Long
    Data(0 To 4095) As Byte
End Type
[Description("WARNING: Buffer substituted for variable C-style array.")]
Public Type KEY_VALUE_PARTIAL_INFORMATION_ALIGN64
    Type As Long
    DataLength As Long
    Data(0 To 4095) As Byte
End Type



Public Type KEY_VALUE_LAYER_INFORMATION
    IsTombstone As Long
End Type

Public Type KEY_VALUE_ENTRY
    ValueName As LongPtr 'PUNICODE_STRING
    DataLength As Long
    DataOffset As Long
    Type As REGTYPES
End Type

Public Type REG_RENAME_KEY_INFORMATION
    Object As LongPtr ' IN
    NewName As LongPtr 'PUNICODE_STRING ' IN
    CallContext As LongPtr ' new to Windows Vista
    ObjectContext As LongPtr ' new to Windows Vista
    Reserved As LongPtr ' new to Windows Vista
End Type

Public Type REG_KEY_HANDLE_CLOSE_INFORMATION
    Object As LongPtr ' IN
    CallContext As LongPtr ' new to Windows Vista
    ObjectContext As LongPtr ' new to Windows Vista
    Reserved As LongPtr ' new to Windows Vista
End Type

Public Type REG_LOAD_KEY_INFORMATION
    Object As LongPtr
    KeyName As LongPtr 'PUNICODE_STRING
    SourceFile As LongPtr 'PUNICODE_STRING
    Flags As Long
    TrustClassObject As LongPtr
    UserEvent As LongPtr
    DesiredAccess As REGSAM 'ACCESS_MASK
    RootHandle As LongPtr
    CallContext As LongPtr
    ObjectContext As LongPtr
    Reserved As LongPtr
End Type

Public Type REG_UNLOAD_KEY_INFORMATION
    Object As LongPtr
    UserEvent As LongPtr
    CallContext As LongPtr
    ObjectContext As LongPtr
    Reserved As LongPtr
End Type

Public Type REG_CALLBACK_CONTEXT_CLEANUP_INFORMATION
    Object As LongPtr
    ObjectContext As LongPtr
    Reserved As LongPtr
End Type

Public Type REG_QUERY_KEY_SECURITY_INFORMATION
    Object As LongPtr
    SecurityInformation As LongPtr 'PSECURITY_INFORMATION ' IN
    SecurityDescriptor As LongPtr 'PSECURITY_DESCRIPTOR ' INOUT  
    Length As LongPtr ' INOUT  
    CallContext As LongPtr
    ObjectContext As LongPtr
    Reserved As LongPtr
End Type

Public Type REG_SET_KEY_SECURITY_INFORMATION
    Object As LongPtr
    SecurityInformation As LongPtr 'PSECURITY_INFORMATION ' IN
    SecurityDescriptor As LongPtr 'PSECURITY_DESCRIPTOR ' IN
    CallContext As LongPtr
    ObjectContext As LongPtr
    Reserved As LongPtr
End Type

Public Type REG_RESTORE_KEY_INFORMATION
    Object As LongPtr
    FileHandle As LongPtr
    Flags As Long
    CallContext As LongPtr
    ObjectContext As LongPtr
    Reserved As LongPtr
End Type

Public Enum RegSaveKeyFlags
    REG_STANDARD_FORMAT = 1
    REG_LATEST_FORMAT = 2
    REG_NO_COMPRESSION = 4
End Enum

Public Enum RegKeyRestoreAndLoadHiveFlags
    REG_WHOLE_HIVE_VOLATILE = (&H00000001) ' Restore whole hive volatile
    REG_REFRESH_HIVE = (&H00000002) ' Unwind changes to last flush
    REG_NO_LAZY_FLUSH = (&H00000004) ' Never lazy flush this hive
    REG_FORCE_RESTORE = (&H00000008) ' Force the restore process even when we have open handles on subkeys
    REG_APP_HIVE = (&H00000010) ' Loads the hive visible to the calling process
    REG_PROCESS_PRIVATE = (&H00000020) ' Hive cannot be mounted by any other process while in use
    REG_START_JOURNAL = (&H00000040) ' Starts Hive Journal
    REG_HIVE_EXACT_FILE_GROWTH = (&H00000080) ' Grow hive file in exact 4k increments
    REG_HIVE_NO_RM = (&H00000100) ' No RM is started for this hive (no transactions)
    REG_HIVE_SINGLE_LOG = (&H00000200) ' Legacy single logging is used for this hive
    REG_BOOT_HIVE = (&H00000400) ' This hive might be used by the OS loader
    REG_LOAD_HIVE_OPEN_HANDLE = (&H00000800) ' Load the hive and return a handle to its root kcb
    REG_FLUSH_HIVE_FILE_GROWTH = (&H00001000) ' Flush changes to primary hive file size as part of all flushes
    REG_OPEN_READ_ONLY = (&H00002000) ' Open a hive's files in read-only mode
    REG_IMMUTABLE = (&H00004000) ' Load the hive, but don't allow any modification of it
    REG_NO_IMPERSONATION_FALLBACK = (&H00008000&) ' Do not fall back to impersonating the caller if hive file access fails
    REG_APP_HIVE_OPEN_READ_ONLY = (REG_OPEN_READ_ONLY)  ' Open an app hive's files in read-only mode (if the hive was not previously loaded)
End Enum

Public Type REG_SAVE_KEY_INFORMATION
    Object As LongPtr
    FileHandle As LongPtr
    Format As RegSaveKeyFlags
    CallContext As LongPtr
    ObjectContext As LongPtr
    Reserved As LongPtr
End Type

Public Type REG_REPLACE_KEY_INFORMATION
    Object As LongPtr
    OldFileName As LongPtr 'PUNICODE_STRING
    NewFileName As LongPtr 'PUNICODE_STRING
    CallContext As LongPtr
    ObjectContext As LongPtr
    Reserved As LongPtr
End Type

Public Type REG_QUERY_KEY_NAME
    Object As LongPtr
    ObjectNameInfo As LongPtr 'POBJECT_NAME_INFORMATION
    Length As Long
    ReturnLength As LongPtr
    CallContext As LongPtr
    ObjectContext As LongPtr
    Reserved As LongPtr
End Type

[Description("Custom flag set to represent a bitfield.")]
Public Enum OwnerEntryFlags
    OEF_IoPriorityBoosted = &H1
    OEF_OwnerReferenced = &H2
    OEF_IoQoSPriorityBoosted = &H4
End Enum
Public Type OWNER_ENTRY
    OwnerThread As LongPtr
    ' union {
        ' struct {
            ' ULONG IoPriorityBoosted : 1;
            ' ULONG OwnerReferenced   : 1;
            ' ULONG IoQoSPriorityBoosted : 1;
            ' ULONG OwnerCount        : 29;
        ' };
        ' ULONG TableSize;
    TableSizeOrFlags As Long
End Type
Public Enum EResFlags
    ' union {
        ' USHORT Flag;
        ' struct {
            ' UCHAR ReservedLowFlags;
            ' UCHAR WaiterPriority;
        ' };
    ' };
    ReservedLowFlags = &H1
    WaiterPriority = &H2
    ResourceNeverExclusive = &H0010
    ResourceReleaseByOtherThread = &H0020
    ResourceOwnedExclusive = &H0080
End Enum
Public Type ERESOURCE
    SystemResourcesList As LIST_ENTRY
    OwnerTable As LongPtr 'POWNER_ENTRY
    ActiveCount As Integer
    /* [ TypeHint(EResFlags) */ Flag As Integer
    SharedWaiters As LongPtr
    ExclusiveWaiters As LongPtr
    OwnerEntry As OWNER_ENTRY
    ActiveEntries As Long
    ContentionCount As Long
    NumberOfSharedWaiters As Long
    NumberOfExclusiveWaiters As Long
    #If Win64 Then
        Reserved2 As LongPtr
    #End If
    ' union {
        ' PVOID Address;
        ' ULONG_PTR CreatorBackTraceIndex;
    ' };
    AddressOrCreatorBTIdx As LongPtr
    SpinLock As LongPtr 'KSPIN_LOCK
End Type

Public Const RESOURCE_HASH_TABLE_SIZE = 64
Public Type RESOURCE_HASH_ENTRY
    ListEntry As LIST_ENTRY
    Address As LongPtr
    ContentionCount As Long
    Number As Long
End Type
Public Type RESOURCE_PERFORMANCE_DATA
    ActiveResourceCount As Long
    TotalResourceCount As Long
    ExclusiveAcquire As Long
    SharedFirstLevel As Long
    SharedSecondLevel As Long
    StarveFirstLevel As Long
    StarveSecondLevel As Long
    WaitForExclusive As Long
    OwnerTableExpands As Long
    MaximumTableExpand As Long
    HashTable(0 To (RESOURCE_HASH_TABLE_SIZE - 1)) As LIST_ENTRY
End Type

[Description("Highly variable struct; rely on only members marked ok in comments.")]
Public Type KLDR_DATA_TABLE_ENTRY
    InLoadOrderLinks As LIST_ENTRY 'OK
    ExceptionTable As LongPtr
    ExceptionTableSize As Long
    GpValue As LongPtr
    NonPagedDebugInfo As LongPtr '_NON_PAGED_DEBUG_INFO*
    DllBase As LongPtr 'OK
    EntryPoint As LongPtr 'OK
    SizeOfImage As Long 'OK
    FullDllName As UNICODE_STRING 'OK
    BaseDllName As UNICODE_STRING 'OK
    Flags As Long 'OK
    LoadCount As Integer 'OK
    'Highly volatile between versions below this point
End Type

Public Enum DuplicateObjectOptions
    DUPLICATE_CLOSE_SOURCE = &H00000001
    DUPLICATE_SAME_ACCESS = &H00000002
    DUPLICATE_SAME_ATTRIBUTES = &H00000004
End Enum

Public Enum ReparseDataExFlags
    REPARSE_DATA_EX_FLAG_GIVEN_TAG_OR_NONE = &H00000001
End Enum

Public Enum IoCreateFileFlags
    IO_FORCE_ACCESS_CHECK = &H0001
    IO_OPEN_PAGING_FILE = &H0002
    IO_OPEN_TARGET_DIRECTORY = &H0004
    IO_STOP_ON_SYMLINK = &H0008
    IO_MM_PAGING_FILE = &H0010
    IO_IGNORE_READONLY_ATTRIBUTE = &H0040
    IO_NO_PARAMETER_CHECKING = &H0100
    IO_CHECK_CREATE_PARAMETERS = &H0200
    IO_ATTACH_DEVICE = &H0400
'   This flag is only meaningful to IoCreateFileSpecifyDeviceObjectHint.
'   FileHandles created using IoCreateFileSpecifyDeviceObjectHint with this
'   flag set will bypass ShareAccess checks on this file.
    IO_IGNORE_SHARE_ACCESS_CHECK = &H0800  ' Ignores share access checks on opens.
End Enum

Public Const IO_REPARSE  = &H0
Public Const IO_REMOUNT  = &H1
Public Const IO_REPARSE_GLOBAL  = &H2


Public Type IO_DRIVER_CREATE_CONTEXT
    Size As Integer
    ExtraCreateParameter As LongPtr 'struct _ECP_LIST
    DeviceObjectHint As LongPtr
    TxnParameters As LongPtr 'PTXN_PARAMETER_BLOCK
    #If NTDDI_VERSION >= NTDDI_WIN10_RS1 Then
    SiloContext As LongPtr 'PESILO
    #End If
End Type

Public Type IO_SECURITY_CONTEXT
    SecurityQos As LongPtr 'PSECURITY_QUALITY_OF_SERVICE
    AccessState As LongPtr 'PACCESS_STATE
    DesiredAccess As Long 'ACCESS_MASK
    FullCreateOptions As Long
End Type


Public Const INITIAL_PRIVILEGE_COUNT = 3

Public Type INITIAL_PRIVILEGE_SET
    PrivilegeCount As Long
    Control As Long
    Privilege(0 To (INITIAL_PRIVILEGE_COUNT - 1)) As LUID_AND_ATTRIBUTES
End Type

Public Type SECURITY_SUBJECT_CONTEXT
    ClientToken As LongPtr 'PACCESS_TOKEN
    ImpersonationLevel As SECURITY_IMPERSONATION_LEVEL
    PrimaryToken As LongPtr 'PACCESS_TOKEN
    ProcessAuditId As LongPtr
End Type
Public Enum TokenAccessStateFlags
    TOKEN_HAS_TRAVERSE_PRIVILEGE = &H0001
    TOKEN_HAS_BACKUP_PRIVILEGE = &H0002
    TOKEN_HAS_RESTORE_PRIVILEGE = &H0004
    TOKEN_WRITE_RESTRICTED = &H0008
    TOKEN_IS_RESTRICTED = &H0010
    TOKEN_SESSION_NOT_REFERENCED = &H0020
    TOKEN_SANDBOX_INERT = &H0040
    TOKEN_HAS_IMPERSONATE_PRIVILEGE = &H0080
    SE_BACKUP_PRIVILEGES_CHECKED = &H0100
    TOKEN_VIRTUALIZE_ALLOWED = &H0200
    TOKEN_VIRTUALIZE_ENABLED = &H0400
    TOKEN_IS_FILTERED = &H0800
    TOKEN_UIACCESS = &H1000
    TOKEN_NOT_LOW = &H2000
    TOKEN_LOWBOX = &H4000
    TOKEN_HAS_OWN_CLAIM_ATTRIBUTES = &H8000&
    TOKEN_PRIVATE_NAMESPACE = &H00010000
    TOKEN_DO_NOT_USE_GLOBAL_ATTRIBS_FOR_QUERY = &H00020000
    SPECIAL_ENCRYPTED_OPEN = &H00040000
    TOKEN_NO_CHILD_PROCESS = &H00080000
    TOKEN_NO_CHILD_PROCESS_UNLESS_SECURE = &H00100000
    TOKEN_AUDIT_NO_CHILD_PROCESS = &H00200000
    TOKEN_ENFORCE_REDIRECTION_TRUST = &H00400000
    TOKEN_AUDIT_REDIRECTION_TRUST = &H00800000
'  TOKEN_PERMISSIVE_LEARNING_MODE implies TOKEN_LEARNING_MODE_LOGGING
    TOKEN_LEARNING_MODE_LOGGING = &H01000000
    TOKEN_PERMISSIVE_LEARNING_MODE = &H03000000
    TOKEN_INHERIT_SECURITY_FLAGS = (TOKEN_NO_CHILD_PROCESS Or TOKEN_NO_CHILD_PROCESS_UNLESS_SECURE Or TOKEN_AUDIT_NO_CHILD_PROCESS)
End Enum
Public Const SECURITY_DESCRIPTOR_DO_NOT_FREE = &H04000000

Public Enum SEF_FLAGS
    SEF_DACL_AUTO_INHERIT = &H01
    SEF_SACL_AUTO_INHERIT = &H02
    SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT = &H04
    SEF_AVOID_PRIVILEGE_CHECK = &H08
    SEF_AVOID_OWNER_CHECK = &H10
    SEF_DEFAULT_OWNER_FROM_PARENT = &H20
    SEF_DEFAULT_GROUP_FROM_PARENT = &H40
    SEF_MACL_NO_WRITE_UP = &H100
    SEF_MACL_NO_READ_UP = &H200
    SEF_MACL_NO_EXECUTE_UP = &H400
    SEF_AI_USE_EXTRA_PARAMS = &H800
    SEF_AVOID_OWNER_RESTRICTION = &H1000
    SEF_FORCE_USER_MODE = &H2000
    SEF_NORMALIZE_OUTPUT_DESCRIPTOR = &H4000
    SEF_MACL_VALID_FLAGS = (SEF_MACL_NO_WRITE_UP Or SEF_MACL_NO_READ_UP Or SEF_MACL_NO_EXECUTE_UP)
End Enum

Public Type ACCESS_STATE
    OperationID As LUID ' Currently unused, replaced by TransactionId in AUX_ACCESS_DATA
    SecurityEvaluated As Byte
    GenerateAudit As Byte
    GenerateOnClose As Byte
    PrivilegesAllocated As Byte
    Flags As TokenAccessStateFlags
    RemainingDesiredAccess As Long 'ACCESS_MASK
    PreviouslyGrantedAccess As Long 'ACCESS_MASK
    OriginalDesiredAccess As Long 'ACCESS_MASK
    SubjectSecurityContext As SECURITY_SUBJECT_CONTEXT
    SecurityDescriptor As LongPtr 'PSECURITY_DESCRIPTOR ' it stores SD supplied by caller when creating a new object.
    AuxData As LongPtr
    '   union {
    '      INITIAL_PRIVILEGE_SET InitialPrivilegeSet;
    '      PRIVILEGE_SET PrivilegeSet;
    '      } Privileges;
    Privileges As INITIAL_PRIVILEGE_SET
    AuditPrivileges As Byte
    ObjectName As UNICODE_STRING
    ObjectTypeName As UNICODE_STRING
End Type

Public Enum DbgPrntLevels
    DPFLTR_ERROR_LEVEL = 0
    DPFLTR_WARNING_LEVEL = 1
    DPFLTR_TRACE_LEVEL = 2
    DPFLTR_INFO_LEVEL = 3
    DPFLTR_MASK = &H80000000
End Enum
Public Enum DPFLTR_TYPE
    DPFLTR_SYSTEM_ID = 0
    DPFLTR_SMSS_ID = 1
    DPFLTR_SETUP_ID = 2
    DPFLTR_NTFS_ID = 3
    DPFLTR_FSTUB_ID = 4
    DPFLTR_CRASHDUMP_ID = 5
    DPFLTR_CDAUDIO_ID = 6
    DPFLTR_CDROM_ID = 7
    DPFLTR_CLASSPNP_ID = 8
    DPFLTR_DISK_ID = 9
    DPFLTR_REDBOOK_ID = 10
    DPFLTR_STORPROP_ID = 11
    DPFLTR_SCSIPORT_ID = 12
    DPFLTR_SCSIMINIPORT_ID = 13
    DPFLTR_CONFIG_ID = 14
    DPFLTR_I8042PRT_ID = 15
    DPFLTR_SERMOUSE_ID = 16
    DPFLTR_LSERMOUS_ID = 17
    DPFLTR_KBDHID_ID = 18
    DPFLTR_MOUHID_ID = 19
    DPFLTR_KBDCLASS_ID = 20
    DPFLTR_MOUCLASS_ID = 21
    DPFLTR_TWOTRACK_ID = 22
    DPFLTR_WMILIB_ID = 23
    DPFLTR_ACPI_ID = 24
    DPFLTR_AMLI_ID = 25
    DPFLTR_HALIA64_ID = 26
    DPFLTR_VIDEO_ID = 27
    DPFLTR_SVCHOST_ID = 28
    DPFLTR_VIDEOPRT_ID = 29
    DPFLTR_TCPIP_ID = 30
    DPFLTR_DMSYNTH_ID = 31
    DPFLTR_NTOSPNP_ID = 32
    DPFLTR_FASTFAT_ID = 33
    DPFLTR_SAMSS_ID = 34
    DPFLTR_PNPMGR_ID = 35
    DPFLTR_NETAPI_ID = 36
    DPFLTR_SCSERVER_ID = 37
    DPFLTR_SCCLIENT_ID = 38
    DPFLTR_SERIAL_ID = 39
    DPFLTR_SERENUM_ID = 40
    DPFLTR_UHCD_ID = 41
    DPFLTR_RPCPROXY_ID = 42
    DPFLTR_AUTOCHK_ID = 43
    DPFLTR_DCOMSS_ID = 44
    DPFLTR_UNIMODEM_ID = 45
    DPFLTR_SIS_ID = 46
    DPFLTR_FLTMGR_ID = 47
    DPFLTR_WMICORE_ID = 48
    DPFLTR_BURNENG_ID = 49
    DPFLTR_IMAPI_ID = 50
    DPFLTR_SXS_ID = 51
    DPFLTR_FUSION_ID = 52
    DPFLTR_IDLETASK_ID = 53
    DPFLTR_SOFTPCI_ID = 54
    DPFLTR_TAPE_ID = 55
    DPFLTR_MCHGR_ID = 56
    DPFLTR_IDEP_ID = 57
    DPFLTR_PCIIDE_ID = 58
    DPFLTR_FLOPPY_ID = 59
    DPFLTR_FDC_ID = 60
    DPFLTR_TERMSRV_ID = 61
    DPFLTR_W32TIME_ID = 62
    DPFLTR_PREFETCHER_ID = 63
    DPFLTR_RSFILTER_ID = 64
    DPFLTR_FCPORT_ID = 65
    DPFLTR_PCI_ID = 66
    DPFLTR_DMIO_ID = 67
    DPFLTR_DMCONFIG_ID = 68
    DPFLTR_DMADMIN_ID = 69
    DPFLTR_WSOCKTRANSPORT_ID = 70
    DPFLTR_VSS_ID = 71
    DPFLTR_PNPMEM_ID = 72
    DPFLTR_PROCESSOR_ID = 73
    DPFLTR_DMSERVER_ID = 74
    DPFLTR_SR_ID = 75
    DPFLTR_INFINIBAND_ID = 76
    DPFLTR_IHVDRIVER_ID = 77
    DPFLTR_IHVVIDEO_ID = 78
    DPFLTR_IHVAUDIO_ID = 79
    DPFLTR_IHVNETWORK_ID = 80
    DPFLTR_IHVSTREAMING_ID = 81
    DPFLTR_IHVBUS_ID = 82
    DPFLTR_HPS_ID = 83
    DPFLTR_RTLTHREADPOOL_ID = 84
    DPFLTR_LDR_ID = 85
    DPFLTR_TCPIP6_ID = 86
    DPFLTR_ISAPNP_ID = 87
    DPFLTR_SHPC_ID = 88
    DPFLTR_STORPORT_ID = 89
    DPFLTR_STORMINIPORT_ID = 90
    DPFLTR_PRINTSPOOLER_ID = 91
    DPFLTR_VSSDYNDISK_ID = 92
    DPFLTR_VERIFIER_ID = 93
    DPFLTR_VDS_ID = 94
    DPFLTR_VDSBAS_ID = 95
    DPFLTR_VDSDYN_ID = 96
    DPFLTR_VDSDYNDR_ID = 97
    DPFLTR_VDSLDR_ID = 98
    DPFLTR_VDSUTIL_ID = 99
    DPFLTR_DFRGIFC_ID = 100
    DPFLTR_DEFAULT_ID = 101
    DPFLTR_MM_ID = 102
    DPFLTR_DFSC_ID = 103
    DPFLTR_WOW64_ID = 104
    DPFLTR_ALPC_ID = 105
    DPFLTR_WDI_ID = 106
    DPFLTR_PERFLIB_ID = 107
    DPFLTR_KTM_ID = 108
    DPFLTR_IOSTRESS_ID = 109
    DPFLTR_HEAP_ID = 110
    DPFLTR_WHEA_ID = 111
    DPFLTR_USERGDI_ID = 112
    DPFLTR_MMCSS_ID = 113
    DPFLTR_TPM_ID = 114
    DPFLTR_THREADORDER_ID = 115
    DPFLTR_ENVIRON_ID = 116
    DPFLTR_EMS_ID = 117
    DPFLTR_WDT_ID = 118
    DPFLTR_FVEVOL_ID = 119
    DPFLTR_NDIS_ID = 120
    DPFLTR_NVCTRACE_ID = 121
    DPFLTR_LUAFV_ID = 122
    DPFLTR_APPCOMPAT_ID = 123
    DPFLTR_USBSTOR_ID = 124
    DPFLTR_SBP2PORT_ID = 125
    DPFLTR_COVERAGE_ID = 126
    DPFLTR_CACHEMGR_ID = 127
    DPFLTR_MOUNTMGR_ID = 128
    DPFLTR_CFR_ID = 129
    DPFLTR_TXF_ID = 130
    DPFLTR_KSECDD_ID = 131
    DPFLTR_FLTREGRESS_ID = 132
    DPFLTR_MPIO_ID = 133
    DPFLTR_MSDSM_ID = 134
    DPFLTR_UDFS_ID = 135
    DPFLTR_PSHED_ID = 136
    DPFLTR_STORVSP_ID = 137
    DPFLTR_LSASS_ID = 138
    DPFLTR_SSPICLI_ID = 139
    DPFLTR_CNG_ID = 140
    DPFLTR_EXFAT_ID = 141
    DPFLTR_FILETRACE_ID = 142
    DPFLTR_XSAVE_ID = 143
    DPFLTR_SE_ID = 144
    DPFLTR_DRIVEEXTENDER_ID = 145
    DPFLTR_POWER_ID = 146
    DPFLTR_CRASHDUMPXHCI_ID = 147
    DPFLTR_GPIO_ID = 148
    DPFLTR_REFS_ID = 149
    DPFLTR_WER_ID = 150
    DPFLTR_CAPIMG_ID = 151
    DPFLTR_VPCI_ID = 152
    DPFLTR_STORAGECLASSMEMORY_ID = 153
    DPFLTR_FSLIB_ID = 154
    DPFLTR_ENDOFTABLE_ID
End Enum


Public Enum PROCESS_CREATE_FLAGS
    PROCESS_CREATE_FLAGS_BREAKAWAY = &H00000001  ' NtCreateProcessEx & NtCreateUserProcess
    PROCESS_CREATE_FLAGS_NO_DEBUG_INHERIT = &H00000002  ' NtCreateProcessEx & NtCreateUserProcess
    PROCESS_CREATE_FLAGS_INHERIT_HANDLES = &H00000004  ' NtCreateProcessEx & NtCreateUserProcess
    PROCESS_CREATE_FLAGS_OVERRIDE_ADDRESS_SPACE = &H00000008  ' NtCreateProcessEx only
    PROCESS_CREATE_FLAGS_LARGE_PAGES = &H00000010  ' NtCreateProcessEx only, requires SeLockMemory
    PROCESS_CREATE_FLAGS_LARGE_PAGE_SYSTEM_DLL = &H00000020  ' NtCreateProcessEx only, requires SeLockMemory
    PROCESS_CREATE_FLAGS_PROTECTED_PROCESS = &H00000040  ' NtCreateUserProcess only
    PROCESS_CREATE_FLAGS_CREATE_SESSION = &H00000080  ' NtCreateProcessEx & NtCreateUserProcess, requires SeLoadDriver
    PROCESS_CREATE_FLAGS_INHERIT_FROM_PARENT = &H00000100  ' NtCreateProcessEx & NtCreateUserProcess
    PROCESS_CREATE_FLAGS_SUSPENDED = &H00000200  ' NtCreateProcessEx & NtCreateUserProcess
    PROCESS_CREATE_FLAGS_FORCE_BREAKAWAY = &H00000400  ' NtCreateProcessEx & NtCreateUserProcess, requires SeTcb
    PROCESS_CREATE_FLAGS_MINIMAL_PROCESS = &H00000800  ' NtCreateProcessEx only
    PROCESS_CREATE_FLAGS_RELEASE_SECTION = &H00001000  ' NtCreateProcessEx & NtCreateUserProcess
    PROCESS_CREATE_FLAGS_CLONE_MINIMAL = &H00002000  ' NtCreateProcessEx only
    PROCESS_CREATE_FLAGS_CLONE_MINIMAL_REDUCED_COMMIT = &H00004000  '
    PROCESS_CREATE_FLAGS_AUXILIARY_PROCESS = &H00008000& ' NtCreateProcessEx & NtCreateUserProcess, requires SeTcb
    PROCESS_CREATE_FLAGS_CREATE_STORE = &H00020000  ' NtCreateProcessEx only
    PROCESS_CREATE_FLAGS_USE_PROTECTED_ENVIRONMENT = &H00040000  ' NtCreateProcessEx & NtCreateUserProces
End Enum
Public Enum THREAD_CREATE_FLAGS
    THREAD_CREATE_FLAGS_CREATE_SUSPENDED = &H00000001  ' NtCreateUserProcess & NtCreateThreadEx
    THREAD_CREATE_FLAGS_SKIP_THREAD_ATTACH = &H00000002  ' NtCreateThreadEx only
    THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER = &H00000004  ' NtCreateThreadEx only
    THREAD_CREATE_FLAGS_LOADER_WORKER = &H00000010  ' NtCreateThreadEx only
    THREAD_CREATE_FLAGS_SKIP_LOADER_INIT = &H00000020  ' NtCreateThreadEx only
    THREAD_CREATE_FLAGS_BYPASS_PROCESS_FREEZE = &H00000040  ' NtCreateThreadEx only
    THREAD_CREATE_FLAGS_INITIAL_THREAD = &H00000080  ' ?
End Enum

Public Enum PS_CREATE_STATE
    PsCreateInitialState
    PsCreateFailOnFileOpen
    PsCreateFailOnSectionCreate
    PsCreateFailExeFormat
    PsCreateFailMachineMismatch
    PsCreateFailExeName
    PsCreateSuccess
    PsCreateMaximumStates
End Enum
Public Type PS_CREATE_INFO
    Size As LongPtr
    State As PS_CREATE_STATE
    #If Win64 Then
        pad As Long
        uniondata(71) As Byte
    #Else
        uniondata(63) As Byte
    #End If
    /*
    union {
    struct {
        HANDLE FileHandle;
    } FailSection;
    struct {
        USHORT DllCharacteristics;
    } ExeFormat;
    struct {
        HANDLE IFEOKey;
    } ExeName;
    struct {
        ULONG InitFlags; //PSCI_INITFLAGS
        ACCESS_MASK AdditionalFileAccess;
    }
    struct {
        ULONG OutputFlags; //PSCI_OUTFLAGS
        HANDLE FileHandle;
        HANDLE SectionHandle;
        ULONGLONG  UserProcessParametersNative;
        ULONG UserProcessParametersWow64;
        ULONG CurrentParameterFlags;
        ULONGLONG PebAddressNative;
        ULONG PebAddressWow64;
        ULONGLONG ManifestAddress;
        ULONG ManifestSize
    }
    */
End Type
Public Type PS_CREATE_INFO_SUCCESS_U
    OutputFlags As Long 'PSCI_OUTFLAGS
    FileHandle As LongPtr
    SectionHandle As LongPtr
    UserProcessParametersNative As LongLong
    UserProcessParametersWow64 As Long
    CurrentParameterFlags As Long
    PebAddressNative As LongLong
    PebAddressWow64 As Long
    ManifestAddress As LongLong
    ManifestSiz As Long
End Type
Public Enum PS_ATTRIBUTE_NUM
    PsAttributeParentProcess ' in HANDLE
    PsAttributeDebugPort ' in HANDLE
    PsAttributeToken ' in HANDLE
    PsAttributeClientId ' out PCLIENT_ID
    PsAttributeTebAddress ' out PTEB *
    PsAttributeImageName ' in PWSTR
    PsAttributeImageInfo ' out PSECTION_IMAGE_INFORMATION
    PsAttributeMemoryReserve ' in PPS_MEMORY_RESERVE
    PsAttributePriorityClass ' in UCHAR
    PsAttributeErrorMode ' in ULONG
    PsAttributeStdHandleInfo ' 10, in PPS_STD_HANDLE_INFO
    PsAttributeHandleList ' in PHANDLE
    PsAttributeGroupAffinity ' in PGROUP_AFFINITY
    PsAttributePreferredNode ' in PUSHORT
    PsAttributeIdealProcessor ' in PPROCESSOR_NUMBER
    PsAttributeUmsThread ' ? in PUMS_CREATE_THREAD_ATTRIBUTES
    PsAttributeMitigationOptions ' in UCHAR
    PsAttributeProtectionLevel ' in ULONG
    PsAttributeSecureProcess ' since THRESHOLD
    PsAttributeJobList
    PsAttributeChildProcessPolicy ' since THRESHOLD2
    PsAttributeAllApplicationPackagesPolicy ' since REDSTONE
    PsAttributeWin32kFilter
    PsAttributeSafeOpenPromptOriginClaim
    PsAttributeBnoIsolation ' PS_BNO_ISOLATION_PARAMETERS
    PsAttributeDesktopAppPolicy ' in ULONG
    PsAttributeChpe ' since REDSTONE3
    PsAttributeMitigationAuditOptions ' since 21H1
    PsAttributeMachineType ' since WIN11
    PsAttributeComponentFilter
    PsAttributeEnableOptionalXStateFeatures
    PsAttributeMax
End Enum
Public Const PS_ATTRIBUTE_NUMBER_MASK  = &H0000ffff
Public Const PS_ATTRIBUTE_THREAD  = &H00010000  ' may be used with thread creation
Public Const PS_ATTRIBUTE_INPUT  = &H00020000  ' input only
Public Const PS_ATTRIBUTE_ADDITIVE  = &H00040000  ' "accumulated" e.g. bitmasks, counters, etc.

Public Enum PS_ATTRIBUTE_ID
    PS_ATTRIBUTE_PARENT_PROCESS = &H60000
    PS_ATTRIBUTE_DEBUG_PORT = &H60001
    PS_ATTRIBUTE_TOKEN = &H60002
    PS_ATTRIBUTE_CLIENT_ID = &H10003
    PS_ATTRIBUTE_TEB_ADDRESS = &H10004
    PS_ATTRIBUTE_IMAGE_NAME = &H20005
    PS_ATTRIBUTE_IMAGE_INFO = &H6
    PS_ATTRIBUTE_MEMORY_RESERVE = &H20007
    PS_ATTRIBUTE_PRIORITY_CLASS = &H20008
    PS_ATTRIBUTE_ERROR_MODE = &H20009
    PS_ATTRIBUTE_STD_HANDLE_INFO = &H2000a
    PS_ATTRIBUTE_HANDLE_LIST = &H2000b
    PS_ATTRIBUTE_GROUP_AFFINITY = &H3000c
    PS_ATTRIBUTE_PREFERRED_NODE = &H2000d
    PS_ATTRIBUTE_IDEAL_PROCESSOR = &H3000e
    PS_ATTRIBUTE_UMS_THREAD = &H3000f
    PS_ATTRIBUTE_MITIGATION_OPTIONS = &H60010
    PS_ATTRIBUTE_PROTECTION_LEVEL = &H60011
    PS_ATTRIBUTE_SECURE_PROCESS = &H20012
    PS_ATTRIBUTE_JOB_LIST = &H20013
    PS_ATTRIBUTE_CHILD_PROCESS_POLICY = &H20014
    PS_ATTRIBUTE_ALL_APPLICATION_PACKAGES_POLICY = &H20015
    PS_ATTRIBUTE_WIN32K_FILTER = &H20016
    PS_ATTRIBUTE_SAFE_OPEN_PROMPT_ORIGIN_CLAIM = &H20017
    PS_ATTRIBUTE_BNO_ISOLATION = &H20018
    PS_ATTRIBUTE_DESKTOP_APP_POLICY = &H20019
End Enum
Public Type PS_ATTRIBUTE
    Attribute As LongPtr
    Size As LongPtr
    'union
    ' {
    '    ULONG_PTR Value;
    ValuePtrOrValue As LongPtr
    '};
    ReturnLength As LongPtr 'PSIZE_T
End Type
[Description("IMPORTANT: Set length only to length *actually used*-- this is buffered to the maximum possible, but they can't be uninitialized/unused.")]
Public Type PS_ATTRIBUTE_LIST
    TotalLength As LongPtr
    Attributes(0 To 30) As PS_ATTRIBUTE
End Type

Public Type PS_MEMORY_RESERVE
    ReserveAddress As LongPtr
    ReserveSize As LongPtr
End Type
Public Enum PS_STD_HANDLES
    PS_STD_INPUT_HANDLE = &H1
    PS_STD_OUTPUT_HANDLE = &H2
    PS_STD_ERROR_HANDLE = &H4
End Enum
Public Enum PS_STD_HANDLE_STATE
    PsNeverDuplicate
    PsRequestDuplicate ' duplicate standard handles specified by PseudoHandleMask, and only if StdHandleSubsystemType matches the image subsystem
    PsAlwaysDuplicate ' always duplicate standard handles
    PsMaxStdHandleStates
End Enum
Public Type PS_STD_HANDLE_INFO
    /* [ TypeHint(PS_STD_HANDLE_STATE, PS_STD_HANDLES) ] */ Flags As PS_STD_HANDLE_STATE
    StdHandleSubsystemType As Long
End Type

Public Type PS_BNO_ISOLATION_PARAMETERS
    IsolationPrefix As UNICODE_STRING
    HandleCount As Long
    Handles As LongPtr
    IsolationEnabled As Byte
End Type

Public Enum PS_MITIGATION_OPTION
    PS_MITIGATION_OPTION_NX
    PS_MITIGATION_OPTION_SEHOP
    PS_MITIGATION_OPTION_FORCE_RELOCATE_IMAGES
    PS_MITIGATION_OPTION_HEAP_TERMINATE
    PS_MITIGATION_OPTION_BOTTOM_UP_ASLR
    PS_MITIGATION_OPTION_HIGH_ENTROPY_ASLR
    PS_MITIGATION_OPTION_STRICT_HANDLE_CHECKS
    PS_MITIGATION_OPTION_WIN32K_SYSTEM_CALL_DISABLE
    PS_MITIGATION_OPTION_EXTENSION_POINT_DISABLE
    PS_MITIGATION_OPTION_PROHIBIT_DYNAMIC_CODE
    PS_MITIGATION_OPTION_CONTROL_FLOW_GUARD
    PS_MITIGATION_OPTION_BLOCK_NON_MICROSOFT_BINARIES
    PS_MITIGATION_OPTION_FONT_DISABLE
    PS_MITIGATION_OPTION_IMAGE_LOAD_NO_REMOTE
    PS_MITIGATION_OPTION_IMAGE_LOAD_NO_LOW_LABEL
    PS_MITIGATION_OPTION_IMAGE_LOAD_PREFER_SYSTEM32
    PS_MITIGATION_OPTION_RETURN_FLOW_GUARD
    PS_MITIGATION_OPTION_LOADER_INTEGRITY_CONTINUITY
    PS_MITIGATION_OPTION_STRICT_CONTROL_FLOW_GUARD
    PS_MITIGATION_OPTION_RESTRICT_SET_THREAD_CONTEXT
    PS_MITIGATION_OPTION_ROP_STACKPIVOT 'since REDSTONE3
    PS_MITIGATION_OPTION_ROP_CALLER_CHECK
    PS_MITIGATION_OPTION_ROP_SIMEXEC
    PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER
    PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER_PLUS
    PS_MITIGATION_OPTION_RESTRICT_CHILD_PROCESS_CREATION
    PS_MITIGATION_OPTION_IMPORT_ADDRESS_FILTER
    PS_MITIGATION_OPTION_MODULE_TAMPERING_PROTECTION
    PS_MITIGATION_OPTION_RESTRICT_INDIRECT_BRANCH_PREDICTION
    PS_MITIGATION_OPTION_SPECULATIVE_STORE_BYPASS_DISABLE ' since REDSTONE5
    PS_MITIGATION_OPTION_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY
    PS_MITIGATION_OPTION_CET_USER_SHADOW_STACKS
    PS_MITIGATION_OPTION_USER_CET_SET_CONTEXT_IP_VALIDATION 'since 21H1
    PS_MITIGATION_OPTION_BLOCK_NON_CET_BINARIES
    PS_MITIGATION_OPTION_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY
    PS_MITIGATION_OPTION_REDIRECTION_TRUST
End Enum

Public Enum NTSectionAccessRights
    SECTION_QUERY = &H0001
    SECTION_MAP_WRITE = &H0002
    SECTION_MAP_READ = &H0004
    SECTION_MAP_EXECUTE = &H0008
    SECTION_EXTEND_SIZE = &H0010
    SECTION_MAP_EXECUTE_EXPLICIT = &H0020  ' not included in SECTION_ALLACCESS
    SECTION_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED Or SECTION_QUERY Or SECTION_MAP_WRITE Or SECTION_MAP_READ Or SECTION_MAP_EXECUTE Or SECTION_EXTEND_SIZE)
End Enum

Public Enum MemAllocType
    MEM_COMMIT = &H1000
    MEM_RESERVE = &H2000
    MEM_REPLACE_PLACEHOLDER = &H4000
    MEM_RESERVE_PLACEHOLDER = &H40000
    MEM_RESET = &H80000
    MEM_TOP_DOWN = &H100000
    MEM_WRITE_WATCH = &H200000
    MEM_PHYSICAL = &H400000
    MEM_ROTATE = &H800000
    MEM_DIFFERENT_IMAGE_BASE_OK = &H800000
    MEM_RESET_UNDO = &H1000000
    MEM_LARGE_PAGES = &H20000000
    MEM_4MB_PAGES = &H80000000
    MEM_64K_PAGES = (MEM_LARGE_PAGES Or MEM_PHYSICAL)
    MEM_UNMAP_WITH_TRANSIENT_BOOST = &H00000001
    MEM_COALESCE_PLACEHOLDERS = &H00000001
    MEM_PRESERVE_PLACEHOLDER = &H00000002
    MEM_DECOMMIT = &H00004000
    MEM_RELEASE = &H00008000&
    MEM_FREE = &H00010000
    MEM_PRIVATE = &H00020000
    MEM_MAPPED = &H00040000
    MEM_IMAGE = &H01000000
End Enum
Public Enum MemProtectFlags
    PAGE_NOACCESS = &H1
    PAGE_READONLY = &H2
    PAGE_READWRITE = &H4
    PAGE_WRITECOPY = &H8
    PAGE_EXECUTE = &H10
    PAGE_EXECUTE_READ = &H20
    PAGE_EXECUTE_READWRITE = &H40
    PAGE_EXECUTE_WRITECOPY = &H80
    PAGE_GUARD = &H100
    PAGE_NOCACHE = &H200
    PAGE_WRITECOMBINE = &H400
    PAGE_TARGETS_INVALID = &H40000000
    PAGE_TARGETS_NO_UPDATE = &H40000000
End Enum

Public Enum NtFileQueryFlags
    SL_RESTART_SCAN = &H01
    SL_RETURN_SINGLE_ENTRY = &H02
    SL_INDEX_SPECIFIED = &H04
    SL_RETURN_ON_DISK_ENTRIES_ONLY = &H08
    SL_NO_CURSOR_UPDATE = &H10
    SL_QUERY_DIRECTORY_MASK = &H1b
End Enum

Public Enum HeapFlags
    HEAP_NO_SERIALIZE = &H00000001  ' winnt
    HEAP_GROWABLE = &H00000002  ' winnt
    HEAP_GENERATE_EXCEPTIONS = &H00000004  ' winnt
    HEAP_ZERO_MEMORY = &H00000008  ' winnt
    HEAP_REALLOC_IN_PLACE_ONLY = &H00000010  ' winnt
    HEAP_TAIL_CHECKING_ENABLED = &H00000020  ' winnt
    HEAP_FREE_CHECKING_ENABLED = &H00000040  ' winnt
    HEAP_DISABLE_COALESCE_ON_FREE = &H00000080  ' winnt
    HEAP_CREATE_ALIGN_16 = &H00010000  ' winnt Create heap with 16 byte alignment (obsolete)
    HEAP_CREATE_ENABLE_TRACING = &H00020000  ' winnt Create heap call tracing enabled (obsolete)
    HEAP_CREATE_ENABLE_EXECUTE = &H00040000  ' winnt Create heap with executable pages
    HEAP_SETTABLE_USER_VALUE = &H00000100
    HEAP_SETTABLE_USER_FLAG1 = &H00000200
    HEAP_SETTABLE_USER_FLAG2 = &H00000400
    HEAP_SETTABLE_USER_FLAG3 = &H00000800
    HEAP_SETTABLE_USER_FLAGS = &H00000E00
    HEAP_CLASS_0 = &H00000000  ' process heap
    HEAP_CLASS_1 = &H00001000  ' private heap
    HEAP_CLASS_2 = &H00002000  ' Kernel Heap
    HEAP_CLASS_3 = &H00003000  ' GDI heap
    HEAP_CLASS_4 = &H00004000  ' User heap
    HEAP_CLASS_5 = &H00005000  ' Console heap
    HEAP_CLASS_6 = &H00006000  ' User Desktop heap
    HEAP_CLASS_7 = &H00007000  ' Csrss Shared heap
    HEAP_CLASS_8 = &H00008000&  ' Csr Port heap
    HEAP_CLASS_MASK = &H0000F000&
    HEAP_MAXIMUM_TAG = &H0FFF  ' winnt
    HEAP_GLOBAL_TAG = &H0800
    HEAP_PSEUDO_TAG_FLAG = &H8000&  ' winnt
    HEAP_TAG_SHIFT = 18  ' winnt
    HEAP_TAG_MASK = (HEAP_MAXIMUM_TAG << HEAP_TAG_SHIFT)
    HEAP_CREATE_SEGMENT_HEAP = &H00000100  ' winnt create a segment heap
'  Only applies to segment heap.  Applies pointer obfuscation which is
'  generally excessive and unnecessary but is necessary for certain insecure
'  heaps in win32k.
'  Specifying HEAP_CREATE_HARDENED prevents the heap from using locks as
'  pointers would potentially be exposed in heap metadata lock variables.
'  Callers are therefore responsible for synchronizing access to hardened heaps.
    HEAP_CREATE_HARDENED = &H00000200  ' winnt Only applies to segment heap.
    HEAP_CREATE_VALID_MASK = (HEAP_NO_SERIALIZE Or HEAP_GROWABLE Or HEAP_GENERATE_EXCEPTIONS Or HEAP_ZERO_MEMORY Or HEAP_REALLOC_IN_PLACE_ONLY Or HEAP_TAIL_CHECKING_ENABLED Or HEAP_FREE_CHECKING_ENABLED Or HEAP_DISABLE_COALESCE_ON_FREE Or HEAP_CLASS_MASK Or HEAP_CREATE_ALIGN_16 Or HEAP_CREATE_ENABLE_TRACING Or HEAP_CREATE_ENABLE_EXECUTE Or HEAP_CREATE_SEGMENT_HEAP Or HEAP_CREATE_HARDENED)
End Enum

Public Type RTL_HEAP_PARAMETERS
    Length As Long
    SegmentReserve As LongPtr
    SegmentCommit As LongPtr
    DeCommitFreeBlockThreshold As LongPtr
    DeCommitTotalFreeThreshold As LongPtr
    MaximumAllocationSize As LongPtr
    VirtualMemoryThreshold As LongPtr
    InitialCommit As LongPtr
    InitialReserve As LongPtr
    CommitRoutine As LongPtr 'PRTL_HEAP_COMMIT_ROUTINE
    Reserved(0 To 1) As LongPtr
End Type

Public Enum RTL_UPP_FLAGS
    RTL_USER_PROCESS_PARAMETERS_NORMALIZED = &H01
    RTL_USER_PROCESS_PARAMETERS_PROFILE_USER = &H02
    RTL_USER_PROCESS_PARAMETERS_PROFILE_KERNEL = &H04
    RTL_USER_PROCESS_PARAMETERS_PROFILE_SERVER = &H08
    RTL_USER_PROCESS_PARAMETERS_UNKNOWN = &H10
    RTL_USER_PROCESS_PARAMETERS_RESERVE_1MB = &H20
    RTL_USER_PROCESS_PARAMETERS_RESERVE_16MB = &H40
    RTL_USER_PROCESS_PARAMETERS_CASE_SENSITIVE = &H80
    RTL_USER_PROCESS_PARAMETERS_DISABLE_HEAP_CHECKS = &H100
    RTL_USER_PROCESS_PARAMETERS_PROCESS_OR_1 = &H200
    RTL_USER_PROCESS_PARAMETERS_PROCESS_OR_2 = &H400
    RTL_USER_PROCESS_PARAMETERS_PRIVATE_DLL_PATH = &H1000
    RTL_USER_PROCESS_PARAMETERS_LOCAL_DLL_PATH = &H2000
    RTL_USER_PROCESS_PARAMETERS_IMAGE_KEY_MISSING = &H4000
    RTL_USER_PROCESS_PARAMETERS_NX = &H20000
End Enum

Public Type RTL_BITMAP
    SizeOfBitMap As Long
    Buffer As LongPtr
End Type
Public Type RTL_BITMAP_RUN
    StartingIndex As Long
    NumberOfBits As Long
End Type
Public Type RTL_BITMAP_EX
    SizeOfBitMap As LongLong
    Buffer As LongPtr
End Type

[Description("CAUTION: This enum represents a set of Integer values.")]
Public Enum SECURITY_DESCRIPTOR_CONTROL
    SE_OWNER_DEFAULTED = (&H0001)
    SE_GROUP_DEFAULTED = (&H0002)
    SE_DACL_PRESENT = (&H0004)
    SE_DACL_DEFAULTED = (&H0008)
    SE_SACL_PRESENT = (&H0010)
    SE_SACL_DEFAULTED = (&H0020)
    SE_DACL_AUTO_INHERIT_REQ = (&H0100)
    SE_SACL_AUTO_INHERIT_REQ = (&H0200)
    SE_DACL_AUTO_INHERITED = (&H0400)
    SE_SACL_AUTO_INHERITED = (&H0800)
    SE_DACL_PROTECTED = (&H1000)
    SE_SACL_PROTECTED = (&H2000)
    SE_RM_CONTROL_VALID = (&H4000)
    SE_SELF_RELATIVE = (&H8000&)
End Enum

Public Enum EX_POOL_PRIORITY
    LowPoolPriority = 0
    LowPoolPrioritySpecialPoolOverrun=8
    LowPoolPrioritySpecialPoolUnderrun=9
    NormalPoolPriority=16
    NormalPoolPrioritySpecialPoolOverrun=24
    NormalPoolPrioritySpecialPoolUnderrun= 25
    HighPoolPriority=32
    HighPoolPrioritySpecialPoolOverrun=40
    HighPoolPrioritySpecialPoolUnderrun=41
End Enum

Public Enum POOL_EXTENDED_PARAMETER_TYPE
    PoolExtendedParameterInvalidType=0
    PoolExtendedParameterPriority
    PoolExtendedParameterSecurePool
    PoolExtendedParameterNumaNode
    PoolExtendedParameterMax
End Enum

Public Const POOL_EXTENDED_PARAMETER_TYPE_BITS  = 8
Public Const POOL_EXTENDED_PARAMETER_REQUIRED_FIELD_BITS  = 1
Public Const POOL_EXTENDED_PARAMETER_RESERVED_BITS  = (64 - POOL_EXTENDED_PARAMETER_TYPE_BITS - POOL_EXTENDED_PARAMETER_REQUIRED_FIELD_BITS)

Public Enum SecurePoolFlags
    SECURE_POOL_FLAGS_NONE  = &H0
    SECURE_POOL_FLAGS_FREEABLE  = &H1
    SECURE_POOL_FLAGS_MODIFIABLE  = &H2
End Enum

Public Type POOL_EXTENDED_PARAMS_SECURE_POOL
    SecurePoolHandle As LongPtr
    Buffer As LongPtr
    Cookie As LongPtr
    SecurePoolFlags As SecurePoolFlags
End Type

Public Type POOL_EXTENDED_PARAMETER
    ' struct {
        ' ULONG64 Type : POOL_EXTENDED_PARAMETER_TYPE_BITS;
        ' ULONG64 Optional : POOL_EXTENDED_PARAMETER_REQUIRED_FIELD_BITS;
        ' ULONG64 Reserved : POOL_EXTENDED_PARAMETER_RESERVED_BITS;
    ' } DUMMYSTRUCTNAME;
    Type as Byte
    Optional as Byte
    Reserved(5) As Byte
    ' union {
        ' ULONG64 Reserved2;
        ' PVOID Reserved3;
        ' EX_POOL_PRIORITY Priority;
        ' POOL_EXTENDED_PARAMS_SECURE_POOL* SecurePoolParams;
        ' POOL_NODE_REQUIREMENT PreferredNode;
    ' } DUMMYUNIONNAME;
    u As LongLong
End Type


'Drivers can only import from ntoskrnl.exe and a few kernel modules. You need to be careful which language features you use; strings and arrays besides 1-D inside UDTs
'utilize APIs behind the scenes from other libraries (currently, I opened a feature request for non-SAFEARRAY arrays), and cannot be used in drivers.
Public Declare PtrSafe Function DbgPrint CDecl Lib "ntoskrnl.exe" (ByVal Format As LongPtr /* Currently unsupported in kernel mode: , ByVal ParamArray Args As Any()*/) As Long
Public Declare PtrSafe Function DbgPrint1 CDecl Lib "ntoskrnl.exe" Alias "DbgPrint" (ByVal Format As LongPtr, Arg1 As Any) As Long
Public Declare PtrSafe Function DbgPrint2 CDecl Lib "ntoskrnl.exe" Alias "DbgPrint" (ByVal Format As LongPtr, Arg1 As Any, Arg2 As Any) As Long
Public Declare PtrSafe Function DbgPrint3 CDecl Lib "ntoskrnl.exe" Alias "DbgPrint" (ByVal Format As LongPtr, Arg1 As Any, Arg2 As Any, Arg3 As Any) As Long
Public Declare PtrSafe Function DbgPrintEx CDecl Lib "ntoskrnl.exe" (ByVal ComponentId As DPFLTR_TYPE, ByVal Level As DbgPrntLevels, ByVal Format As LongPtr /* Currently unsupported in kernel mode: , ByVal ParamArray Args As Any()*/) As Long
Public Declare PtrSafe Function DbgPrintEx1 CDecl Lib "ntoskrnl.exe" Alias "DbgPrintEx" (ByVal Format As LongPtr, Arg1 As Any) As Long
Public Declare PtrSafe Function DbgPrintEx2 CDecl Lib "ntoskrnl.exe" Alias "DbgPrintEx" (ByVal Format As LongPtr, Arg1 As Any, Arg2 As Any) As Long
Public Declare PtrSafe Function DbgPrintEx3 CDecl Lib "ntoskrnl.exe" Alias "DbgPrintEx" (ByVal Format As LongPtr, Arg1 As Any, Arg2 As Any, Arg3 As Any) As Long

Public Declare PtrSafe Function wcslen CDecl Lib "ntoskrnl.exe" (ByVal _String As LongPtr) As LongPtr
Public Declare PtrSafe Function wcsnlen CDecl Lib "ntoskrnl.exe" (ByVal _String As LongPtr, ByVal _MaxCount As LongPtr) As LongPtr
Public Declare PtrSafe Function wcscat CDecl Lib "ntoskrnl.exe" (ByVal dest As LongPtr, ByVal src As LongPtr) As LongPtr
Public Declare PtrSafe Function wcscat_s CDecl Lib "ntoskrnl.exe" (ByVal _Dst As LongPtr, ByVal _SizeInWords As LongPtr, ByVal _Src As LongPtr) As Long
Public Declare PtrSafe Function wcscmp CDecl Lib "ntoskrnl.exe" (ByVal lhs As LongPtr, ByVal rhs As LongPtr) As Long
Public Declare PtrSafe Function wcscpy CDecl Lib "ntoskrnl.exe" (ByVal dest As LongPtr, ByVal src As LongPtr) As LongPtr
Public Declare PtrSafe Function towlower CDecl Lib "ntoskrnl.exe" (ByVal ch As Integer) As Integer
Public Declare PtrSafe Function towupper CDecl Lib "ntoskrnl.exe" (ByVal ch As Integer) As Integer
Public Declare PtrSafe Function _wcslwr CDecl Lib "ntoskrnl.exe" (ByVal _Str As LongPtr) As LongPtr
Public Declare PtrSafe Function _wcsupr CDecl Lib "ntoskrnl.exe" (ByVal _Str As LongPtr) As LongPtr
Public Declare PtrSafe Function _wcsrev CDecl Lib "ntoskrnl.exe" (ByVal _Str As LongPtr) As LongPtr
Public Declare PtrSafe Function wcschr CDecl Lib "ntoskrnl.exe" (ByVal str As LongPtr, ByVal Ch As Integer) As LongPtr
Public Declare PtrSafe Function wcsstr CDecl Lib "ntoskrnl.exe" (ByVal dest As LongPtr, ByVal src As LongPtr) As LongPtr

Public Declare PtrSafe Function IoCreateDevice Lib "ntoskrnl.exe" (DriverObject As DRIVER_OBJECT, _
                                                                    ByVal DeviceExtensionSize As Long, _
                                                                    DeviceName As UNICODE_STRING, _
                                                                    ByVal DeviceType As Long, _
                                                                    ByVal DeviceCharacteristics As Long, _
                                                                    ByVal Exclusive As Long, _
                                                                    DeviceObject As DEVICE_OBJECT) As Long

Public Declare PtrSafe Sub IoCompleteRequest Lib "ntoskrnl.exe" (pIrp As IRP, ByVal PriorityBoost As Byte)
Public Declare PtrSafe Function IoCreateSymbolicLink Lib "ntoskrnl.exe" (SymbolicLinkName As UNICODE_STRING, DeviceName As UNICODE_STRING) As Long
Public Declare PtrSafe Function IoDeleteSymbolicLink Lib "ntoskrnl.exe" (SymbolicLinkName As UNICODE_STRING) As Long
Public Declare PtrSafe Sub IoDeleteDevice Lib "ntoskrnl.exe" (DeviceObject As Any)
Public Declare PtrSafe Function IoAllocateDriverObjectExtension Lib "ntoskrnl.exe" (DriverObject As DRIVER_OBJECT, ClientIdentificationAddress As Any, ByVal DriverObjectExtensionSize As Long, DriverExtensionObject As LongPtr) As Long
Public Declare PtrSafe Function IoGetDriverObjectExtension Lib "ntoskrnl.exe" (DriverObject As DRIVER_OBJECT, ClientIdentificationAddress As Any) As LongPtr
Public Declare PtrSafe Function IoAcquireRemoveLockEx Lib "ntoskrnl.exe" (RemoveLock As IO_REMOVE_LOCK, Tag As Any, ByVal File As LongPtr, ByVal Line As Long, ByVal RemlockSize As Long) As Long
Public Declare PtrSafe Sub IoReleaseRemoveLockEx Lib "ntoskrnl.exe" (RemoveLock As IO_REMOVE_LOCK, Tag As Any, ByVal RemlockSize As Long)
Public Declare PtrSafe Sub IoReleaseRemoveLockAndWaitEx Lib "ntoskrnl.exe" (RemoveLock As IO_REMOVE_LOCK, Tag As Any, ByVal RemlockSize As Long)
Public Declare PtrSafe Sub IoInitializeRemoveLockEx Lib "ntoskrnl.exe" (RemoveLock As IO_REMOVE_LOCK, ByVal AllocateTag As Long, ByVal MaxLockedMinutes As Long, ByVal HighWaterMark As Long, ByVal RemlockSize As Long)
Public Declare PtrSafe Function IoAttachDeviceToDeviceStack Lib "ntoskrnl.exe" (SourceDevice As DEVICE_OBJECT, TargetDevice As DEVICE_OBJECT) As LongPtr
Public Declare PtrSafe Function IoAttachDeviceToDeviceStackSafe Lib "ntoskrnl.exe" (SourceDevice As DEVICE_OBJECT, TargetDevice As DEVICE_OBJECT, AttachedToDeviceObject As LongPtr) As NTSTATUS
Public Declare PtrSafe Function IoSetDeviceInterfaceState Lib "ntoskrnl.exe" (SymbolicLinkName As UNICODE_STRING, ByVal Enable As Byte) As Long
Public Declare PtrSafe Sub IoDetachDevice Lib "ntoskrnl.exe" (TargetDevice As DEVICE_OBJECT)
Public Declare PtrSafe Function IoThreadToProcess Lib "ntoskrnl.exe" (ByVal Thread As LongPtr) As LongPtr

Public Declare PtrSafe Function IofCallDriver Lib "ntoskrnl.exe" (DeviceObject As DEVICE_OBJECT, pIrp As IRP) As Long

Public Declare PtrSafe Function PsGetProcessId Lib "ntoskrnl.exe" (ByVal Process As LongPtr) As LongPtr
Public Declare PtrSafe Function PsGetCurrentProcess Lib "ntoskrnl.exe" Alias "IoGetCurrentProcess" () As LongPtr
Public Declare PtrSafe Function PsGetThreadProcessId Lib "ntoskrnl.exe" (ByVal Thread As LongPtr) As LongPtr
Public Declare PtrSafe Function PsGetCurrentProcessId Lib "ntoskrnl.exe" () As LongPtr
Public Declare PtrSafe Function PsGetCurrentThreadId Lib "ntoskrnl.exe" () As LongPtr
Public Declare PtrSafe Function PsGetCurrentThread Lib "ntoskrnl.exe" Alias "KeGetCurrentThread" () As LongPtr
Public Declare PtrSafe Function PsLookupProcessByProcessId Lib "ntoskrnl.exe" (ByVal ProcessId As LongPtr, Process As LongPtr /* PEPROCESS* */) As NTSTATUS
Public Declare PtrSafe Function PsSetCreateProcessNotifyRoutine Lib "ntoskrnl.exe" (ByVal NotifyRoutine As LongPtr, ByVal Remove As Byte) As NTSTATUS
Public Declare PtrSafe Function PsSetCreateProcessNotifyRoutineEx Lib "ntoskrnl.exe" (ByVal NotifyRoutine As LongPtr, ByVal Remove As Byte) As NTSTATUS
Public Declare PtrSafe Function PsLookupThreadByThreadId Lib "ntoskrnl.exe" (ByVal ThreadId As LongPtr, Thread As LongPtr) As NTSTATUS
Public Declare PtrSafe Function PsSetCreateThreadNotifyRoutine Lib "ntoskrnl.exe" (ByVal NotifyRoutine As LongPtr) As NTSTATUS
Public Declare PtrSafe Function PsSetCreateThreadNotifyRoutineEx Lib "ntoskrnl.exe" (ByVal NotifyType As PSCREATETHREADNOTIFYTYPE, ByVal NotifyRoutine As LongPtr) As NTSTATUS
Public Declare PtrSafe Function PsRemoveCreateThreadNotifyRoutine Lib "ntoskrnl.exe" (ByVal NotifyRoutine As LongPtr) As NTSTATUS
Public Declare PtrSafe Function PsSetLoadImageNotifyRoutine Lib "ntoskrnl.exe" (ByVal NotifyRoutine As LongPtr) As NTSTATUS
Public Declare PtrSafe Function PsRemoveLoadImageNotifyRoutine Lib "ntoskrnl.exe" (ByVal NotifyRoutine As LongPtr) As NTSTATUS

[UseGetLastError(False)] Public Declare PtrSafe Function RtlGetCurrentPeb Lib "ntoskrnl.exe" () As LongPtr
Public Declare PtrSafe Function RtlGetVersion Lib "ntoskrnl.exe" (lpVersionInformation As Any) As Long
Public Declare PtrSafe Sub RtlInitUnicodeString Lib "ntoskrnl.exe" (DestinationString As UNICODE_STRING, ByVal SourceString As LongPtr)
Public Declare PtrSafe Sub RtlCopyUnicodeString Lib "ntoskrnl.exe" (DestinationString As Any, SourceString As UNICODE_STRING)
Public Declare PtrSafe Function RtlAppendUnicodeStringToString Lib "ntoskrnl.exe" (Destination As UNICODE_STRING, Source As UNICODE_STRING) As NTSTATUS
Public Declare PtrSafe Function RtlAppendUnicodeToString Lib "ntoskrnl.exe" (Destination As UNICODE_STRING, Source As Any) As NTSTATUS
Public Declare PtrSafe Function RtlUpcaseUnicodeString Lib "ntoskrnl.exe" (DestinationString As UNICODE_STRING, SourceString As UNICODE_STRING, ByVal AllocateDestinationString As Byte) As Long
[UseGetLastError(False)] Public Declare PtrSafe Function RtlCompareUnicodeString Lib "ntoskrnl.exe" (String1 As UNICODE_STRING, String2 As UNICODE_STRING, ByVal CaseInSensitive As Byte) As Byte
Public Declare PtrSafe Function RtlEqualUnicodeString Lib "ntoskrnl.exe" (String1 As UNICODE_STRING, String2 As UNICODE_STRING, ByVal CaseInSensitive As Byte) As Byte
Public Declare PtrSafe Sub RtlFreeUnicodeString Lib "ntoskrnl.exe" (UnicodeString As UNICODE_STRING)
Public Declare PtrSafe Function RtlQueryRegistryValues Lib "ntoskrnl.exe" (ByVal RelativeTo As Long, ByVal Path As LongPtr, QueryTable As RTL_QUERY_REGISTRY_TABLE, ByVal Context As LongPtr, ByVal Environment As LongPtr) As Long
Public Declare PtrSafe Sub RtlAcquirePebLock Lib "ntoskrnl.exe" ()
Public Declare PtrSafe Sub RtlReleasePebLock Lib "ntoskrnl.exe" ()
Public Declare PtrSafe Function RtlNtStatusToDosError Lib "ntoskrnl.exe" (ByVal ntStatus As Long) As Long
Public Declare PtrSafe Function RtlFindExportedRoutineByName Lib "ntoskrnl.exe" (ByVal DllBase As LongPtr, ByVal RoutineName As LongPtr) As LongPtr
[Description("Generates a uniform random number using D.H. Lehmer's 1948 algorithm.")]
Public Declare PtrSafe Function RtlUniform Lib "ntoskrnl.exe" (Seed As Long) As Long
Public Declare PtrSafe Sub CopyMemory Lib "ntoskrnl.exe" Alias "RtlMoveMemory" (Destination As Any, Source As Any, ByVal Length As LongPtr)
Public Declare PtrSafe Sub ZeroMemory Lib "ntoskrnl.exe" Alias "RtlZeroMemory" (Destination As Any, ByVal Length As LongPtr)
Public Declare PtrSafe Function CompareMemory Lib "ntoskrnl.exe" Alias "RtlCompareMemory" (Source1 As Any, Source2 As Any, ByVal Length As LongPtr) As LongPtr
[UseGetLastError(False)] Public Declare PtrSafe Function RtlGUIDFromString Lib "ntoskrnl.exe" (GuidString As UNICODE_STRING, Guid As UUID) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function RtlImageNtHeader Lib "ntoskrnl.exe" (ByVal ModuleBase As LongPtr) As LongPtr
[UseGetLastError(False)] Public Declare PtrSafe Function RtlImageDirectoryEntryToData Lib "ntoskrnl.exe" (ByVal BaseAddress As LongPtr, ByVal MappedAsImage As Byte, [TypeHint(ImageDirectories)] ByVal Directory As Integer, size As Long) As LongPtr
[UseGetLastError(False)] Public Declare PtrSafe Function RtlAllocateHeap Lib "ntoskrnl.exe" (ByVal HeapHandle As LongPtr, ByVal Flags As HeapFlags, ByVal Size As LongPtr) As LongPtr
[UseGetLastError(False)] Public Declare PtrSafe Function RtlCreateHeap Lib "ntoskrnl.exe" (ByVal Flags As HeapFlags, ByVal HeapBase As LongPtr, ByVal ReserveSize As LongPtr, ByVal CommitSize As LongPtr, ByVal Lock As LongPtr, Parameters As RTL_HEAP_PARAMETERS) As LongPtr
[UseGetLastError(False)] Public Declare PtrSafe Function RtlFreeHeap Lib "ntoskrnl.exe" (ByVal HeapHandle As LongPtr, ByVal Flags As HeapFlags, ByVal BaseAddress As LongPtr) As Long
[UseGetLastError(False)] Public Declare PtrSafe Function RtlDestroyHeap Lib "ntoskrnl.exe" (ByVal HeapHandle As LongPtr) As LongPtr
[UseGetLastError(False)] Public Declare PtrSafe Function RtlValidSid Lib "ntoskrnl.exe" (ByVal Sid As LongPtr) As Byte
[UseGetLastError(False)] Public Declare PtrSafe Function RtlEqualSid Lib "ntoskrnl.exe" (ByVal Sid1 As LongPtr, ByVal Sid2 As LongPtr) As Byte
[UseGetLastError(False)] Public Declare PtrSafe Function RtlEqualPrefixSid Lib "ntoskrnl.exe" (ByVal Sid1 As LongPtr, ByVal Sid2 As LongPtr) As Byte
[UseGetLastError(False)] Public Declare PtrSafe Function RtlAllocateAndInitializeSid Lib "ntoskrnl.exe" (IdentifierAuthority As SID_IDENTIFIER_AUTHORITY, ByVal SubAuthorityCount As Byte, ByVal SubAuthority0 As Long, ByVal SubAuthority1 As Long, ByVal SubAuthority2 As Long, ByVal SubAuthority3 As Long, ByVal SubAuthority4 As Long, ByVal SubAuthority5 As Long, ByVal SubAuthority6 As Long, ByVal SubAuthority7 As Long, psid As LongPtr) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function RtlFreeSid Lib "ntoskrnl.exe" (ByVal psid As LongPtr) As LongPtr
[UseGetLastError(False)] Public Declare PtrSafe Function RtlInitializeSid Lib "ntoskrnl.exe" (ByVal Sid As LongPtr, IdentifierAuthority As SID_IDENTIFIER_AUTHORITY, ByVal SubAuthorityCount As Byte) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function RtlInitializeSidEx CDecl Lib "ntoskrnl.exe" (ByVal Sid As LongPtr, IdentifierAuthority As SID_IDENTIFIER_AUTHORITY, ByVal SubAuthorityCount As Byte, ByVal ParamArray vargs As Any()) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function RtlCreateServiceSid Lib "ntoskrnl.exe" (ServiceName As UNICODE_STRING, ByVal ServiceSid As LongPtr, ServiceSidLength As Long) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function RtlDeriveCapabilitySidsFromName Lib "ntoskrnl.exe" (UnicodeString As UNICODE_STRING, ByVal CapabilityGroupSid As LongPtr, ByVal CapabilitySid As LongPtr) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function RtlIsElevatedRid Lib "ntoskrnl.exe" (SidAttr As SID_AND_ATTRIBUTES) As Byte
[UseGetLastError(False)] Public Declare PtrSafe Function RtlSidHashLookup Lib "ntoskrnl.exe" (SidAttrHash As SID_AND_ATTRIBUTES_HASH, ByVal Sid As LongPtr) As LongPtr
[UseGetLastError(False)] Public Declare PtrSafe Function RtlSidHashInitialize Lib "ntoskrnl.exe" (SidAttr As SID_AND_ATTRIBUTES, ByVal SidCount As Long, SidAttrHash As SID_AND_ATTRIBUTES_HASH) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function RtlDefaultNpAcl Lib "ntoskrnl.exe" (Acl As LongPtr) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function RtlCreateSecurityDescriptor Lib "ntoskrnl.exe" (SecurityDescriptor As SECURITY_DESCRIPTOR, ByVal Revision As Long) As NTSTATUS
Public Declare PtrSafe Function RtlValidSecurityDescriptor Lib "ntoskrnl.exe" (SecurityDescriptor As SECURITY_DESCRIPTOR) As Byte
Public Declare PtrSafe Function RtlLengthSecurityDescriptor Lib "ntoskrnl.exe" (SecurityDescriptor As SECURITY_DESCRIPTOR) As Long
Public Declare PtrSafe Function RtlValidRelativeSecurityDescriptor Lib "ntoskrnl.exe" (SecurityDescriptorInput As SECURITY_DESCRIPTOR, ByVal SecurityDescriptorLength As Long, ByVal RequiredInformation As SECURITY_INFORMATION) As Byte
[UseGetLastError(False)] Public Declare PtrSafe Function RtlGetControlSecurityDescriptor Lib "ntoskrnl.exe" (SecurityDescriptor As SECURITY_DESCRIPTOR, [TypeHint(SECURITY_DESCRIPTOR_CONTROL)] Control As Integer, Revision As Long) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function RtlSetControlSecurityDescriptor Lib "ntoskrnl.exe" (SecurityDescriptor As SECURITY_DESCRIPTOR, [TypeHint(SECURITY_DESCRIPTOR_CONTROL)] ByVal ControlBitsOfInterest As Integer, [TypeHint(SECURITY_DESCRIPTOR_CONTROL)] ByVal ControlBitsToSet As Integer) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function RtlSetDaclSecurityDescriptor Lib "ntoskrnl.exe" (SecurityDescriptor As SECURITY_DESCRIPTOR, ByVal DaclPresent As Byte, ByVal Dacl As LongPtr, ByVal DaclDefaulted As Byte) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function RtlSetSaclSecurityDescriptor Lib "ntoskrnl.exe" (SecurityDescriptor As SECURITY_DESCRIPTOR, ByVal SaclPresent As Byte, ByVal Sacl As LongPtr, ByVal SaclDefaulted As Byte) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function RtlGetDaclSecurityDescriptor Lib "ntoskrnl.exe" (SecurityDescriptor As SECURITY_DESCRIPTOR, DaclPresent As Byte, Dacl As LongPtr, DaclDefaulted As Byte) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function RtlGetSaclSecurityDescriptor Lib "ntoskrnl.exe" (SecurityDescriptor As SECURITY_DESCRIPTOR, SaclPresent As Byte, Sacl As LongPtr, SaclDefaulted As Byte) As NTSTATUS
Public Declare PtrSafe Function RtlIsNameLegalDOS8Dot3 Lib "ntoskrnl.exe" (Name As UNICODE_STRING, OemName As OEM_STRING, NameContainsSpaces As Byte) As Byte
[UseGetLastError(False)] Public Declare PtrSafe Function RtlLocalTimeToSystemTime Lib "ntoskrnl.exe" (LocalTime As LARGE_INTEGER, SystemTime As LARGE_INTEGER) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Sub RtlInitializeBitMap Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP, BitmapBuffer As Any, ByVal SizeOfBitmap As Long)
[UseGetLastError(False)] Public Declare PtrSafe Sub RtlClearBit Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP, ByVal BitNumber As Long)
[UseGetLastError(False)] Public Declare PtrSafe Sub RtlSetBit Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP, ByVal BitNumber As Long)
[UseGetLastError(False)] Public Declare PtrSafe Function RtlTestBit Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP, ByVal BitNumber As Long) As Byte
[UseGetLastError(False)] Public Declare PtrSafe Sub RtlClearAllBits Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP)
[UseGetLastError(False)] Public Declare PtrSafe Sub RtlSetAllBits Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP)
[UseGetLastError(False)] Public Declare PtrSafe Function RtlFindClearBits Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP, ByVal NumberToFind As Long, ByVal HintIndex As Long) As Long
[UseGetLastError(False)] Public Declare PtrSafe Function RtlFindSetBits Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP, ByVal NumberToFind As Long, ByVal HintIndex As Long) As Long
[UseGetLastError(False)] Public Declare PtrSafe Function RtlFindClearBitsAndSet Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP, ByVal NumberToFind As Long, ByVal HintIndex As Long) As Long
[UseGetLastError(False)] Public Declare PtrSafe Function RtlFindSetBitsAndClear Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP, ByVal NumberToFind As Long, ByVal HintIndex As Long) As Long
[UseGetLastError(False)] Public Declare PtrSafe Sub RtlClearBits Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP, ByVal StartingIndex As Long, ByVal NumberToClear As Long)
[UseGetLastError(False)] Public Declare PtrSafe Sub RtlSetBits Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP, ByVal StartingIndex As Long, ByVal NumberToSet As Long)
[UseGetLastError(False)] Public Declare PtrSafe Function RtlFindMostSignificantBit Lib "ntoskrnl.exe" (ByVal Set As LongLong) As Byte
[UseGetLastError(False)] Public Declare PtrSafe Function RtlFindLeastSignificantBit Lib "ntoskrnl.exe" (ByVal Set As LongLong) As Byte
[UseGetLastError(False)] Public Declare PtrSafe Function RtlFindClearRuns Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP, RunArray As RTL_BITMAP_RUN, ByVal SizeOfRunArray As Long, ByVal LocateLongestRuns As Byte) As Long
[UseGetLastError(False)] Public Declare PtrSafe Function RtlFindLongestRunClear Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP, ByVal StartingIndex As Long) As Long
[UseGetLastError(False)] Public Declare PtrSafe Function RtlFindFirstRunClear Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP, ByVal StartingIndex As Long) As Long
[UseGetLastError(False)] Public Declare PtrSafe Function RtlCheckBit Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP, ByVal BitPosition As Long) As Byte
[UseGetLastError(False)] Public Declare PtrSafe Function RtlNumberOfClearBits Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP) As Long
[UseGetLastError(False)] Public Declare PtrSafe Function RtlNumberOfSetBits Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP) As Long
[UseGetLastError(False)] Public Declare PtrSafe Function RtlAreBitsClear Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP, ByVal StartingIndex As Long, ByVal Length As Long) As Byte
[UseGetLastError(False)] Public Declare PtrSafe Function RtlAreBitsSet Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP, ByVal StartingIndex As Long, ByVal Length As Long) As Byte
[UseGetLastError(False)] Public Declare PtrSafe Function RtlFindNextForwardRunClear Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP, ByVal FromIndex As Long, StartingRunIndex As Long) As Long
[UseGetLastError(False)] Public Declare PtrSafe Function RtlFindLastBackwardRunClear Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP, ByVal FromIndex As Long, StartingRunIndex As Long) As Long
[UseGetLastError(False)] Public Declare PtrSafe Function RtlNumberOfSetBitsUlongPtr Lib "ntoskrnl.exe" (ByVal Target As LongPtr) As Long
[UseGetLastError(False)] Public Declare PtrSafe Sub RtlInterlockedClearBitRun Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP, ByVal StartingIndex As Long, ByVal NumberToClear As Long)
[UseGetLastError(False)] Public Declare PtrSafe Sub RtlInterlockedSetBitRun Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP, ByVal StartingIndex As Long, ByVal NumberToSet As Long)
[UseGetLastError(False)] Public Declare PtrSafe Sub RtlCopyBitMap Lib "ntoskrnl.exe" (Source As RTL_BITMAP, Destination As RTL_BITMAP, ByVal TargetBit As Long)
[UseGetLastError(False)] Public Declare PtrSafe Sub RtlExtractBitMap Lib "ntoskrnl.exe" (Source As RTL_BITMAP, Destination As RTL_BITMAP, ByVal TargetBit As Long, ByVal NumberOfBits As Long)
[UseGetLastError(False)] Public Declare PtrSafe Function RtlNumberOfClearBitsInRange Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP, ByVal StartingIndex As Long, ByVal Length As Long) As Long
[UseGetLastError(False)] Public Declare PtrSafe Function RtlNumberOfSetBitsInRange Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP, ByVal StartingIndex As Long, ByVal Length As Long) As Long
[UseGetLastError(False)] Public Declare PtrSafe Sub RtlInitializeBitMapEx Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP_EX, BitMapBuffer As Any, ByVal SizeOfBitMap As LongLong)
[UseGetLastError(False)] Public Declare PtrSafe Function RtlTestBitEx Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP_EX, ByVal BitNumber As LongLong) As Byte
[UseGetLastError(False)] Public Declare PtrSafe Sub RtlClearAllBitsEx Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP_EX)
[UseGetLastError(False)] Public Declare PtrSafe Sub RtlClearBitEx Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP_EX, ByVal BitNumber As LongLong)
[UseGetLastError(False)] Public Declare PtrSafe Sub RtlSetBitEx Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP_EX, ByVal BitNumber As LongLong)
[UseGetLastError(False)] Public Declare PtrSafe Function RtlFindSetBitsEx Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP_EX, ByVal NumberToFind As LongLong, ByVal HintIndex As LongLong) As LongLong
[UseGetLastError(False)] Public Declare PtrSafe Function RtlFindSetBitsAndClearEx Lib "ntoskrnl.exe" (BitmapHeader As RTL_BITMAP_EX, ByVal NumberToFind As LongLong, ByVal HintIndex As LongLong) As LongLong

                                                                                                               


Public Declare PtrSafe Function ExAllocatePoolWithTag Lib "ntoskrnl.exe" (ByVal PoolType As POOL_TYPE, ByVal NumberOfBytes As LongPtr, ByVal Tag As Long) As LongPtr
Public Declare PtrSafe Sub ExFreePoolWithTag Lib "ntoskrnl.exe" (ByVal P As LongPtr, ByVal Tag As Long)
Public Declare PtrSafe Function ExAllocatePoolWithTagPriority Lib "ntoskrnl.exe" (ByVal PoolType As POOL_TYPE, ByVal NumberOfBytes As LongPtr, ByVal Tag As Long, ByVal Priority As EX_POOL_PRIORITY) As LongPtr
Public Declare PtrSafe Function ExAllocatePool2 Lib "ntoskrnl.exe" (ByVal PoolType As POOL_TYPE, ByVal NumberOfBytes As LongPtr, ByVal Tag As Long) As LongPtr
Public Declare PtrSafe Function ExAllocatePool3 Lib "ntoskrnl.exe" (ByVal PoolType As POOL_TYPE, ByVal NumberOfBytes As LongPtr, ByVal Tag As Long, ExtendedParameters as POOL_EXTENDED_PARAMETER, ByVal ExtendedParametersCount As Long) As LongPtr
Public Declare PtrSafe Sub ExFreePool2 Lib "ntoskrnl.exe" (ByVal P As LongPtr, ByVal Tag As Long, ExtendedParameters As POOL_EXTENDED_PARAMETER, ByVal ExtendedParametersCount As Long)
Public Declare PtrSafe Sub ExAcquireFastMutex Lib "ntoskrnl.exe" (FastMutex As FAST_MUTEX)
Public Declare PtrSafe Sub ExReleaseFastMutex Lib "ntoskrnl.exe" (FastMutex As FAST_MUTEX)
Public Declare PtrSafe Sub ExTryToAcquireFastMutex Lib "ntoskrnl.exe" (FastMutex As FAST_MUTEX)
Public Declare PtrSafe Function ExRaiseHardError Lib "ntoskrnl.exe" (ByVal ErrorStatus As NTSTATUS, ByVal NumberOfParameters As Long, ByVal UnicodeStringParametersMask As Long, Parameters As Any, ByVal ValidResponseOptions As HARDERROR_RESPONSE_OPTION, Response As HARDERROR_RESPONSE) As NTSTATUS
Public Declare PtrSafe Sub ExRaiseStatus Lib "ntoskrnl.exe" (ByVal Status As NTSTATUS)
Public Declare PtrSafe Function ExInterlockedAddLargeInteger Lib "ntoskrnl.exe" (Addend As LongLong, ByVal Value As LongLong, Lock As LongPtr) As LongLong
Public Declare PtrSafe Function ExInterlockedAddUlong Lib "ntoskrnl.exe" (Addend As Long, ByVal Value As Long, Lock As LongPtr) As Long
Public Declare PtrSafe Function ExInitializeResourceLite Lib "ntoskrnl.exe" (Resource As ERESOURCE) As NTSTATUS
Public Declare PtrSafe Function ExReinitializeResourceLite Lib "ntoskrnl.exe" (Resource As ERESOURCE) As NTSTATUS
Public Declare PtrSafe Function ExAcquireResourceSharedLite Lib "ntoskrnl.exe" (Resource As ERESOURCE, ByVal Wait As Byte) As Byte
Public Declare PtrSafe Function ExEnterCriticalRegionAndAcquireResourceShared Lib "ntoskrnl.exe" (Resource As ERESOURCE) As LongPtr
Public Declare PtrSafe Function ExAcquireResourceExclusiveLite Lib "ntoskrnl.exe" (Resource As ERESOURCE, ByVal Wait As Byte) As Byte
Public Declare PtrSafe Function ExEnterCriticalRegionAndAcquireResourceExclusive Lib "ntoskrnl.exe" (Resource As ERESOURCE) As LongPtr
Public Declare PtrSafe Function ExAcquireSharedStarveExclusive Lib "ntoskrnl.exe" (Resource As ERESOURCE, ByVal Wait As Byte) As Byte
Public Declare PtrSafe Function ExAcquireSharedWaitForExclusive Lib "ntoskrnl.exe" (Resource As ERESOURCE, ByVal Wait As Byte) As Byte
Public Declare PtrSafe Function ExEnterCriticalRegionAndAcquireSharedWaitForExclusive Lib "ntoskrnl.exe" (Resource As ERESOURCE) As LongPtr
Public Declare PtrSafe Sub ExReleaseResourceAndLeaveCriticalRegion Lib "ntoskrnl.exe" (Resource As ERESOURCE)
Public Declare PtrSafe Sub ExReleaseResourceForThreadLite Lib "ntoskrnl.exe" (Resource As ERESOURCE, ByVal ResourceThreadId As LongPtr)
Public Declare PtrSafe Sub ExSetResourceOwnerPointer Lib "ntoskrnl.exe" (Resource As ERESOURCE, ByVal OwnerPointer As LongPtr)
Public Declare PtrSafe Function ExDeleteResourceLite Lib "ntoskrnl.exe" (Resource As ERESOURCE) As NTSTATUS
Public Declare PtrSafe Function ExIsResourceAcquiredExclusiveLite Lib "ntoskrnl.exe" (Resource As ERESOURCE) As Byte
Public Declare PtrSafe Function ExIsResourceAcquiredSharedLite Lib "ntoskrnl.exe" (Resource As ERESOURCE) As Long
Public Function ExIsResourceAcquiredLite(Resource As ERESOURCE) As Long: Return ExIsResourceAcquiredSharedLite(Resource): End Function
'The following API uses the __fastcall calling convention, so cannot be used from x86 until tB supports that. On 64bit calls use x64call regardless of the x86 convention so 64bit is ok.
#If Win64 = 0 Then
[Unimplemented]
#End If
Public Declare PtrSafe Sub ExReleaseResourceLite /* FastCall */ Lib "ntoskrnl.exe" (Resource As ERESOURCE)
#If Win64 = 0 Then
[Unimplemented]
Public Sub ExReleaseResource(Resource As ERESOURCE): End Sub
#Else
Public Sub ExReleaseResource(Resource As ERESOURCE): ExReleaseResourceLite(Resource): End Sub
#End If



#If Win64 Then
Public Sub InterlockedIncrement(Addend As Long)
    Dim pksl As LongPtr, irql As Byte
    KeInitializeSpinLock pksl
    irql = KeAcquireSpinLock(pksl)
    ExInterlockedAddUlong(Addend, 1, pksl)
    KeReleaseSpinLock pksl, irql
End Sub
#Else
Public Declare PtrSafe Function InterlockedIncrement Lib "ntoskrnl.exe" (Addend As Long) As Long
#End If

Public Declare PtrSafe Sub ExInitializeNPagedLookasideList Lib "ntoskrnl.exe" (Lookaside As LongPtr, ByVal Allocate As LongPtr, ByVal Free As LongPtr, ByVal Flags As Long, ByVal Size As LongPtr, ByVal Tag As Long, ByVal Depth As Integer)
#If Win64 Then
Public Declare PtrSafe Function InterlockedPopEntrySList Lib "ntoskrnl.exe" Alias "ExpInterlockedPopEntrySList" (ByVal ListHead As LongPtr) As LongPtr
#Else
Public Declare PtrSafe Function InterlockedPopEntrySList Lib "ntoskrnl.exe" (ByVal ListHead As LongPtr) As LongPtr
#End If


Public Declare PtrSafe Function KeGetCurrentIrql Lib "ntoskrnl.exe" () As Byte
Public Declare PtrSafe Function KeRaiseIrqlToDpcLevel Lib "ntoskrnl.exe" () As Byte
Public Declare PtrSafe Sub KeInitializeEvent Lib "ntoskrnl.exe" (Event As KEVENT, ByVal Type As EVENT_TYPE, ByVal State As Byte)
Public Declare PtrSafe Function KeSetEvent Lib "ntoskrnl.exe" (Event As KEVENT, ByVal Increment As Long, ByVal Wait As Byte) As Long
Public Declare PtrSafe Function KeWaitForSingleObject Lib "ntoskrnl.exe" (Object As Any, ByVal WaitReason As KWAIT_REASON, ByVal WaitMode As Byte, ByVal Alertable As Byte, ByVal Timeout As LongPtr /*PLARGE_INTEGER*/) As Long
Public Declare PtrSafe Function KeInitializeSpinLock Lib "ntoskrnl.exe" (SpinLock As LongPtr) As Long
Public Declare PtrSafe Function KeAcquireSpinLock Lib "ntoskrnl.exe" Alias "KeAcquireSpinLockRaiseToDpc" (SpinLock As LongPtr) As Byte 'KIRQL
Public Declare PtrSafe Sub KeReleaseSpinLock Lib "ntoskrnl.exe" (SpinLock As LongPtr, [TypeHint(KIRQL)] ByVal NewIrql As Byte)
#If Win64 Then
Public Declare PtrSafe Function KfRaiseIrql Lib "ntoskrnl.exe" ([TypeHint(KIRQL)] ByVal NewIrql As Byte) As Byte
Public Declare PtrSafe Sub KeLowerIrql Lib "ntoskrnl.exe" ([TypeHint(KIRQL)] ByVal NewIrql As Byte)
Public Sub KeRaiseIrql([TypeHint(KIRQL)] ByVal NewIrql As Byte, OldIrql As Byte)
    OldIrql = KfRaiseIrql(NewIrql)
End Sub
#Else
[Unimplemented, Description("UNSUPPORTED on x86 - Uses __fastcall calling convention.")]
Public Declare PtrSafe Function KfRaiseIrql Lib "ntoskrnl.exe" ([TypeHint(KIRQL)] ByVal NewIrql As Byte) As Byte
[Unimplemented, Description("UNSUPPORTED on x86 - Uses __fastcall calling convention.")]
Public Declare PtrSafe Sub KfLowerIrql Lib "ntoskrnl.exe" ([TypeHint(KIRQL)] ByVal NewIrql As Byte)
[Unimplemented, Description("UNSUPPORTED on x86 - Uses __fastcall calling convention.")]
Public Declare PtrSafe Sub KeLowerIrql Lib "ntoskrnl.exe" Alias "KfLowerIrql" ([TypeHint(KIRQL)] ByVal NewIrql As Byte)
[Unimplemented, Description("UNSUPPORTED on x86 - Uses __fastcall calling convention.")]
Public Sub KeRaiseIrql([TypeHint(KIRQL)] ByVal NewIrql As Byte, OldIrql As Byte)
    OldIrql = KfRaiseIrql(NewIrql)
End Sub
#End If
Public Declare PtrSafe Sub KeQuerySystemTime Lib "ntoskrnl.exe" (CurrentTime As LARGE_INTEGER)
Public Declare PtrSafe Sub KeQuerySystemTimePrecise Lib "ntoskrnl.exe" (CurrentTime As LARGE_INTEGER)
Public Declare PtrSafe Function KeSetPriorityThread Lib "ntoskrnl.exe" (ByVal Thread As LongPtr, ByVal Priority As KPRIORITY) As KPRIORITY

Public Declare PtrSafe Sub PoStartNextPowerIrp Lib "ntoskrnl.exe" (pIrp As IRP)
Public Declare PtrSafe Function PoCallDriver Lib "ntoskrnl.exe" (DeviceObject As DEVICE_OBJECT, pIrp As IRP) As Long

Public Declare PtrSafe Function FsRtlIsNameInExpression Lib "ntoskrnl.exe" (Expression As UNICODE_STRING, pName As UNICODE_STRING, ByVal IgnoreCase As Byte, ByVal UpcaseTable As LongPtr) As Byte
Public Declare PtrSafe Function FsRtlIsNameInUnUpcasedExpression Lib "ntoskrnl.exe" (Expression As UNICODE_STRING, pName As UNICODE_STRING, ByVal IgnoreCase As Byte, ByVal UpcaseTable As LongPtr) As Byte
Public Declare PtrSafe Function FsRtlGetFileNameInformation Lib "ntoskrnl.exe" (FileObject As FILE_OBJECT, ByVal NameOptions As Long, FileName As UNICODE_STRING, FileNameInformation As FLT_FILE_NAME_INFORMATION) As NTSTATUS
Public Declare PtrSafe Function FsRtlGetFileSize Lib "ntoskrnl.exe" (FileObject As FILE_OBJECT, FileSize As LARGE_INTEGER) As NTSTATUS
Public Declare PtrSafe Function FsRtlIsPagingFile Lib "ntoskrnl.exe" (FileObject As FILE_OBJECT) As Long
Public Declare PtrSafe Function FsRtlIsSystemPagingFile Lib "ntoskrnl.exe" (FileObject As FILE_OBJECT) As Long


Public Declare PtrSafe Sub SeLockSubjectContext Lib "ntoskrnl.exe" (SubjectContext As SECURITY_SUBJECT_CONTEXT)
Public Declare PtrSafe Sub SeUnlockSubjectContext Lib "ntoskrnl.exe" (SubjectContext As SECURITY_SUBJECT_CONTEXT)
Public Function SeQuerySubjectContextToken(SubjectContext As SECURITY_SUBJECT_CONTEXT) as LongPtr
    If SubjectContext.ClientToken then
        return SubjectContext.ClientToken
    else
        Return SubjectContext.PrimaryToken
    End If
End Function
Public Declare PtrSafe Function SeQueryInformationToken Lib "ntoskrnl.exe" (ByVal Token as LongPtr, ByVal TokenInformationClass as TOKEN_INFORMATION_CLASS, TokenInformation as Any) as NTSTATUS
[Description("Returns the full path of a process given an EPROCESS pointer.")]
Public Declare PtrSafe Function SeLocateProcessImageName Lib "ntoskrnl.exe" (ByVal Process As LongPtr, ImageFileName As UNICODE_STRING) As NTSTATUS
Public Declare PtrSafe Function SeAssignSecurity Lib "ntoskrnl.exe" (ByVal ParentDescriptor as LongPtr, ByVal ExplicitDescriptor as LongPtr, NewDescriptor as LongPtr, ByVal IsDirectoryObject as Byte,SubjectContext As SECURITY_SUBJECT_CONTEXT, GenericMapping as GENERIC_MAPPING, ByVal PoolType as POOL_TYPE) as NTSTATUS
Public Declare PtrSafe Function SeComputeAutoInheritByObjectType Lib "ntoskrnl.exe" (ByVal ObjectType as LongPtr, Optional ByVal SecurityDescriptor as LongPtr = 0, Optional ByVal ParentSecurityDescriptor As LongPtr = 0) As Long
Public Declare PtrSafe Function SeAssignSecurityEx Lib "ntoskrnl.exe" (ByVal ParentDescriptor as LongPtr, ByVal ExplicitDescriptor as LongPtr, NewDescriptor as LongPtr, ObjectType as UUID,  ByVal IsDirectoryObject as Byte, ByVal AutoInheritFlags as SEF_FLAGS, SubjectContext As SECURITY_SUBJECT_CONTEXT, GenericMapping as GENERIC_MAPPING, ByVal PoolType As POOL_TYPE) As NTSTATUS
Public Declare PtrSafe Function SeAccessCheck Lib "ntoskrnl.exe" (ByVal SecurityDescriptor as LongPtr,SubjectContext As SECURITY_SUBJECT_CONTEXT, byval SubjectContextLocked as Byte, ByVal DesiredAccess as Long, ByVal PreviouslyGrantedAccess as Long, Priveleges as LongPtr, GenericMapping As GENERIC_MAPPING, [typehint( KPROCESSOR_MODE,)] ByVal AccessMode as byte, GrantedAccess as Long, AccessStatus as NTSTATUS) as Byte




Public Declare PtrSafe Function MmCopyMemory Lib "ntoskrnl.exe" (TargetAddress As Any, ByVal SourceAddress As LongLong, ByVal NumberOfBytes As Long, ByVal Flags As MM_COPY_FLAGS, NumberOfBytesTransferred As LongPtr) As Long
Public Declare PtrSafe Function MmIsAddressValid Lib "ntoskrnl.exe" (ByVal VirtualAddress As LongPtr) As Byte
Public Declare PtrSafe Function MmGetSystemRoutineAddress Lib "ntoskrnl.exe" (SystemRoutineName As UNICODE_STRING) As LongPtr
Public Declare PtrSafe Function MmMapLockedPagesSpecifyCache Lib "ntoskrnl.exe" (ByVal MemoryDescriptorList As LongPtr, [TypeHint(KPROCESSOR_MODE)] ByVal AccessMode As Byte, ByVal CacheType As MEMORY_CACHING_TYPE, ByVal RequestedAddress As LongPtr, ByVal BugCheckOnFailure As Long, [TypeHint(MM_PAGE_PRIORITY, MdlMappingFlags)] ByVal Priority As Long) As LongPtr

Public Declare PtrSafe Function ZwCreateUserProcess Lib "ntoskrnl.exe" (ProcessHandle As LongPtr, ThreadHandle As LongPtr, [TypeHint(ProcessAccessRights, StandardAccessTypes)] ByVal ProcessDesiredAccess As Long, [TypeHint(ThreadAccessRights, StandardAccessTypes)] ByVal ThreadDesiredAccess As Long, _
                                                                    ProcessObjectAttributes As OBJECT_ATTRIBUTES, ThreadObjectAttributes As OBJECT_ATTRIBUTES, ByVal ProcessFlags As PROCESS_CREATE_FLAGS, ByVal ThreadFlags As THREAD_CREATE_FLAGS, ProcessParameters As Any, CreateInfo As PS_CREATE_INFO, AttributeList As PS_ATTRIBUTE_LIST) As NTSTATUS
Public Declare PtrSafe Function ZwCreateFile Lib "ntoskrnl.exe" (FileHandle As LongPtr, [TypeHint(GenericRights, FileAccessRights)] ByVal DesiredAccess As Long, ObjectAttributes As OBJECT_ATTRIBUTES, IoStatusBlock As IO_STATUS_BLOCK, AllocationSize As Any, ByVal FileAttributes As FILE_ATTRIBUTES, ByVal ShareAccess As FileShareMode, ByVal CreateDisposition As FileCreateDisposition, ByVal CreateOptions As FileAccessFlags, EaBuffer As Any, ByVal EaLength As Long) As NTSTATUS
Public Declare PtrSafe Function ZwClose Lib "ntoskrnl.exe" (ByVal Handle As LongPtr) As NTSTATUS
Public Declare PtrSafe Function ZwOpenProcess Lib "ntoskrnl.exe" (ProcessHandle As LongPtr, [TypeHint(ProcessAccessRights, StandardAccessTypes)] ByVal DesiredAccess As Long, ObjectAttributes As OBJECT_ATTRIBUTES, ClientID As CLIENT_ID) As Long
Public Declare PtrSafe Function ZwSuspendProcess Lib "ntoskrnl.exe" (ByVal hProcess As LongPtr) As Long
Public Declare PtrSafe Function ZwResumeProcess Lib "ntoskrnl.exe" (ByVal hProcess As LongPtr) As Long
Public Declare PtrSafe Function ZwDuplicateObject Lib "ntoskrnl.exe" (ByVal SourceProcessHandle As LongPtr, ByVal SourceHandle As LongPtr, pTargetHandle As LongPtr, ByVal DesiredAccess As Long, ByVal HandleAttributes As ObjectAttributeValues, ByVal Options As DuplicateObjectOptions) As Long
Public Declare PtrSafe Function ZwOpenSymbolicLinkObject Lib "ntoskrnl.exe" (LinkHandle As LongPtr, [TypeHint(GenericRights, StandardAccessTypes)] ByVal DesiredAccess As Long, ObjectAttributes As OBJECT_ATTRIBUTES) As NTSTATUS
Public Declare PtrSafe Function ZwQuerySymbolicLinkObject Lib "ntoskrnl.exe" (ByVal LinkHandle As LongPtr, LinkTarget As UNICODE_STRING, ReturnedLength As Long) As NTSTATUS
Public Declare PtrSafe Function ZwMapViewOfSection Lib "ntoskrnl.exe" (ByVal SectionHandle As LongPtr, ByVal ProcessHandle As LongPtr, BaseAddress As LongPtr, ByVal ZeroBits As LongPtr, ByVal CommitSize As LongPtr, SectionOffset As LARGE_INTEGER, ViewSize As LongPtr, ByVal AllocationType As MemAllocType, ByVal Win32Protect As MemProtectFlags) As NTSTATUS
Public Declare PtrSafe Function ZwUnmapViewOfSection Lib "ntoskrnl.exe" (ByVal ProcessHandle As LongPtr, Optional ByVal BaseAddress As LongPtr) As NTSTATUS
Public Declare PtrSafe Function ZwOpenSection Lib "ntoskrnl.exe" (SectionHandle As LongPtr, [TypeHint(StandardAccessTypes, NTSectionAccessRights, GenericRights)] ByVal DesiredAccess As Long, ObjectAttributes As OBJECT_ATTRIBUTES) As NTSTATUS
Public Declare PtrSafe Function ZwCreateSection Lib "ntoskrnl.exe" (SectionHandle As LongPtr, [TypeHint(StandardAccessTypes, NTSectionAccessRights)] ByVal DesiredAccess As Long, ObjectAttributes As OBJECT_ATTRIBUTES, MaximumSize As LARGE_INTEGER, ByVal SectionPageProtection As MemProtectFlags, ByVal AllocationAttributes As NTSectionFlags, Optional ByVal FileHandle As LongPtr) As NTSTATUS
Public Declare PtrSafe Function ZwQueryDirectoryFile Lib "ntoskrnl.exe" (ByVal FileHandle As LongPtr, ByVal hEvent As LongPtr, ByVal ApcRoutine As LongPtr, ByVal ApcContext As LongPtr, ByRef IoStatusBlock As IO_STATUS_BLOCK, FileInformation As Any, ByVal Length As Long, ByVal FileInformationClass As FILE_INFORMATION_CLASS, ByVal ReturnSingleEntry As Byte, FileName As Any, ByVal RestartScan As Byte) As NTSTATUS
Public Declare PtrSafe Function ZwQueryDirectoryFileEx Lib "ntoskrnl.exe" (ByVal FileHandle As LongPtr, ByVal hEvent As LongPtr, ByVal ApcRoutine As LongPtr, ByVal ApcContext As LongPtr, ByRef IoStatusBlock As IO_STATUS_BLOCK, FileInformation As Any, ByVal Length As Long, ByVal FileInformationClass As FILE_INFORMATION_CLASS, ByVal QueryFlags As NtFileQueryFlags, Filename As UNICODE_STRING) As NTSTATUS
Public Declare PtrSafe Function ZwReadFile Lib "ntoskrnl.exe" (ByVal FileHandle As LongPtr, ByVal hEvent As LongPtr, ByVal ApcRoutine As LongPtr, ByVal ApcContext As LongPtr, ByRef IoStatusBlock As IO_STATUS_BLOCK, Buffer As Any, ByVal Length As Long, ByteOffset As LARGE_INTEGER, Optional Key As Long) As NTSTATUS
Public Declare PtrSafe Function ZwWriteFile Lib "ntoskrnl.exe" (ByVal FileHandle As LongPtr, ByVal hEvent As LongPtr, ByVal ApcRoutine As LongPtr, ByVal ApcContext As LongPtr, ByRef IoStatusBlock As IO_STATUS_BLOCK, Buffer As Any, ByVal Length As Long, ByteOffset As LARGE_INTEGER, Optional Key As Long) As NTSTATUS
Public Declare PtrSafe Function ZwLockFile Lib "ntoskrnl.exe" (ByVal FileHandle As LongPtr, ByVal hEvent As LongPtr, ByVal ApcRoutine As LongPtr, ByVal ApcContext As LongPtr, ByRef IoStatusBlock As IO_STATUS_BLOCK, ByteOffset As LARGE_INTEGER, Length As LARGE_INTEGER, ByVal Key As Long, ByVal FailImmediately As Byte, ByVal ExclusiveLock As Byte) As NTSTATUS
Public Declare PtrSafe Function ZwFsControlFile Lib "ntoskrnl.exe" (ByVal FileHandle As LongPtr, ByVal hEvent As LongPtr, ByVal ApcRoutine As LongPtr, ByVal ApcContext As LongPtr, ByRef IoStatusBlock As IO_STATUS_BLOCK, ByVal FsControlCode As Long, InputBuffer As Any, ByVal InputBufferLength As Long, OutputBuffer As Any, ByVal OutputBufferLength As Long) As NTSTATUS
Public Declare PtrSafe Function ZwUnlockFile Lib "ntoskrnl.exe" (ByVal FileHandle As LongPtr, ByRef IoStatusBlock As IO_STATUS_BLOCK, ByteOffset As LARGE_INTEGER, Length As LARGE_INTEGER, ByVal Key As Long) As NTSTATUS
Public Declare PtrSafe Function ZwDeleteFile Lib "ntoskrnl.exe" (ObjectAttributes As OBJECT_ATTRIBUTES) As NTSTATUS
Public Declare PtrSafe Function ZwCreateDirectoryObject Lib "ntoskrnl.exe" (DirectoryHandle As LongPtr, [TypeHint(GenericRights, DirectoryAccessRights)] ByVal DesiredAccess As Long, ObjectAttributes As OBJECT_ATTRIBUTES) As NTSTATUS
Public Declare PtrSafe Function ZwOpenDirectoryObject Lib "ntoskrnl.exe" (DirectoryHandle As LongPtr, [TypeHint(GenericRights, DirectoryAccessRights)] ByVal DesiredAccess As Long, ObjectAttributes As OBJECT_ATTRIBUTES) As NTSTATUS
Public Declare PtrSafe Function ZwQueryDirectoryObject Lib "ntoskrnl.exe" (ByVal DirectoryHandle As LongPtr, Buffer As Any, ByVal Length As Long, ByVal ReturnSingleEntry As Byte, ByVal RestartScan As Byte, Context As Long, Optional ReturnLength As Long) As NTSTATUS


Public Function ZwCurrentProcess() As LongPtr: Return (-1): End Function
Public Function ZwCurrentThread() As LongPtr: Return (-2): End Function
Public Function ZwCurrentProcessToken() As LongPtr: Return (-4): End Function
Public Function ZwCurrentThreadToken() As LongPtr: Return (-5): End Function
Public Function ZwCurrentThreadEffectiveToken() As LongPtr: Return (-6): End Function

Public Function ZwCurrentPeb() As LongPtr: Return RtlGetCurrentPeb(): End Function
#If (TWINBASIC_BUILD >= 606) Then
Public Function ZwCurrentTeb CDecl Naked() As LongPtr
    #If Win64 Then
    Emit(&H65, &H48, &H8b, &H04, &H25, &H30, &H00)   'mov    rax,QWORD PTR gs:0x30
    Emit(&H00, &H00)
    Emit(&Hc3)                                       'ret      
    #Else
    Emit(&H64, &Ha1, &H18, &H00, &H00, &H00)    'mov    eax,fs:0x18
    Emit(&Hc3)                                  'ret
    #End If
End Function
#End If

Public Declare PtrSafe Sub ProbeForRead Lib "ntoskrnl.exe" (ByVal Address As LongPtr, ByVal Length As LongPtr, ByVal ALignment As Long)
Public Declare PtrSafe Sub ProbeForWrite Lib "ntoskrnl.exe" (ByVal Address As LongPtr, ByVal Length As LongPtr, ByVal ALignment As Long)


#Region "Registry"
Public Enum NtLoadKeyExFlags
    NTLKEF_AppKey = &H10
    NTLKEF_Exclusive = &H20
    NTLKEF_Unknown800 = &H800
    NTLKEF_ReadOnly = &H2000
End Enum
Public Enum RegistryCreateDispositions
    REG_CREATED_NEW_KEY = (&H00000001)  ' New Registry Key created
    REG_OPENED_EXISTING_KEY = (&H00000002)  ' Existing Key opened
End Enum
Public Enum RegOptions
    REG_OPTION_RESERVED = (&H00000000)  ' Parameter is reserved
    REG_OPTION_NON_VOLATILE = (&H00000000)  ' Key is preserved when system is rebooted
    REG_OPTION_VOLATILE = (&H00000001)  ' Key is not preserved when system is rebooted
    REG_OPTION_CREATE_LINK = (&H00000002)  ' Created key is a symbolic link
    REG_OPTION_BACKUP_RESTORE = (&H00000004)  ' open for backup or restore special access rules privilege required
    REG_OPTION_OPEN_LINK = (&H00000008)  ' Open symbolic link
    REG_OPTION_DONT_VIRTUALIZE = (&H00000010)  ' Disable Open/Read/Write virtualization for this open and the resulting handle.
    REG_LEGAL_OPTION = (REG_OPTION_RESERVED Or REG_OPTION_NON_VOLATILE Or REG_OPTION_VOLATILE Or REG_OPTION_CREATE_LINK Or REG_OPTION_BACKUP_RESTORE Or REG_OPTION_OPEN_LINK Or REG_OPTION_DONT_VIRTUALIZE)
    REG_OPEN_LEGAL_OPTION = (REG_OPTION_RESERVED Or REG_OPTION_BACKUP_RESTORE Or REG_OPTION_OPEN_LINK Or REG_OPTION_DONT_VIRTUALIZE)
End Enum

Public Enum RegUnloadFlags
    REG_FORCE_UNLOAD = 1
    REG_UNLOAD_LEGAL_FLAGS = (REG_FORCE_UNLOAD)
End Enum

Public Enum CM_EXTENDED_PARAMETER_TYPE
    CmExtendedParameterInvalidType
    CmExtendedParameterTrustClassKey
    CmExtendedParameterEvent
    CmExtendedParameterFileAccessToken
    CmExtendedParameterMax
End Enum

Public Const CM_EXTENDED_PARAMETER_TYPE_BITS = 8

' typedef struct DECLSPEC_ALIGN(8) _CM_EXTENDED_PARAMETER
Public Type CM_EXTENDED_PARAMETER
    ' struct
    ' {
        ' ULONG64 Type : CM_EXTENDED_PARAMETER_TYPE_BITS;
        ' ULONG64 Reserved : 64 - CM_EXTENDED_PARAMETER_TYPE_BITS;
    ' };
    uType As LongLong
    ' union
    ' {
        ' ULONG64 ULong64;
        ' PVOID Pointer;
        ' SIZE_T Size;
        ' HANDLE Handle;
        ' ULONG ULong;
        ' ACCESS_MASK AccessMask;
    ' };
    u As LongLong
End Type

Public Enum RegNotifyChangeValues
    REG_NOTIFY_CHANGE_NAME = (&H00000001)  ' Create or delete (child)
    REG_NOTIFY_CHANGE_ATTRIBUTES = (&H00000002)
    REG_NOTIFY_CHANGE_LAST_SET = (&H00000004)  ' time stamp
    REG_NOTIFY_CHANGE_SECURITY = (&H00000008)
    REG_NOTIFY_THREAD_AGNOSTIC = (&H10000000)  ' Not associated with a calling thread, can only be used
                                                '  for async user event based notification
    REG_LEGAL_CHANGE_FILTER = (REG_NOTIFY_CHANGE_NAME Or REG_NOTIFY_CHANGE_ATTRIBUTES Or REG_NOTIFY_CHANGE_LAST_SET Or REG_NOTIFY_CHANGE_SECURITY Or REG_NOTIFY_THREAD_AGNOSTIC)
End Enum

[UseGetLastError(False)] Public Declare PtrSafe Function ZwCreateKey Lib "ntoskrnl.exe" (KeyHandle As LongPtr, [TypeHint(REGSAM, StandardAccessTypes, GenericRights)] ByVal DesiredAccess As Long, ObjectAttributes As OBJECT_ATTRIBUTES, ByVal TitleIndex As Long, Class As UNICODE_STRING, ByVal CreateOptions As RegOptions, Disposition As RegistryCreateDispositions) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwCreateKeyTransacted Lib "ntoskrnl.exe" (KeyHandle As LongPtr, [TypeHint(REGSAM, StandardAccessTypes, GenericRights)] ByVal DesiredAccess As Long, ObjectAttributes As OBJECT_ATTRIBUTES, ByVal TitleIndex As Long, Class As UNICODE_STRING, ByVal CreateOptions As RegOptions, ByVal TransactionHandle As LongPtr, Disposition As RegistryCreateDispositions) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwOpenKey Lib "ntoskrnl.exe" (KeyHandle As LongPtr, [TypeHint(REGSAM, StandardAccessTypes, GenericRights)] ByVal DesiredAccess As Long, ObjectAttributes As OBJECT_ATTRIBUTES) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwOpenKeyTransacted Lib "ntoskrnl.exe" (KeyHandle As LongPtr, [TypeHint(REGSAM, StandardAccessTypes, GenericRights)] ByVal DesiredAccess As Long, ObjectAttributes As OBJECT_ATTRIBUTES, ByVal TransactionHandle As LongPtr) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwOpenKeyEx Lib "ntoskrnl.exe" (KeyHandle As LongPtr, [TypeHint(REGSAM, StandardAccessTypes, GenericRights)] ByVal DesiredAccess As Long, ObjectAttributes As OBJECT_ATTRIBUTES, ByVal OpenOptions As RegOptions) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwOpenKeyTransactedEx Lib "ntoskrnl.exe" (KeyHandle As LongPtr, [TypeHint(REGSAM, StandardAccessTypes, GenericRights)] ByVal DesiredAccess As Long, ObjectAttributes As OBJECT_ATTRIBUTES, ByVal OpenOptions As RegOptions, ByVal TransactionHandle As LongPtr) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwDeleteKey Lib "ntoskrnl.exe" (ByVal KeyHandle As LongPtr) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwRenameKey Lib "ntoskrnl.exe" (ByVal KeyHandle As LongPtr, NewName As UNICODE_STRING) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwDeleteValueKey Lib "ntoskrnl.exe" (ByVal KeyHandle As LongPtr, ValueName As UNICODE_STRING) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwQueryKey Lib "ntoskrnl.exe" (ByVal KeyHandle As LongPtr, ByVal KeyInformationClass As KEY_INFORMATION_CLASS, KeyInformation As Any, ByVal Length As Long, ResultLength As Long) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwSetInformationKey Lib "ntoskrnl.exe" (ByVal KeyHandle As LongPtr, ByVal KeySetInformationClass As KEY_SET_INFORMATION_CLASS, KeySetInformation As Any, ByVal KeySetInformationLength As Long) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwQueryValueKey Lib "ntoskrnl.exe" (ByVal KeyHandle As LongPtr, ValueName As UNICODE_STRING, ByVal KeyValueInformationClass As KEY_VALUE_INFORMATION_CLASS, KeyValueInformation As Any, ByVal Length As Long, ResultLength As Long) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwSetValueKey Lib "ntoskrnl.exe" (ByVal KeyHandle As LongPtr, ValueName As UNICODE_STRING, ByVal TitleIndex As Long, ByVal Type As REGTYPES, Data As Any, ByVal DataSize As Long) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwQueryMultipleValueKey Lib "ntoskrnl.exe" (ByVal KeyHandle As LongPtr, ValueEntries As Any, ByVal EntryCount As Long, ValueBuffer As Any, BufferLength As Long, Optional RequiredBufferLength As Long) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwEnumerateKey Lib "ntoskrnl.exe" (ByVal KeyHandle As LongPtr, ByVal Index As Long, ByVal KeyInformationClass As KEY_INFORMATION_CLASS, KeyInformation As Any, ByVal Length As Long, ResultLength As Long) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwEnumerateValueKey Lib "ntoskrnl.exe" (ByVal KeyHandle As LongPtr, ByVal Index As Long, ByVal KeyValueInformationClass As KEY_VALUE_INFORMATION_CLASS, KeyValueInformation As Any, ByVal Length As Long, ResultLength As Long) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwFlushKey Lib "ntoskrnl.exe" (ByVal KeyHandle As LongPtr) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwCompactKeys Lib "ntoskrnl.exe" (ByVal Count As Long, KeyArray As LongPtr) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwCompressKey Lib "ntoskrnl.exe" (ByVal KeyHandle As LongPtr) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwLoadKey Lib "ntoskrnl.exe" (TargetKey As OBJECT_ATTRIBUTES, SourceFile As OBJECT_ATTRIBUTES) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwLoadKey2 Lib "ntoskrnl.exe" (TargetKey As OBJECT_ATTRIBUTES, SourceFile As OBJECT_ATTRIBUTES, ByVal Flags As RegKeyRestoreAndLoadHiveFlags) As NTSTATUS
[Description("NOTE: This function existed prior to Vista but only had 4 arguments.")]
[UseGetLastError(False)] Public Declare PtrSafe Function ZwLoadKeyEx Lib "ntoskrnl.exe" (TargetKey As OBJECT_ATTRIBUTES, SourceFile As OBJECT_ATTRIBUTES, ByVal Flags As NtLoadKeyExFlags, ByVal TrustClassKey As LongPtr, ByVal Event As LongPtr, [TypeHint(REGSAM, StandardAccessTypes, GenericRights)] ByVal DesiredAccess As Long, RootHandle As LongPtr, ByVal Reserved As LongPtr) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwLoadKey3 Lib "ntoskrnl.exe" (TargetKey As OBJECT_ATTRIBUTES, SourceFile As OBJECT_ATTRIBUTES, ByVal Flags As RegKeyRestoreAndLoadHiveFlags, ExtendedParameters As CM_EXTENDED_PARAMETER, ByVal ExtendedParameterCount As Long, [TypeHint(REGSAM, StandardAccessTypes, GenericRights)] ByVal DesiredAccess As Long, RootHandle As LongPtr, ByVal Reserved As LongPtr) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwReplaceKey Lib "ntoskrnl.exe" (NewFile As OBJECT_ATTRIBUTES, ByVal TargetHandle As LongPtr, OldFile As OBJECT_ATTRIBUTES) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwSaveKey Lib "ntoskrnl.exe" (ByVal KeyHandle As LongPtr, ByVal FileHandle As LongPtr) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwSaveKeyEx Lib "ntoskrnl.exe" (ByVal KeyHandle As LongPtr, ByVal FileHandle As LongPtr, ByVal Format As RegSaveKeyFlags) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwSaveMergedKeys Lib "ntoskrnl.exe" (ByVal HighPrecedenceKeyHandle As LongPtr, ByVal LowPrecedenceKeyHandle As LongPtr, ByVal FileHandle As LongPtr) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwRestoreKey Lib "ntoskrnl.exe" (ByVal KeyHandle As LongPtr, ByVal FileHandle As LongPtr, ByVal Flags As RegKeyRestoreAndLoadHiveFlags) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwUnloadKey Lib "ntoskrnl.exe" (TargetKey As OBJECT_ATTRIBUTES) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwUnloadKey2 Lib "ntoskrnl.exe" (TargetKey As OBJECT_ATTRIBUTES, ByVal Flags As RegUnloadFlags) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwUnloadKeyEx Lib "ntoskrnl.exe" (TargetKey As OBJECT_ATTRIBUTES, ByVal Event As LongPtr) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwNotifyChangeKey Lib "ntoskrnl.exe" (ByVal KeyHandle As LongPtr, ByVal Event As LongPtr, ByVal ApcRoutine As LongPtr, ByVal ApcContext As LongPtr, IoStatusBlock As IO_STATUS_BLOCK, ByVal CompletionFilter As RegNotifyChangeValues, ByVal WatchTree As Byte, Buffer As Any, ByVal BufferSize As Long, ByVal Asynchronous As Byte) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwNotifyChangeMultipleKeys Lib "ntoskrnl.exe" (ByVal MasterKeyHandle As LongPtr, ByVal Count As Long, SubordinateObjects As OBJECT_ATTRIBUTES, ByVal Event As LongPtr, ByVal ApcRoutine As LongPtr, ByVal ApcContext As LongPtr, IoStatusBlock As IO_STATUS_BLOCK, ByVal CompletionFilter As RegNotifyChangeValues, ByVal WatchTree As Byte, Buffer As Any, ByVal BufferSize As Long, ByVal Asynchronous As Byte) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwQueryOpenSubKeys Lib "ntoskrnl.exe" (TargetKey As OBJECT_ATTRIBUTES, HandleCount As Long) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwQueryOpenSubKeysEx Lib "ntoskrnl.exe" (TargetKey As OBJECT_ATTRIBUTES, ByVal BufferLength As Long, Buffer As Any, RequiredSize As Long) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwInitializeRegistry Lib "ntoskrnl.exe" (ByVal BootCondition As Integer) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwLockRegistryKey Lib "ntoskrnl.exe" (ByVal KeyHandle As LongPtr) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwLockProductActivationKeys Lib "ntoskrnl.exe" (pPrivateVer As Long, pSafeMode As Long) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwFreezeRegistry Lib "ntoskrnl.exe" (ByVal TimeOutInSeconds As Long) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwThawRegistry Lib "ntoskrnl.exe" () As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwCreateRegistryTransaction Lib "ntoskrnl.exe" (RegistryTransactionHandle As LongPtr, [TypeHint(REGSAM, StandardAccessTypes, GenericRights)] ByVal DesiredAccess As Long, ObjAttributes As OBJECT_ATTRIBUTES, ByVal CreateOptions As Long) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwOpenRegistryTransaction Lib "ntoskrnl.exe" (RegistryTransactionHandle As LongPtr, [TypeHint(REGSAM, StandardAccessTypes, GenericRights)] ByVal DesiredAccess As Long, ObjAttributes As OBJECT_ATTRIBUTES) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwCommitRegistryTransaction Lib "ntoskrnl.exe" (ByVal RegistryTransactionHandle As LongPtr, ByVal Flags As Long) As NTSTATUS
[UseGetLastError(False)] Public Declare PtrSafe Function ZwRollbackRegistryTransaction Lib "ntoskrnl.exe" (ByVal RegistryTransactionHandle As LongPtr, ByVal Flags As Long) As NTSTATUS

#End Region

Public Declare PtrSafe Function ObOpenObjectByPointer Lib "ntoskrnl.exe" (ByVal Object As LongPtr, ByVal HandleAttributes As ObjectAttributeValues, ByVal PassedAccessState As LongPtr, [TypeHint(GenericRights)] ByVal DesiredAccess As Long, ByVal ObjectType As LongPtr, [TypeHint(KPROCESSOR_MODE)] ByVal AccessMode As Byte, Handle As LongPtr) As NTSTATUS
Public Declare PtrSafe Function ObRegisterCallbacks Lib "ntoskrnl.exe" (CallbackRegistration As OB_CALLBACK_REGISTRATION, RegistrationHandle As LongPtr) As NTSTATUS
Public Declare PtrSafe Sub ObUnRegisterCallbacks Lib "ntoskrnl.exe" (ByVal RegistrationHandle As LongPtr)
Public Declare PtrSafe Function ObGetFilterVersion Lib "ntoskrnl.exe" () As Integer
[Description("WARNING: This function is currently unsupport and will trigger a bluescreen on x86. (Unsupported calling convention: FASTCALL)")]
Public Declare PtrSafe Function ObDereferenceObject Lib "ntoskrnl.exe" Alias "ObfDereferenceObject" (Object As Any) As LongPtr

Public Declare PtrSafe Function CmRegisterCallback Lib "ntoskrnl.exe" (ByVal lpfn As LongPtr, Context As Any, Cookie As LARGE_INTEGER) As NTSTATUS
Public Declare PtrSafe Function CmRegisterCallbackEx Lib "ntoskrnl.exe" (ByVal lpfn As LongPtr, Altitude As UNICODE_STRING, Driver As Any, Context As Any, Cookie As LARGE_INTEGER, ByVal Reserved As LongPtr) As NTSTATUS
[Description("Pass Cookie.QuadPart")]
Public Declare PtrSafe Function CmUnRegisterCallback Lib "ntoskrnl.exe" (ByVal Cookie As LongLong) As NTSTATUS
Public Declare PtrSafe Function CmCallbackGetKeyObjectIDEx Lib "ntoskrnl.exe" (Cookie As LARGE_INTEGER, ByVal Object As LongPtr, ObjectId As LongPtr, ObjectName As LongPtr, ByVal Flags As Long) As NTSTATUS
Public Declare PtrSafe Sub CmCallbackReleaseKeyObjectIDEx Lib "ntoskrnl.exe" (ObjectName As UNICODE_STRING)

[IgnoreWarnings(TB0025)]
[DebugOnly]
[Description("This allows you to enable compiler message TB0025 for unused variables, but acknowledge ones that are deliberately unused to prevent receiving it.\" & vbcrlf & "This will not be compiled into your binary.")]
Public Sub UNREFERENCED_PARAMETER(Of T)(arg As T)
    
End Sub

Public Function min(ByVal x As Long, ByVal y As Long) As Long: Return If(x < y, x, y): End Function
Public Function max(ByVal x As Long, ByVal y As Long) As Long: Return If(x > y, x, y): End Function

Public Function NT_SUCCESS(ByVal Status As Long) As Boolean
    NT_SUCCESS = Status >= STATUS_SUCCESS
End Function
Public Function NT_ERROR(ByVal Status As Long) As Boolean
    NT_ERROR = Status < &Hc0000000
End Function

[Description("Performs an unsigned add on a LongPtr (Long or LongLong)")]
Public Function PointerAdd(ByVal Start As LongPtr, ByVal Incr As LongPtr) As LongPtr
    #If Win64 Then
    Return ((Start Xor &H8000000000000000) + Incr) Xor &H8000000000000000
    #Else
    Return ((Start Xor &H80000000) + Incr) Xor &H80000000
    #End If
End Function

Public Const FSCTL_OFFLOAD_WRITE = &H98268                'CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 154, METHOD_BUFFERED, FILE_WRITE_ACCESS)

Public Sub InitIOCTLs()
    IOCTL_DISK_GET_DRIVE_GEOMETRY = CTL_CODE(IOCTL_DISK_BASE, &H0000, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_DISK_GET_PARTITION_INFO = CTL_CODE(IOCTL_DISK_BASE, &H0001, METHOD_BUFFERED, FILE_READ_ACCESS)
    IOCTL_DISK_IS_WRITABLE = CTL_CODE(IOCTL_DISK_BASE, &H0009, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_DISK_GET_MEDIA_TYPES = CTL_CODE(IOCTL_DISK_BASE, &H0300, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_DISK_CHECK_VERIFY = CTL_CODE(IOCTL_DISK_BASE, &H0200, METHOD_BUFFERED, FILE_READ_ACCESS)
    IOCTL_DISK_SET_PARTITION_INFO = CTL_CODE(IOCTL_DISK_BASE, &H0002, METHOD_BUFFERED, FILE_READ_ACCESS Or FILE_WRITE_ACCESS)
    IOCTL_MOUNTMGR_QUERY_POINTS = CTL_CODE(MOUNTMGRCONTROLTYPE, 2, METHOD_BUFFERED, FILE_ANY_ACCESS)
    IOCTL_MOUNTDEV_QUERY_DEVICE_NAME = CTL_CODE(MOUNTDEVCONTROLTYPE, 2, METHOD_BUFFERED, FILE_ANY_ACCESS)
    FT_BALANCED_READ_MODE = CTL_CODE(FTTYPE, 6, METHOD_NEITHER, FILE_ANY_ACCESS)
End Sub

'MACROS - The following common functions from driver examples are either implemented as macros
'   rather than exports, so we must duplicate the underlying macro, or otherwise need to be 
'   implemented in a different way than C/C++.

[ConstantFoldable]
Public Function CTL_CODE(ByVal DeviceType As Long, ByVal lFunction As Long, ByVal Method As Long, ByVal Access As Long) As Long
   CTL_CODE = ((DeviceType) << 16&) Or ((Access) << 14&) Or ((lFunction) << 2) Or (Method)
End Function

Public Function IoGetCurrentIrpStackLocation(ByRef pIrp As IRP) As LongPtr
    IoGetCurrentIrpStackLocation = pIrp.CurrentStackLocation
End Function

Public Function IoGetNextIrpStackLocation(ByRef pIrp As IRP) As LongPtr
    IoGetNextIrpStackLocation = pIrp.CurrentStackLocation - LenB(Of LongPtr)
End Function

Public Sub IoCopyCurrentIrpStackLocationToNext(pIrp As IRP)
    Dim irpSp As LongPtr
    Dim nextIrpSp As LongPtr
    irpSp = IoGetCurrentIrpStackLocation(pIrp)
    nextIrpSp = IoGetNextIrpStackLocation(pIrp)
    
    Dim lOffset As LongPtr 'Manually implement FIELD_OFFSET(IO_STACK_LOCATION, CompletionRoutine)
    #If Win64 Then
        lOffset = &H38
    #Else
        lOffset = &H1C
    #End If
    
    CopyMemory ByVal nextIrpSp, ByVal irpSp, lOffset
    ZeroMemory ByVal nextIrpSp + 3, 1 'nextIrpSp->Control = 0;
End Sub

Public Sub IoSkipCurrentIrpStackLocation(pIrp As IRP)
    pIrp.CurrentLocation += CByte(1)
    pIrp.CurrentStackLocation += 1
End Sub

[IgnoreWarnings(TB0018)]
Public Sub IoSetCompletionRoutine(pIrp As IRP, ByVal CompletionRoutine As LongPtr, ByVal Context As LongPtr, InvokeOnSuccess As Boolean, InvokeOnError As Boolean, InvokeOnCancel As Boolean)
    Dim irpSp As LongPtr
    irpSp = IoGetNextIrpStackLocation(pIrp)
    Dim lOffset As LongPtr 'Manually implement FIELD_OFFSET(IO_STACK_LOCATION, CompletionRoutine)
    #If Win64 Then
        lOffset = &H38
    #Else
        lOffset = &H1C
    #End If
    CopyMemory ByVal irpSp + lOffset, CompletionRoutine, LenB(CompletionRoutine)
    
    lOffset += LenB(CompletionRoutine)
    CopyMemory ByVal irpSp + lOffset, Context, LenB(Context)
    
    Dim ctl As Byte
    If InvokeOnSuccess Then ctl = SL_INVOKE_ON_SUCCESS
    If InvokeOnError Then ctl = ctl Or SL_INVOKE_ON_ERROR
    If InvokeOnCancel Then ctl = ctl Or SL_INVOKE_ON_CANCEL
    CopyMemory ByVal irpSp + 3, ctl, LenB(ctl)
End Sub

Public Function IoAcquireRemoveLock(RemoveLock As IO_REMOVE_LOCK, ByVal Tag As LongPtr, ByVal Line As Long) As Long
    IoAcquireRemoveLock = IoAcquireRemoveLockEx(RemoveLock, ByVal Tag, StrPtr(SOURCE_FILE), Line, LenB(RemoveLock))
End Function

Public Sub IoReleaseRemoveLock(RemoveLock As IO_REMOVE_LOCK, ByVal Tag As LongPtr)
    Call IoReleaseRemoveLockEx(RemoveLock, ByVal Tag, LenB(RemoveLock))
End Sub

Public Sub IoInitializeRemoveLock(RemoveLock As IO_REMOVE_LOCK, Tag As Long, Maxmin As Long, HighWater As Long)
    Call IoInitializeRemoveLockEx(RemoveLock, Tag, Maxmin, HighWater, LenB(RemoveLock))
End Sub

Public Sub IoReleaseRemoveLockAndWait(RemoveLock As IO_REMOVE_LOCK, Tag As Long, RemlockSize As Long)
    IoReleaseRemoveLockAndWaitEx RemoveLock, Tag, RemlockSize
End Sub

Public Function IoCallDriver(DeviceObject As DEVICE_OBJECT, pIrp As IRP) As Long
    IoCallDriver = IofCallDriver(DeviceObject, pIrp)
End Function

Public Sub InitializeListHead(ListHead As LIST_ENTRY)
    ListHead.Blink = VarPtr(ListHead)
    ListHead.Flink = VarPtr(ListHead)
End Sub
Public Function IsListEmpty(ListHead As LIST_ENTRY) As Byte
    If (ListHead.Flink = VarPtr(ListHead)) Then
        Return 1
    Else
        Return 0
    End If
End Function
Public Sub InsertHeadList(ListHead As LIST_ENTRY, Entry As LIST_ENTRY)
    Dim NextEntry As LIST_ENTRY
    CopyMemory NextEntry, ByVal ListHead.Flink, LenB(Of LIST_ENTRY)
    Entry.Flink = VarPtr(NextEntry)
    Entry.Blink = VarPtr(ListHead)
    NextEntry.Blink = VarPtr(Entry)
    ListHead.Flink = VarPtr(Entry)
End Sub
Public Function RemoveListHead(ListHead As LIST_ENTRY) As LIST_ENTRY
    Dim Entry As LIST_ENTRY
    Dim NextEntry As LIST_ENTRY
    CopyMemory Entry, ByVal ListHead.Flink, LenB(Of LIST_ENTRY)
    CopyMemory NextEntry, ByVal Entry.Flink, LenB(Of LIST_ENTRY)
    ListHead.Flink = VarPtr(NextEntry)
    NextEntry.Blink = VarPtr(ListHead)
    Return Entry
End Function
Public Sub InsertTailList(ListHead As LIST_ENTRY, Entry As LIST_ENTRY)
    Dim PrevEntry As LIST_ENTRY
    CopyMemory PrevEntry, ByVal ListHead.Blink, LenB(Of LIST_ENTRY)
    Entry.Flink = VarPtr(ListHead)
    Entry.Blink = VarPtr(PrevEntry)
    PrevEntry.Flink = VarPtr(Entry)
    ListHead.Blink = VarPtr(Entry)
End Sub

Public Sub InitializeObjectAttributes(p As OBJECT_ATTRIBUTES, ByVal n As LongPtr, ByVal a As ObjectAttributeValues, ByVal r As LongPtr, ByVal s As LongPtr)
    With p
        .Length = LenB(Of OBJECT_ATTRIBUTES)
        .RootDirectory = r
        .Attributes = a
        .ObjectName = n
        .SecurityDescriptor = s
        .SecurityQualityOfService = 0
    End With
End Sub

Public Sub ExInitializeFastMutex(ByRef FastMutex As FAST_MUTEX)
    FastMutex.Owner = 0
    FastMutex.Contention = 0
    KeInitializeEvent FastMutex.Event, SynchronizationEvent, 0
End Sub

Public Function CmKeyObjectType() As LongPtr
    If usCmKeyObjectType.Buffer = 0 Then
        RtlInitUnicodeString usCmKeyObjectType, StrPtr(szCmKeyObjectType)
    End If
    Return MmGetSystemRoutineAddress(usCmKeyObjectType)
End Function
Public Function IoFileObjectType() As LongPtr
    If usIoFileObjectType.Buffer = 0 Then
        RtlInitUnicodeString usIoFileObjectType, StrPtr(szIoFileObjectType)
    End If
    Return MmGetSystemRoutineAddress(usIoFileObjectType)
End Function
Public Function ExEventObjectType() As LongPtr
    If usExEventObjectType.Buffer = 0 Then
        RtlInitUnicodeString usExEventObjectType, StrPtr(szExEventObjectType)
    End If
    Return MmGetSystemRoutineAddress(usExEventObjectType)
End Function
Public Function ExSemaphoreObjectType() As LongPtr
    If usExSemaphoreObjectType.Buffer = 0 Then
        RtlInitUnicodeString usExSemaphoreObjectType, StrPtr(szExSemaphoreObjectType)
    End If
    Return MmGetSystemRoutineAddress(usExSemaphoreObjectType)
End Function
Public Function TmTransactionManagerObjectType() As LongPtr
    If usTmTransactionManagerObjectType.Buffer = 0 Then
        RtlInitUnicodeString usTmTransactionManagerObjectType, StrPtr(szTmTransactionManagerObjectType)
    End If
    Return MmGetSystemRoutineAddress(usTmTransactionManagerObjectType)
End Function
Public Function TmResourceManagerObjectType() As LongPtr
    If usTmResourceManagerObjectType.Buffer = 0 Then
        RtlInitUnicodeString usTmResourceManagerObjectType, StrPtr(szTmResourceManagerObjectType)
    End If
    Return MmGetSystemRoutineAddress(usTmResourceManagerObjectType)
End Function
Public Function TmEnlistmentObjectType() As LongPtr
    If usTmEnlistmentObjectType.Buffer = 0 Then
        RtlInitUnicodeString usTmEnlistmentObjectType, StrPtr(szTmEnlistmentObjectType)
    End If
    Return MmGetSystemRoutineAddress(usTmEnlistmentObjectType)
End Function
Public Function TmTransactionObjectType() As LongPtr
    If usTmTransactionObjectType.Buffer = 0 Then
        RtlInitUnicodeString usTmTransactionObjectType, StrPtr(szTmTransactionObjectType)
    End If
    Return MmGetSystemRoutineAddress(usTmTransactionObjectType)
End Function
Public Function PsProcessType() As LongPtr
    If usPsProcessType.Buffer = 0 Then
        RtlInitUnicodeString usPsProcessType, StrPtr(szPsProcessType)
    End If
    Return MmGetSystemRoutineAddress(usPsProcessType)
End Function
Public Function PsThreadType() As LongPtr
    If usPsThreadType.Buffer = 0 Then
        RtlInitUnicodeString usPsThreadType, StrPtr(szPsThreadType)
    End If
    Return MmGetSystemRoutineAddress(usPsThreadType)
End Function
Public Function PsJobType() As LongPtr
    If usPsJobType.Buffer = 0 Then
        RtlInitUnicodeString usPsJobType, StrPtr(szPsJobType)
    End If
    Return MmGetSystemRoutineAddress(usPsJobType)
End Function
Public Function SeTokenObjectType() As LongPtr
    If usSeTokenObjectType.Buffer = 0 Then
        RtlInitUnicodeString usSeTokenObjectType, StrPtr(szSeTokenObjectType)
    End If
    Return MmGetSystemRoutineAddress(usSeTokenObjectType)
End Function
Public Function ExDesktopObjectType() As LongPtr
    If usExDesktopObjectType.Buffer = 0 Then
        RtlInitUnicodeString usExDesktopObjectType, StrPtr(szExDesktopObjectType)
    End If
    Return MmGetSystemRoutineAddress(usExDesktopObjectType)
End Function

[IgnoreWarnings(TB0018)]
Public Function MmGetSystemAddressForMdlSafe(ByVal Mdl As LongPtr, [TypeHint(MM_PAGE_PRIORITY, MdlMappingFlags)] ByVal Priority As Long) As LongPtr
    Dim tMDL As MDL
    CopyMemory tMDL, ByVal Mdl, LenB(Of MDL)
    If (tMDL.MdlFlags And (MDL_MAPPED_TO_SYSTEM_VA Or MDL_SOURCE_IS_NONPAGED_POOL)) Then
        Return tMDL.MappedSystemVa
    Else
        Return MmMapLockedPagesSpecifyCache(Mdl, KernelMode, MmCached, 0, 0, Priority)
    End If
End Function

[Description("WARNING: This function is not compatible with x86 Windows. It would require support for the fastcall calling convention.")]
Public Sub InterlockedAdd64(Addend As LongLong, ByVal Value As LongLong)
    Dim pksl As LongPtr, irql As Byte
    KeInitializeSpinLock pksl
    irql = KeAcquireSpinLock(pksl)
    ExInterlockedAddLargeInteger (Addend, Value, pksl)
    KeReleaseSpinLock pksl, irql
End Sub

[PackingAlignment(1)]
Private Type KmMsgBox
    pText As LongPtr
    pTitle As LongPtr
    nType As LongPtr
End Type
[Description("Yes, this is a MsgBox implementation for kernel mode." & vbCrLf & "IMPORTANT: This must originate from a user-mode process, e.g. in the DeviceIoControl handler.")]
Public Function MsgBox(ByVal lpText As LongPtr, ByVal dwOptions As MessageBoxFlags, ByVal lpTitle As LongPtr) As HARDERROR_RESPONSE
    Dim pArgs As KmMsgBox
    Dim uText As UNICODE_STRING
    Dim uTitle As UNICODE_STRING
    
    RtlInitUnicodeString uText, lpText
    RtlInitUnicodeString uText, lpTitle
    pArgs.pText = VarPtr(uText)
    pArgs.pTitle = VarPtr(uTitle)
    pArgs.nType = dwOptions
    
    Dim lRet As HARDERROR_RESPONSE
    
    ExRaiseHardError STATUS_SERVICE_NOTIFICATION Or HARDERROR_OVERRIDE_ERRORMODE, 3, &H3, pArgs, 3, lRet
    
    Return lRet
End Function
Public Function LCase(ByVal sz As LongPtr) As LongPtr
    'Override 
    Return _wcslwr(sz)
End Function
Public Function UCase(ByVal sz As LongPtr) As LongPtr
    'Override 
    Return _wcsupr(sz)
End Function
Public Function StrRev(ByVal sz As LongPtr) As LongPtr
    'Override
    Return _wcsrev(sz)
End Function
Public Function InStr(ByVal szIn As LongPtr, ByVal szFind As LongPtr) As Long
    'Override
    Dim lpRet As LongPtr = wcsstr(szIn, szFind)
    If lpRet Then
        Return CLng(szIn - lpRet)
    Else
        Return 0
    End If
End Function
End Module